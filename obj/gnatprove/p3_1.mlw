(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "vector" defined at p3_1.ads:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "vector" defined at p3_1.ads:5, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "vector" defined at p3_1.ads:5, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "vector" defined at p3_1.ads:5, created in Gnat2Why.Types.Translate_Type *)
module P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type vector =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type vector__ref =
  { mutable vector__content : vector }
 
 function vector__ref_vector__content__projection 
   (a : vector__ref) : vector =
  a.vector__content
 
 meta "model_projection" function vector__ref_vector__content__projection
 
 meta "inline:no" function vector__ref_vector__content__projection
 
 val vector__havoc 
   (x : vector__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3s" defined at p3_1.ads:7, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t3s =
  < range 0 4 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at p3_1.ads:7, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T3s__rep
 use        P3_1__T3s as P3_1__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : P3_1__T3s.t3s) : int =
  (P3_1__T3s.t3s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = P3_1__T3s.t3s, 
 predicate in_range = P3_1__T3s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at p3_1.ads:7, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T4s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5s" defined at p3_1.ads:8, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T5s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t5s =
  < range 0 4 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t5s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t5s__ref =
  { mutable t5s__content : t5s }
 
 function t5s__ref_t5s__content__projection 
   (a : t5s__ref) : t5s =
  a.t5s__content
 
 meta "model_projection" function t5s__ref_t5s__content__projection
 
 meta "inline:no" function t5s__ref_t5s__content__projection
 
 val t5s__havoc 
   (x : t5s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T5s" defined at p3_1.ads:8, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T5s__rep
 use        P3_1__T5s as P3_1__T5s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : P3_1__T5s.t5s) : int =
  (P3_1__T5s.t5s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = P3_1__T5s.t5s, 
 predicate in_range = P3_1__T5s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T6s" defined at p3_1.ads:8, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T6s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "number" defined at p3_1.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__search_and_increment__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"p3_1.ads" 11 0 0][@name:number] [@model_trace:3238] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at p3_1.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__search_and_increment__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T21s" defined at p3_1.ads:18, created in Gnat2Why.Types.Translate_Type *)
module P3_1__search_and_increment__L20s__T21s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t21s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t21s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t21s__ref =
  { mutable t21s__content : t21s }
 
 function t21s__ref_t21s__content__projection 
   (a : t21s__ref) : t21s =
  a.t21s__content
 
 meta "model_projection" function t21s__ref_t21s__content__projection
 
 meta "inline:no" function t21s__ref_t21s__content__projection
 
 val t21s__havoc 
   (x : t21s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T23s" defined at p3_1.ads:27, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__L22s__T23s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t23s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t23s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t23s__ref =
  { mutable t23s__content : t23s }
 
 function t23s__ref_t23s__content__projection 
   (a : t23s__ref) : t23s =
  a.t23s__content
 
 meta "model_projection" function t23s__ref_t23s__content__projection
 
 meta "inline:no" function t23s__ref_t23s__content__projection
 
 val t23s__havoc 
   (x : t23s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T25s" defined at p3_1.ads:28, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__L22s__L24s__T25s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t25s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t25s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t25s__ref =
  { mutable t25s__content : t25s }
 
 function t25s__ref_t25s__content__projection 
   (a : t25s__ref) : t25s =
  a.t25s__content
 
 meta "model_projection" function t25s__ref_t25s__content__projection
 
 meta "inline:no" function t25s__ref_t25s__content__projection
 
 val t25s__havoc 
   (x : t25s__ref) : unit
  writes {x}

end

(* Module for defining the constant "vec1" defined at p3_1.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_max_count__vec1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vec1 [#"p3_1.ads" 33 0 0][@model_projected] [@name:vec1] [@model_trace:3421] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vec1" defined at p3_1.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_max_count__vec1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "vec2" defined at p3_1.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_max_count__vec2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vec2 [#"p3_1.ads" 33 0 0][@model_trace:3428] [@model_projected] [@name:vec2] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vec2" defined at p3_1.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_max_count__vec2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_max_count" defined at p3_1.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__get_max_count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val function get_max_count 
   (vec1 : P3_1__vector.vector) (vec2 : P3_1__vector.vector) : int
 
 val predicate get_max_count__function_guard 
   (temp___result_156 : int) (vec1 : P3_1__vector.vector) (vec2 : P3_1__vector.vector)

end

(* Module for defining the constant "systolic" defined at p3_1.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_bood_pressure_degree__systolic
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant systolic [#"p3_1.ads" 39 0 0][@model_trace:3508] [@name:systolic] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "systolic" defined at p3_1.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_bood_pressure_degree__systolic___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "diastolic" defined at p3_1.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_bood_pressure_degree__diastolic
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant diastolic [#"p3_1.ads" 39 0 0][@name:diastolic] [@model_trace:3515] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "diastolic" defined at p3_1.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_bood_pressure_degree__diastolic___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T26s" defined at p3_1.ads:44, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T26s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T27s" defined at p3_1.ads:46, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T27s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T28s" defined at p3_1.ads:48, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29s" defined at p3_1.ads:50, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T29s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T30s" defined at p3_1.ads:52, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T30s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T31s" defined at p3_1.ads:54, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T31s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (39 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T32s" defined at p3_1.ads:55, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T32s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "get_bood_pressure_degree" defined at p3_1.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__get_bood_pressure_degree
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function get_bood_pressure_degree 
   (systolic : int) (diastolic : int) : Standard__string.string
 
 val predicate get_bood_pressure_degree__function_guard 
   (temp___result_157 : Standard__string.string) (systolic : int) (diastolic : int)

end

(* Module for defining the constant "string1" defined at p3_1.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__compare_to__string1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant string1 [#"p3_1.ads" 57 0 0][@name:String1] [@model_trace:3688] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "string1" defined at p3_1.ads:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__compare_to__string1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "string2" defined at p3_1.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__compare_to__string2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant string2 [#"p3_1.ads" 57 0 0][@name:String2] [@model_projected] [@model_trace:3695] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "string2" defined at p3_1.ads:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__compare_to__string2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "compare_to" defined at p3_1.ads:57, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__compare_to
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function compare_to 
   (string1 : Standard__string.string) (string2 : Standard__string.string) : bool
 
 val predicate compare_to__function_guard 
   (temp___result_158 : bool) (string1 : Standard__string.string) (string2 : Standard__string.string)

end

(* Module for defining the constant "vector1" defined at p3_1.ads:62, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__delete_elements__vector1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vector1 [#"p3_1.ads" 62 0 0][@model_projected] [@model_trace:3741] [@name:Vector1] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vector1" defined at p3_1.ads:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__vector1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "number" defined at p3_1.ads:62, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__delete_elements__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"p3_1.ads" 62 0 0][@name:Number] [@model_trace:3750] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at p3_1.ads:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T34s" defined at p3_1.ads:67, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L33s__T34s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t34s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t34s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t34s__ref =
  { mutable t34s__content : t34s }
 
 function t34s__ref_t34s__content__projection 
   (a : t34s__ref) : t34s =
  a.t34s__content
 
 meta "model_projection" function t34s__ref_t34s__content__projection
 
 meta "inline:no" function t34s__ref_t34s__content__projection
 
 val t34s__havoc 
   (x : t34s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T36s" defined at p3_1.ads:69, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L35s__T36s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t36s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t36s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t36s__ref =
  { mutable t36s__content : t36s }
 
 function t36s__ref_t36s__content__projection 
   (a : t36s__ref) : t36s =
  a.t36s__content
 
 meta "model_projection" function t36s__ref_t36s__content__projection
 
 meta "inline:no" function t36s__ref_t36s__content__projection
 
 val t36s__havoc 
   (x : t36s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "delete_elements" defined at p3_1.ads:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__delete_elements
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val function delete_elements 
   (vector1 : P3_1__vector.vector) (number : int) : P3_1__vector.vector
 
 val predicate delete_elements__function_guard 
   (temp___result_159 : P3_1__vector.vector) (vector1 : P3_1__vector.vector) (number : int)

end

(* Module for defining the constant "vector1" defined at p3_1.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__count_lower_elements__vector1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vector1 [#"p3_1.ads" 71 0 0][@model_projected] [@model_trace:3851] [@name:Vector1] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vector1" defined at p3_1.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__vector1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "number" defined at p3_1.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__count_lower_elements__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"p3_1.ads" 71 0 0][@name:Number] [@model_trace:3860] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at p3_1.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T38s" defined at p3_1.ads:77, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__L37s__T38s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t38s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t38s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t38s__ref =
  { mutable t38s__content : t38s }
 
 function t38s__ref_t38s__content__projection 
   (a : t38s__ref) : t38s =
  a.t38s__content
 
 meta "model_projection" function t38s__ref_t38s__content__projection
 
 meta "inline:no" function t38s__ref_t38s__content__projection
 
 val t38s__havoc 
   (x : t38s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T40s" defined at p3_1.ads:79, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__L39s__T40s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t40s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t40s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t40s__ref =
  { mutable t40s__content : t40s }
 
 function t40s__ref_t40s__content__projection 
   (a : t40s__ref) : t40s =
  a.t40s__content
 
 meta "model_projection" function t40s__ref_t40s__content__projection
 
 meta "inline:no" function t40s__ref_t40s__content__projection
 
 val t40s__havoc 
   (x : t40s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "count_lower_elements" defined at p3_1.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__count_lower_elements
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val function count_lower_elements 
   (vector1 : P3_1__vector.vector) (number : int) : int
 
 val predicate count_lower_elements__function_guard 
   (temp___result_160 : int) (vector1 : P3_1__vector.vector) (number : int)

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T4b" defined at p3_1.adb:14, created in Gnat2Why.Types.Translate_Type *)
module P3_1__search_and_increment__L_1__L3b__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content : t4b }
 
 function t4b__ref_t4b__content__projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref_t4b__content__projection
 
 meta "inline:no" function t4b__ref_t4b__content__projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at p3_1.adb:14, created in Gnat2Why.Types.Translate_Type *)
module P3_1__search_and_increment__L_1__L1b__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content : t2b }
 
 function t2b__ref_t2b__content__projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref_t2b__content__projection
 
 meta "inline:no" function t2b__ref_t2b__content__projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTvecSP1" defined at p3_1.adb:25, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__TTvecSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTvecSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTvecSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTvecSP1__ref =
  { mutable tTvecSP1__content : tTvecSP1 }
 
 function tTvecSP1__ref_tTvecSP1__content__projection 
   (a : tTvecSP1__ref) : tTvecSP1 =
  a.tTvecSP1__content
 
 meta "model_projection" function tTvecSP1__ref_tTvecSP1__content__projection
 
 meta "inline:no" function tTvecSP1__ref_tTvecSP1__content__projection
 
 val tTvecSP1__havoc 
   (x : tTvecSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TvecS" defined at p3_1.adb:25, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__TvecS
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tvecS =
  vector
 
 type tvecS__ref =
  { mutable tvecS__content : tvecS }
 
 function tvecS__ref_tvecS__content__projection 
   (a : tvecS__ref) : tvecS =
  a.tvecS__content
 
 meta "model_projection" function tvecS__ref_tvecS__content__projection
 
 meta "inline:no" function tvecS__ref_tvecS__content__projection
 
 val tvecS__havoc 
   (x : tvecS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5b" defined at p3_1.adb:25, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t5b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content : t5b }
 
 function t5b__ref_t5b__content__projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref_t5b__content__projection
 
 meta "inline:no" function t5b__ref_t5b__content__projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at p3_1.adb:25, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__T6b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t6b =
  vector
 
 type t6b__ref =
  { mutable t6b__content : t6b }
 
 function t6b__ref_t6b__content__projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref_t6b__content__projection
 
 meta "inline:no" function t6b__ref_t6b__content__projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at p3_1.adb:33, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__L_2__L11b__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t12b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t12b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12b__ref =
  { mutable t12b__content : t12b }
 
 function t12b__ref_t12b__content__projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref_t12b__content__projection
 
 meta "inline:no" function t12b__ref_t12b__content__projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at p3_1.adb:34, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__L_2__L11b__L13b__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content : t14b }
 
 function t14b__ref_t14b__content__projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref_t14b__content__projection
 
 meta "inline:no" function t14b__ref_t14b__content__projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8b" defined at p3_1.adb:33, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__L_2__L7b__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t8b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t8b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8b__ref =
  { mutable t8b__content : t8b }
 
 function t8b__ref_t8b__content__projection 
   (a : t8b__ref) : t8b =
  a.t8b__content
 
 meta "model_projection" function t8b__ref_t8b__content__projection
 
 meta "inline:no" function t8b__ref_t8b__content__projection
 
 val t8b__havoc 
   (x : t8b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at p3_1.adb:34, created in Gnat2Why.Types.Translate_Type *)
module P3_1__inverse_vector__L_2__L7b__L9b__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS17bP1" defined at p3_1.adb:45, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__TS17bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS17bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS17bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS17bP1__ref =
  { mutable tS17bP1__content : tS17bP1 }
 
 function tS17bP1__ref_tS17bP1__content__projection 
   (a : tS17bP1__ref) : tS17bP1 =
  a.tS17bP1__content
 
 meta "model_projection" function tS17bP1__ref_tS17bP1__content__projection
 
 meta "inline:no" function tS17bP1__ref_tS17bP1__content__projection
 
 val tS17bP1__havoc 
   (x : tS17bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S17b" defined at p3_1.adb:45, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__S17b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s17b =
  vector
 
 type s17b__ref =
  { mutable s17b__content : s17b }
 
 function s17b__ref_s17b__content__projection 
   (a : s17b__ref) : s17b =
  a.s17b__content
 
 meta "model_projection" function s17b__ref_s17b__content__projection
 
 meta "inline:no" function s17b__ref_s17b__content__projection
 
 val s17b__havoc 
   (x : s17b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS16bP1" defined at p3_1.adb:45, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__TS16bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS16bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS16bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS16bP1__ref =
  { mutable tS16bP1__content : tS16bP1 }
 
 function tS16bP1__ref_tS16bP1__content__projection 
   (a : tS16bP1__ref) : tS16bP1 =
  a.tS16bP1__content
 
 meta "model_projection" function tS16bP1__ref_tS16bP1__content__projection
 
 meta "inline:no" function tS16bP1__ref_tS16bP1__content__projection
 
 val tS16bP1__havoc 
   (x : tS16bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S16b" defined at p3_1.adb:45, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__S16b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s16b =
  vector
 
 type s16b__ref =
  { mutable s16b__content : s16b }
 
 function s16b__ref_s16b__content__projection 
   (a : s16b__ref) : s16b =
  a.s16b__content
 
 meta "model_projection" function s16b__ref_s16b__content__projection
 
 meta "inline:no" function s16b__ref_s16b__content__projection
 
 val s16b__havoc 
   (x : s16b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T21b" defined at p3_1.adb:56, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T21b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T23b" defined at p3_1.adb:58, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T23b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T25b" defined at p3_1.adb:60, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T27b" defined at p3_1.adb:62, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at p3_1.adb:64, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T31b" defined at p3_1.adb:66, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (39 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T33b" defined at p3_1.adb:68, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS35bP1" defined at p3_1.adb:71, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__TS35bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS35bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS35bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS35bP1__ref =
  { mutable tS35bP1__content : tS35bP1 }
 
 function tS35bP1__ref_tS35bP1__content__projection 
   (a : tS35bP1__ref) : tS35bP1 =
  a.tS35bP1__content
 
 meta "model_projection" function tS35bP1__ref_tS35bP1__content__projection
 
 meta "inline:no" function tS35bP1__ref_tS35bP1__content__projection
 
 val tS35bP1__havoc 
   (x : tS35bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S35b" defined at p3_1.adb:71, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__S35b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s35b =
  string
 
 type s35b__ref =
  { mutable s35b__content : s35b }
 
 function s35b__ref_s35b__content__projection 
   (a : s35b__ref) : s35b =
  a.s35b__content
 
 meta "model_projection" function s35b__ref_s35b__content__projection
 
 meta "inline:no" function s35b__ref_s35b__content__projection
 
 val s35b__havoc 
   (x : s35b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS34bP1" defined at p3_1.adb:71, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__TS34bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS34bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS34bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS34bP1__ref =
  { mutable tS34bP1__content : tS34bP1 }
 
 function tS34bP1__ref_tS34bP1__content__projection 
   (a : tS34bP1__ref) : tS34bP1 =
  a.tS34bP1__content
 
 meta "model_projection" function tS34bP1__ref_tS34bP1__content__projection
 
 meta "inline:no" function tS34bP1__ref_tS34bP1__content__projection
 
 val tS34bP1__havoc 
   (x : tS34bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S34b" defined at p3_1.adb:71, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__S34b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s34b =
  string
 
 type s34b__ref =
  { mutable s34b__content : s34b }
 
 function s34b__ref_s34b__content__projection 
   (a : s34b__ref) : s34b =
  a.s34b__content
 
 meta "model_projection" function s34b__ref_s34b__content__projection
 
 meta "inline:no" function s34b__ref_s34b__content__projection
 
 val s34b__havoc 
   (x : s34b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS37bP1" defined at p3_1.adb:76, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__TS37bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS37bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS37bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS37bP1__ref =
  { mutable tS37bP1__content : tS37bP1 }
 
 function tS37bP1__ref_tS37bP1__content__projection 
   (a : tS37bP1__ref) : tS37bP1 =
  a.tS37bP1__content
 
 meta "model_projection" function tS37bP1__ref_tS37bP1__content__projection
 
 meta "inline:no" function tS37bP1__ref_tS37bP1__content__projection
 
 val tS37bP1__havoc 
   (x : tS37bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S37b" defined at p3_1.adb:76, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__S37b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s37b =
  vector
 
 type s37b__ref =
  { mutable s37b__content : s37b }
 
 function s37b__ref_s37b__content__projection 
   (a : s37b__ref) : s37b =
  a.s37b__content
 
 meta "model_projection" function s37b__ref_s37b__content__projection
 
 meta "inline:no" function s37b__ref_s37b__content__projection
 
 val s37b__havoc 
   (x : s37b__ref) : unit
  writes {x}

end

(* Module for defining the constant "R38b" defined at p3_1.adb:77, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__delete_elements__R38b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r38b [#"p3_1.adb" 77 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TTaux_vectorSP1" defined at p3_1.adb:77, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__TTaux_vectorSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTaux_vectorSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTaux_vectorSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTaux_vectorSP1__ref =
  { mutable tTaux_vectorSP1__content : tTaux_vectorSP1 }
 
 function tTaux_vectorSP1__ref_tTaux_vectorSP1__content__projection 
   (a : tTaux_vectorSP1__ref) : tTaux_vectorSP1 =
  a.tTaux_vectorSP1__content
 
 meta "model_projection" function tTaux_vectorSP1__ref_tTaux_vectorSP1__content__projection
 
 meta "inline:no" function tTaux_vectorSP1__ref_tTaux_vectorSP1__content__projection
 
 val tTaux_vectorSP1__havoc 
   (x : tTaux_vectorSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Taux_vectorS" defined at p3_1.adb:77, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__Taux_vectorS
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type taux_vectorS =
  vector
 
 type taux_vectorS__ref =
  { mutable taux_vectorS__content : taux_vectorS }
 
 function taux_vectorS__ref_taux_vectorS__content__projection 
   (a : taux_vectorS__ref) : taux_vectorS =
  a.taux_vectorS__content
 
 meta "model_projection" function taux_vectorS__ref_taux_vectorS__content__projection
 
 meta "inline:no" function taux_vectorS__ref_taux_vectorS__content__projection
 
 val taux_vectorS__havoc 
   (x : taux_vectorS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T39b" defined at p3_1.adb:77, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T39b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t39b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t39b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t39b__ref =
  { mutable t39b__content : t39b }
 
 function t39b__ref_t39b__content__projection 
   (a : t39b__ref) : t39b =
  a.t39b__content
 
 meta "model_projection" function t39b__ref_t39b__content__projection
 
 meta "inline:no" function t39b__ref_t39b__content__projection
 
 val t39b__havoc 
   (x : t39b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T40b" defined at p3_1.adb:77, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T40b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t40b =
  vector
 
 type t40b__ref =
  { mutable t40b__content : t40b }
 
 function t40b__ref_t40b__content__projection 
   (a : t40b__ref) : t40b =
  a.t40b__content
 
 meta "model_projection" function t40b__ref_t40b__content__projection
 
 meta "inline:no" function t40b__ref_t40b__content__projection
 
 val t40b__havoc 
   (x : t40b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T42b" defined at p3_1.adb:81, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T42b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t42b =
  < range 1 1 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t42b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t42b__ref =
  { mutable t42b__content : t42b }
 
 function t42b__ref_t42b__content__projection 
   (a : t42b__ref) : t42b =
  a.t42b__content
 
 meta "model_projection" function t42b__ref_t42b__content__projection
 
 meta "inline:no" function t42b__ref_t42b__content__projection
 
 val t42b__havoc 
   (x : t42b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T42b" defined at p3_1.adb:81, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T42b__rep
 use        P3_1__delete_elements__T42b as P3_1__delete_elements__T42b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : P3_1__delete_elements__T42b.t42b) : int =
  (P3_1__delete_elements__T42b.t42b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = P3_1__delete_elements__T42b.t42b, 
 predicate in_range = P3_1__delete_elements__T42b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T43b" defined at p3_1.adb:81, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T43b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T44b" defined at p3_1.adb:83, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_3__T44b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t44b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t44b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t44b__ref =
  { mutable t44b__content : t44b }
 
 function t44b__ref_t44b__content__projection 
   (a : t44b__ref) : t44b =
  a.t44b__content
 
 meta "model_projection" function t44b__ref_t44b__content__projection
 
 meta "inline:no" function t44b__ref_t44b__content__projection
 
 val t44b__havoc 
   (x : t44b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T51b" defined at p3_1.adb:94, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_3__L50b__T51b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t51b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t51b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t51b__ref =
  { mutable t51b__content : t51b }
 
 function t51b__ref_t51b__content__projection 
   (a : t51b__ref) : t51b =
  a.t51b__content
 
 meta "model_projection" function t51b__ref_t51b__content__projection
 
 meta "inline:no" function t51b__ref_t51b__content__projection
 
 val t51b__havoc 
   (x : t51b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T47b" defined at p3_1.adb:94, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_3__L46b__T47b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t47b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t47b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t47b__ref =
  { mutable t47b__content : t47b }
 
 function t47b__ref_t47b__content__projection 
   (a : t47b__ref) : t47b =
  a.t47b__content
 
 meta "model_projection" function t47b__ref_t47b__content__projection
 
 meta "inline:no" function t47b__ref_t47b__content__projection
 
 val t47b__havoc 
   (x : t47b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T53b" defined at p3_1.adb:96, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_3__L52b__T53b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t53b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t53b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t53b__ref =
  { mutable t53b__content : t53b }
 
 function t53b__ref_t53b__content__projection 
   (a : t53b__ref) : t53b =
  a.t53b__content
 
 meta "model_projection" function t53b__ref_t53b__content__projection
 
 meta "inline:no" function t53b__ref_t53b__content__projection
 
 val t53b__havoc 
   (x : t53b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T49b" defined at p3_1.adb:96, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_3__L48b__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t49b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t49b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t49b__ref =
  { mutable t49b__content : t49b }
 
 function t49b__ref_t49b__content__projection 
   (a : t49b__ref) : t49b =
  a.t49b__content
 
 meta "model_projection" function t49b__ref_t49b__content__projection
 
 meta "inline:no" function t49b__ref_t49b__content__projection
 
 val t49b__havoc 
   (x : t49b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS55bP1" defined at p3_1.adb:101, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__TS55bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS55bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS55bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS55bP1__ref =
  { mutable tS55bP1__content : tS55bP1 }
 
 function tS55bP1__ref_tS55bP1__content__projection 
   (a : tS55bP1__ref) : tS55bP1 =
  a.tS55bP1__content
 
 meta "model_projection" function tS55bP1__ref_tS55bP1__content__projection
 
 meta "inline:no" function tS55bP1__ref_tS55bP1__content__projection
 
 val tS55bP1__havoc 
   (x : tS55bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S55b" defined at p3_1.adb:101, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__S55b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s55b =
  vector
 
 type s55b__ref =
  { mutable s55b__content : s55b }
 
 function s55b__ref_s55b__content__projection 
   (a : s55b__ref) : s55b =
  a.s55b__content
 
 meta "model_projection" function s55b__ref_s55b__content__projection
 
 meta "inline:no" function s55b__ref_s55b__content__projection
 
 val s55b__havoc 
   (x : s55b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "global_vector" defined at p3_1.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__global_vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val global_vector [#"p3_1.ads" 7 0 0][@name:Global_Vector] [@model_projected] [@model_trace:3185]  : Array__Int__Standard__integer.map__ref 
 
 val constant global_vector__first [#"p3_1.ads" 7 0 0][@name:Global_Vector] [@model_trace:3185'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant global_vector__last [#"p3_1.ads" 7 0 0][@name:Global_Vector] [@model_projected] [@model_trace:3185'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "global_vector" defined at p3_1.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__global_vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "global_inverse_vector" defined at p3_1.ads:8, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__global_inverse_vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val global_inverse_vector [#"p3_1.ads" 8 0 0][@name:Global_Inverse_Vector] [@model_projected] [@model_trace:3205]  : Array__Int__Standard__integer.map__ref 
 
 val constant global_inverse_vector__first [#"p3_1.ads" 8 0 0][@model_trace:3205'First] [@name:Global_Inverse_Vector] [@model_projected] 
   : Standard__integer.integer

 
 val constant global_inverse_vector__last [#"p3_1.ads" 8 0 0][@model_trace:3205'Last] [@name:Global_Inverse_Vector] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "global_inverse_vector" defined at p3_1.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__global_inverse_vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "increment" defined at p3_1.ads:9, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__increment
 use        "_gnatprove_standard".Main
 use        "int".Int

 val increment [#"p3_1.ads" 9 0 0][@model_trace:3221] [@name:Increment] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "increment" defined at p3_1.ads:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__increment___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at p3_1.adb:9, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__search_and_increment__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"p3_1.adb" 9 0 0][@name:i] [@model_projected] [@model_trace:2358]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at p3_1.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__search_and_increment__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "vec" defined at p3_1.adb:25, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__inverse_vector__vec
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val vec [#"p3_1.adb" 25 0 0][@model_projected] [@name:vec] [@model_trace:2460]  : Array__Int__Standard__integer.map__ref 
 
 val constant vec__first [#"p3_1.adb" 25 0 0][@model_trace:2460'First] [@model_projected] [@name:vec] 
   : Standard__integer.integer

 
 val constant vec__last [#"p3_1.adb" 25 0 0][@model_projected] [@name:vec] [@model_trace:2460'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vec" defined at p3_1.adb:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__inverse_vector__vec___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at p3_1.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__inverse_vector__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"p3_1.adb" 26 0 0][@name:i] [@model_projected] [@model_trace:2482]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at p3_1.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__inverse_vector__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at p3_1.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__inverse_vector__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"p3_1.adb" 27 0 0][@name:j] [@model_projected] [@model_trace:2494]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at p3_1.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__inverse_vector__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "aux_vector" defined at p3_1.adb:77, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__delete_elements__aux_vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val aux_vector [#"p3_1.adb" 77 0 0][@model_trace:2832] [@model_projected] [@name:Aux_Vector]  : Array__Int__Standard__integer.map__ref 
 
 val constant aux_vector__first [#"p3_1.adb" 77 0 0][@model_projected] [@model_trace:2832'First] [@name:Aux_Vector] 
   : Standard__integer.integer

 
 val constant aux_vector__last [#"p3_1.adb" 77 0 0][@model_projected] [@model_trace:2832'Last] [@name:Aux_Vector] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "aux_vector" defined at p3_1.adb:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__aux_vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at p3_1.adb:78, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__delete_elements__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"p3_1.adb" 78 0 0][@name:j] [@model_projected] [@model_trace:2855]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at p3_1.adb:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at p3_1.adb:83, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__delete_elements__L_3__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"p3_1.adb" 83 0 0][@model_trace:2879] [@name:i] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at p3_1.adb:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__L_3__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at p3_1.adb:102, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__count_lower_elements__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"p3_1.adb" 102 0 0][@name:i] [@model_projected] [@model_trace:3007]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at p3_1.adb:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at p3_1.adb:103, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__count_lower_elements__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"p3_1.adb" 103 0 0][@model_projected] [@model_trace:3019] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at p3_1.adb:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "search_and_increment" defined at p3_1.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__search_and_increment
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "inverse_vector" defined at p3_1.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__inverse_vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector as P3_1__vector

 val function inverse_vector 
   (p3_1__global_inverse_vector : Array__Int__Standard__integer.map) : P3_1__vector.vector
 
 val predicate inverse_vector__function_guard 
   (temp___result_155 : P3_1__vector.vector) (p3_1__global_inverse_vector : Array__Int__Standard__integer.map)

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_161 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_162 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for defining the loop exit exception for the loop "L_1" defined at p3_1.adb:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module P3_1__search_and_increment__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at p3_1.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__search_and_increment__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at p3_1.adb:29, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module P3_1__inverse_vector__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at p3_1.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__inverse_vector__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at p3_1.adb:83, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module P3_1__delete_elements__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at p3_1.adb:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at p3_1.adb:105, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module P3_1__count_lower_elements__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at p3_1.adb:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "vector" defined at p3_1.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        P3_1__vector as P3_1__vector

 predicate dynamic_invariant [@inline] 
   (temp___expr_168 : P3_1__vector.vector) (temp___is_init_164 : bool) (temp___skip_constant_165 : bool) (temp___do_toplevel_166 : bool) (temp___do_typ_inv_167 : bool) =
  (if (temp___skip_constant_165) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (P3_1__vector.first temp___expr_168) (P3_1__vector.last temp___expr_168))))
 val dynamic_invariant [@inline] 
   (temp___expr_168 : P3_1__vector.vector) (temp___is_init_164 : bool) (temp___skip_constant_165 : bool) (temp___do_toplevel_166 : bool) (temp___do_typ_inv_167 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_168 : P3_1__vector.vector) (temp___is_init_164 : bool) (temp___skip_constant_165 : bool) (temp___do_toplevel_166 : bool) (temp___do_typ_inv_167 : bool) }

end

(* Module giving axioms for type "T3s" defined at p3_1.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4s" defined at p3_1.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T4s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5s" defined at p3_1.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T5s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6s" defined at p3_1.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T6s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T21s" defined at p3_1.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__search_and_increment__L20s__T21s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23s" defined at p3_1.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__L22s__T23s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25s" defined at p3_1.ads:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__L22s__L24s__T25s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26s" defined at p3_1.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T26s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27s" defined at p3_1.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T27s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28s" defined at p3_1.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T28s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29s" defined at p3_1.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T29s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30s" defined at p3_1.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T30s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31s" defined at p3_1.ads:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T31s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32s" defined at p3_1.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T32s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at p3_1.ads:44, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_179
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_179 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_179__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_179 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (5 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (7 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (8 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (9 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_179 __void_param) (11 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:46, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_183
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_183 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_183__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_183 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_183 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_183 __void_param) (2 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_183 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_183 __void_param) (4 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_183 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_183 __void_param) (6 : int))) = (108 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:48, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_187
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_187 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_187__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_187 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (4 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (5 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (6 : int))) = (112 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (8 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (9 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (11 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (12 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (14 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_187 __void_param) (15 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:50, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_191
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_191 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_191__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_191 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_191 __void_param) (20 : int))) = (49 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:52, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_195
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_195 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_195__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_195 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_195 __void_param) (20 : int))) = (50 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:54, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_199
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_199 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_199__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_199 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (9 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (10 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (11 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (12 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (14 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (15 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (16 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (18 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (19 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (20 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (21 : int))) = (40 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (22 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (23 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (24 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (26 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (27 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (28 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (29 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (30 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (31 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (32 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (33 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (34 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (35 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (36 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (37 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (38 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_199 __void_param) (39 : int))) = (41 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:55, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_203
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_203 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_203__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_203 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_203 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_203 __void_param) (2 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_203 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_203 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_203 __void_param) (5 : int))) = (114 : int)) ) ))

end

(* Module giving axioms for type "T34s" defined at p3_1.ads:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L33s__T34s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36s" defined at p3_1.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L35s__T36s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38s" defined at p3_1.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__L37s__T38s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T40s" defined at p3_1.ads:79, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__L39s__T40s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_248 : int) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool) =
  (if (( temp___is_init_244 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_248)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_248 : int) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_248 : int) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_249 : int) (temp___skip_top_level_250 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_249 : int) (temp___skip_top_level_250 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_249 : int) (temp___skip_top_level_250 : bool) }

end

(* Module giving axioms for type "T4b" defined at p3_1.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__search_and_increment__L_1__L3b__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at p3_1.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__search_and_increment__L_1__L1b__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTvecSP1" defined at p3_1.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__TTvecSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TvecS" defined at p3_1.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__TvecS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer__rep as Standard__integer__rep
 use        P3_1__global_inverse_vector as P3_1__global_inverse_vector
 use        P3_1__inverse_vector__TvecS as P3_1__inverse_vector__TvecS

 predicate dynamic_invariant [@inline] 
   (temp___expr_255 : P3_1__inverse_vector__TvecS.tvecS) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) =
  (if (temp___skip_constant_252) then (
   true) else (
   ( (P3_1__inverse_vector__TvecS.dynamic_property (0 : int) ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int)) (P3_1__inverse_vector__TvecS.first temp___expr_255) (P3_1__inverse_vector__TvecS.last temp___expr_255)) /\ ( ((P3_1__inverse_vector__TvecS.first temp___expr_255) = (0 : int)) /\ ((P3_1__inverse_vector__TvecS.last temp___expr_255) = ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int))) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_255 : P3_1__inverse_vector__TvecS.tvecS) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_255 : P3_1__inverse_vector__TvecS.tvecS) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_257 : P3_1__inverse_vector__TvecS.tvecS) (temp___skip_top_level_258 : bool) =
  ( ( true /\ ((P3_1__inverse_vector__TvecS.first temp___expr_257) = (0 : int)) )/\((P3_1__inverse_vector__TvecS.last temp___expr_257) = ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int))) )
 val default_initial_assumption [@inline] 
   (temp___expr_257 : P3_1__inverse_vector__TvecS.tvecS) (temp___skip_top_level_258 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_257 : P3_1__inverse_vector__TvecS.tvecS) (temp___skip_top_level_258 : bool) }

end

(* Module giving axioms for type "T5b" defined at p3_1.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at p3_1.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at p3_1.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__L_2__L11b__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at p3_1.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__L_2__L11b__L13b__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at p3_1.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__L_2__L7b__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at p3_1.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__inverse_vector__L_2__L7b__L9b__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS17bP1" defined at p3_1.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__TS17bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S17b" defined at p3_1.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__S17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count__vec2 as P3_1__get_max_count__vec2
 use        P3_1__get_max_count__S17b as P3_1__get_max_count__S17b

 predicate dynamic_invariant [@inline] 
   (temp___expr_265 : P3_1__get_max_count__S17b.s17b) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) =
  (if (temp___skip_constant_262) then (
   true) else (
   ( (P3_1__get_max_count__S17b.dynamic_property (P3_1__vector.first P3_1__get_max_count__vec2.vec2) (P3_1__vector.last P3_1__get_max_count__vec2.vec2) (P3_1__get_max_count__S17b.first temp___expr_265) (P3_1__get_max_count__S17b.last temp___expr_265)) /\ ( ((P3_1__get_max_count__S17b.first temp___expr_265) = (P3_1__vector.first P3_1__get_max_count__vec2.vec2)) /\ ((P3_1__get_max_count__S17b.last temp___expr_265) = (P3_1__vector.last P3_1__get_max_count__vec2.vec2)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_265 : P3_1__get_max_count__S17b.s17b) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_265 : P3_1__get_max_count__S17b.s17b) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_267 : P3_1__get_max_count__S17b.s17b) (temp___skip_top_level_268 : bool) =
  ( ( true /\ ((P3_1__get_max_count__S17b.first temp___expr_267) = (P3_1__vector.first P3_1__get_max_count__vec2.vec2)) )/\((P3_1__get_max_count__S17b.last temp___expr_267) = (P3_1__vector.last P3_1__get_max_count__vec2.vec2)) )
 val default_initial_assumption [@inline] 
   (temp___expr_267 : P3_1__get_max_count__S17b.s17b) (temp___skip_top_level_268 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_267 : P3_1__get_max_count__S17b.s17b) (temp___skip_top_level_268 : bool) }

end

(* Module giving axioms for type "TS16bP1" defined at p3_1.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__TS16bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S16b" defined at p3_1.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__S16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count__vec1 as P3_1__get_max_count__vec1
 use        P3_1__get_max_count__S16b as P3_1__get_max_count__S16b

 predicate dynamic_invariant [@inline] 
   (temp___expr_275 : P3_1__get_max_count__S16b.s16b) (temp___is_init_271 : bool) (temp___skip_constant_272 : bool) (temp___do_toplevel_273 : bool) (temp___do_typ_inv_274 : bool) =
  (if (temp___skip_constant_272) then (
   true) else (
   ( (P3_1__get_max_count__S16b.dynamic_property (P3_1__vector.first P3_1__get_max_count__vec1.vec1) (P3_1__vector.last P3_1__get_max_count__vec1.vec1) (P3_1__get_max_count__S16b.first temp___expr_275) (P3_1__get_max_count__S16b.last temp___expr_275)) /\ ( ((P3_1__get_max_count__S16b.first temp___expr_275) = (P3_1__vector.first P3_1__get_max_count__vec1.vec1)) /\ ((P3_1__get_max_count__S16b.last temp___expr_275) = (P3_1__vector.last P3_1__get_max_count__vec1.vec1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_275 : P3_1__get_max_count__S16b.s16b) (temp___is_init_271 : bool) (temp___skip_constant_272 : bool) (temp___do_toplevel_273 : bool) (temp___do_typ_inv_274 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_275 : P3_1__get_max_count__S16b.s16b) (temp___is_init_271 : bool) (temp___skip_constant_272 : bool) (temp___do_toplevel_273 : bool) (temp___do_typ_inv_274 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_277 : P3_1__get_max_count__S16b.s16b) (temp___skip_top_level_278 : bool) =
  ( ( true /\ ((P3_1__get_max_count__S16b.first temp___expr_277) = (P3_1__vector.first P3_1__get_max_count__vec1.vec1)) )/\((P3_1__get_max_count__S16b.last temp___expr_277) = (P3_1__vector.last P3_1__get_max_count__vec1.vec1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_277 : P3_1__get_max_count__S16b.s16b) (temp___skip_top_level_278 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_277 : P3_1__get_max_count__S16b.s16b) (temp___skip_top_level_278 : bool) }

end

(* Module giving axioms for type "T21b" defined at p3_1.adb:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23b" defined at p3_1.adb:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at p3_1.adb:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27b" defined at p3_1.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at p3_1.adb:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31b" defined at p3_1.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33b" defined at p3_1.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS35bP1" defined at p3_1.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__TS35bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S35b" defined at p3_1.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__S35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        P3_1__compare_to__string2 as P3_1__compare_to__string2
 use        P3_1__compare_to__S35b as P3_1__compare_to__S35b

 predicate dynamic_invariant [@inline] 
   (temp___expr_285 : P3_1__compare_to__S35b.s35b) (temp___is_init_281 : bool) (temp___skip_constant_282 : bool) (temp___do_toplevel_283 : bool) (temp___do_typ_inv_284 : bool) =
  (if (temp___skip_constant_282) then (
   true) else (
   ( (P3_1__compare_to__S35b.dynamic_property (Standard__string.first P3_1__compare_to__string2.string2) (Standard__string.last P3_1__compare_to__string2.string2) (P3_1__compare_to__S35b.first temp___expr_285) (P3_1__compare_to__S35b.last temp___expr_285)) /\ ( ((P3_1__compare_to__S35b.first temp___expr_285) = (Standard__string.first P3_1__compare_to__string2.string2)) /\ ((P3_1__compare_to__S35b.last temp___expr_285) = (Standard__string.last P3_1__compare_to__string2.string2)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_285 : P3_1__compare_to__S35b.s35b) (temp___is_init_281 : bool) (temp___skip_constant_282 : bool) (temp___do_toplevel_283 : bool) (temp___do_typ_inv_284 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_285 : P3_1__compare_to__S35b.s35b) (temp___is_init_281 : bool) (temp___skip_constant_282 : bool) (temp___do_toplevel_283 : bool) (temp___do_typ_inv_284 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_287 : P3_1__compare_to__S35b.s35b) (temp___skip_top_level_288 : bool) =
  ( ( true /\ ((P3_1__compare_to__S35b.first temp___expr_287) = (Standard__string.first P3_1__compare_to__string2.string2)) )/\((P3_1__compare_to__S35b.last temp___expr_287) = (Standard__string.last P3_1__compare_to__string2.string2)) )
 val default_initial_assumption [@inline] 
   (temp___expr_287 : P3_1__compare_to__S35b.s35b) (temp___skip_top_level_288 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_287 : P3_1__compare_to__S35b.s35b) (temp___skip_top_level_288 : bool) }

end

(* Module giving axioms for type "TS34bP1" defined at p3_1.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__TS34bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S34b" defined at p3_1.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__S34b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        P3_1__compare_to__string1 as P3_1__compare_to__string1
 use        P3_1__compare_to__S34b as P3_1__compare_to__S34b

 predicate dynamic_invariant [@inline] 
   (temp___expr_295 : P3_1__compare_to__S34b.s34b) (temp___is_init_291 : bool) (temp___skip_constant_292 : bool) (temp___do_toplevel_293 : bool) (temp___do_typ_inv_294 : bool) =
  (if (temp___skip_constant_292) then (
   true) else (
   ( (P3_1__compare_to__S34b.dynamic_property (Standard__string.first P3_1__compare_to__string1.string1) (Standard__string.last P3_1__compare_to__string1.string1) (P3_1__compare_to__S34b.first temp___expr_295) (P3_1__compare_to__S34b.last temp___expr_295)) /\ ( ((P3_1__compare_to__S34b.first temp___expr_295) = (Standard__string.first P3_1__compare_to__string1.string1)) /\ ((P3_1__compare_to__S34b.last temp___expr_295) = (Standard__string.last P3_1__compare_to__string1.string1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_295 : P3_1__compare_to__S34b.s34b) (temp___is_init_291 : bool) (temp___skip_constant_292 : bool) (temp___do_toplevel_293 : bool) (temp___do_typ_inv_294 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_295 : P3_1__compare_to__S34b.s34b) (temp___is_init_291 : bool) (temp___skip_constant_292 : bool) (temp___do_toplevel_293 : bool) (temp___do_typ_inv_294 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_297 : P3_1__compare_to__S34b.s34b) (temp___skip_top_level_298 : bool) =
  ( ( true /\ ((P3_1__compare_to__S34b.first temp___expr_297) = (Standard__string.first P3_1__compare_to__string1.string1)) )/\((P3_1__compare_to__S34b.last temp___expr_297) = (Standard__string.last P3_1__compare_to__string1.string1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_297 : P3_1__compare_to__S34b.s34b) (temp___skip_top_level_298 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_297 : P3_1__compare_to__S34b.s34b) (temp___skip_top_level_298 : bool) }

end

(* Module giving axioms for type "TS37bP1" defined at p3_1.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__TS37bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S37b" defined at p3_1.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__S37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__delete_elements__vector1 as P3_1__delete_elements__vector1
 use        P3_1__delete_elements__S37b as P3_1__delete_elements__S37b

 predicate dynamic_invariant [@inline] 
   (temp___expr_305 : P3_1__delete_elements__S37b.s37b) (temp___is_init_301 : bool) (temp___skip_constant_302 : bool) (temp___do_toplevel_303 : bool) (temp___do_typ_inv_304 : bool) =
  (if (temp___skip_constant_302) then (
   true) else (
   ( (P3_1__delete_elements__S37b.dynamic_property (P3_1__vector.first P3_1__delete_elements__vector1.vector1) (P3_1__vector.last P3_1__delete_elements__vector1.vector1) (P3_1__delete_elements__S37b.first temp___expr_305) (P3_1__delete_elements__S37b.last temp___expr_305)) /\ ( ((P3_1__delete_elements__S37b.first temp___expr_305) = (P3_1__vector.first P3_1__delete_elements__vector1.vector1)) /\ ((P3_1__delete_elements__S37b.last temp___expr_305) = (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_305 : P3_1__delete_elements__S37b.s37b) (temp___is_init_301 : bool) (temp___skip_constant_302 : bool) (temp___do_toplevel_303 : bool) (temp___do_typ_inv_304 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_305 : P3_1__delete_elements__S37b.s37b) (temp___is_init_301 : bool) (temp___skip_constant_302 : bool) (temp___do_toplevel_303 : bool) (temp___do_typ_inv_304 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_307 : P3_1__delete_elements__S37b.s37b) (temp___skip_top_level_308 : bool) =
  ( ( true /\ ((P3_1__delete_elements__S37b.first temp___expr_307) = (P3_1__vector.first P3_1__delete_elements__vector1.vector1)) )/\((P3_1__delete_elements__S37b.last temp___expr_307) = (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_307 : P3_1__delete_elements__S37b.s37b) (temp___skip_top_level_308 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_307 : P3_1__delete_elements__S37b.s37b) (temp___skip_top_level_308 : bool) }

end

(* Module giving axioms for type "TTaux_vectorSP1" defined at p3_1.adb:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__TTaux_vectorSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Taux_vectorS" defined at p3_1.adb:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__Taux_vectorS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        P3_1__delete_elements__R38b as P3_1__delete_elements__R38b
 use        P3_1__delete_elements__Taux_vectorS as P3_1__delete_elements__Taux_vectorS

 predicate dynamic_invariant [@inline] 
   (temp___expr_315 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool) =
  (if (temp___skip_constant_312) then (
   true) else (
   ( (P3_1__delete_elements__Taux_vectorS.dynamic_property (0 : int) P3_1__delete_elements__R38b.r38b (P3_1__delete_elements__Taux_vectorS.first temp___expr_315) (P3_1__delete_elements__Taux_vectorS.last temp___expr_315)) /\ ( ((P3_1__delete_elements__Taux_vectorS.first temp___expr_315) = (0 : int)) /\ ((P3_1__delete_elements__Taux_vectorS.last temp___expr_315) = P3_1__delete_elements__R38b.r38b) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_315 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_315 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_317 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___skip_top_level_318 : bool) =
  ( ( true /\ ((P3_1__delete_elements__Taux_vectorS.first temp___expr_317) = (0 : int)) )/\((P3_1__delete_elements__Taux_vectorS.last temp___expr_317) = P3_1__delete_elements__R38b.r38b) )
 val default_initial_assumption [@inline] 
   (temp___expr_317 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___skip_top_level_318 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_317 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___skip_top_level_318 : bool) }

end

(* Module giving axioms for type "T39b" defined at p3_1.adb:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T39b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T40b" defined at p3_1.adb:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T40b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T42b" defined at p3_1.adb:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T42b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T43b" defined at p3_1.adb:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T43b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T44b" defined at p3_1.adb:83, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_3__T44b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T51b" defined at p3_1.adb:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_3__L50b__T51b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T47b" defined at p3_1.adb:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_3__L46b__T47b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T53b" defined at p3_1.adb:96, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_3__L52b__T53b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T49b" defined at p3_1.adb:96, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_3__L48b__T49b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS55bP1" defined at p3_1.adb:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__TS55bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S55b" defined at p3_1.adb:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__S55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__count_lower_elements__vector1 as P3_1__count_lower_elements__vector1
 use        P3_1__count_lower_elements__S55b as P3_1__count_lower_elements__S55b

 predicate dynamic_invariant [@inline] 
   (temp___expr_325 : P3_1__count_lower_elements__S55b.s55b) (temp___is_init_321 : bool) (temp___skip_constant_322 : bool) (temp___do_toplevel_323 : bool) (temp___do_typ_inv_324 : bool) =
  (if (temp___skip_constant_322) then (
   true) else (
   ( (P3_1__count_lower_elements__S55b.dynamic_property (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1) (P3_1__count_lower_elements__S55b.first temp___expr_325) (P3_1__count_lower_elements__S55b.last temp___expr_325)) /\ ( ((P3_1__count_lower_elements__S55b.first temp___expr_325) = (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1)) /\ ((P3_1__count_lower_elements__S55b.last temp___expr_325) = (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_325 : P3_1__count_lower_elements__S55b.s55b) (temp___is_init_321 : bool) (temp___skip_constant_322 : bool) (temp___do_toplevel_323 : bool) (temp___do_typ_inv_324 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_325 : P3_1__count_lower_elements__S55b.s55b) (temp___is_init_321 : bool) (temp___skip_constant_322 : bool) (temp___do_toplevel_323 : bool) (temp___do_typ_inv_324 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_327 : P3_1__count_lower_elements__S55b.s55b) (temp___skip_top_level_328 : bool) =
  ( ( true /\ ((P3_1__count_lower_elements__S55b.first temp___expr_327) = (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1)) )/\((P3_1__count_lower_elements__S55b.last temp___expr_327) = (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_327 : P3_1__count_lower_elements__S55b.s55b) (temp___skip_top_level_328 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_327 : P3_1__count_lower_elements__S55b.s55b) (temp___skip_top_level_328 : bool) }

end

(* Module for declaring an abstract function for the aggregate at p3_1.ads:7, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_vector__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function p3_1__global_vector__aggregate_def 
   (temp___334 : int) (temp___335 : int) (temp___336 : int) (temp___337 : int) (temp___338 : int) : Array__Int__Standard__integer.map

end

(* Module for declaring an abstract function for the aggregate at p3_1.ads:8, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_inverse_vector__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function p3_1__global_inverse_vector__aggregate_def 
   (temp___342 : int) (temp___343 : int) (temp___344 : int) (temp___345 : int) (temp___346 : int) : Array__Int__Standard__integer.map

end

(* Module for declaring an abstract function for the aggregate at p3_1.adb:25, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__inverse_vector__vec__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__inverse_vector__T6b as P3_1__inverse_vector__T6b

 val function p3_1__inverse_vector__vec__aggregate_def 
   (temp___360 : int) (temp___361 : int) (temp___362 : int) : P3_1__inverse_vector__T6b.t6b

end

(* Module for defining a value for string literal  defined at p3_1.adb:56, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_381
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_381 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_381__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_381 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (5 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (7 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (8 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (9 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (11 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:66, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_382
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_382 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_382__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_382 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (9 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (10 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (11 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (12 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (14 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (15 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (16 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (18 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (19 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (20 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (21 : int))) = (40 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (22 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (23 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (24 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (26 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (27 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (28 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (29 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (30 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (31 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (32 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (33 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (34 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (35 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (36 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (37 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (38 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (39 : int))) = (41 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:64, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_383
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_383 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_383__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_383 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (20 : int))) = (50 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:62, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_384
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_384 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_384__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_384 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_384 __void_param) (20 : int))) = (49 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:60, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_385
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_385 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_385__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_385 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (4 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (5 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (6 : int))) = (112 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (8 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (9 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (11 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (12 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (14 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_385 __void_param) (15 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:58, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_386
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_386 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_386__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_386 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_386 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_386 __void_param) (2 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_386 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_386 __void_param) (4 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_386 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_386 __void_param) (6 : int))) = (108 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:68, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_387
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_387 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_387__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_387 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (2 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (5 : int))) = (114 : int)) ) ))

end

(* Module for declaring an abstract function for the aggregate at p3_1.adb:77, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__delete_elements__aux_vector__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__delete_elements__T40b as P3_1__delete_elements__T40b

 val function p3_1__delete_elements__aux_vector__aggregate_def 
   (temp___440 : int) (temp___441 : int) (temp___442 : int) : P3_1__delete_elements__T40b.t40b

end

(* Module for declaring an abstract function for the aggregate at p3_1.adb:81, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_447
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function temp_____aggregate_def_447 
   (temp___449 : int) : Array__Int__Standard__integer.map

end
(* Module for defining the value of constant "R38b" defined at p3_1.adb:77, created in Gnat2Why.Decls.Translate_Constant_Value *)
module P3_1__delete_elements__R38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        P3_1__delete_elements__vector1 as P3_1__delete_elements__vector1
 use        P3_1__delete_elements__number as P3_1__delete_elements__number
 use        P3_1__count_lower_elements as P3_1__count_lower_elements
 use        P3_1__delete_elements__R38b as P3_1__delete_elements__R38b

 axiom r38b__def_axiom :
  ((P3_1__delete_elements__R38b.r38b ) = ((epsilon temp___result_163 : int.
   ( (temp___result_163 = (P3_1__count_lower_elements.count_lower_elements P3_1__delete_elements__vector1.vector1 P3_1__delete_elements__number.number)) /\ (P3_1__count_lower_elements.count_lower_elements__function_guard temp___result_163 P3_1__delete_elements__vector1.vector1 P3_1__delete_elements__number.number) )) - (1 : int)))

end

(* Module for declaring a program function (and possibly an axiom) for "search_and_increment" defined at p3_1.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__search_and_increment___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_vector as P3_1__global_vector
 use        P3_1__increment as P3_1__increment
 use        P3_1__vector as P3_1__vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val search_and_increment 
   (number : int) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3275] ((Integer.length (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3281] ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3294] ( ( (number >= (0 : int)) /\ (P3_1__increment.increment.int__content <= ((2147483647 : int) - number)) ) \/ ( (number < (0 : int)) /\ (P3_1__increment.increment.int__content >= ((( -2147483648) : int) - number)) ) ) ) ) }
  ensures {  ( (forall k   [@name:K] [@model_trace:3310]  : int.
   ( ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) -> (if ((number = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)))) then (
    ( [@GP_Pretty_Ada:3329] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = (number + P3_1__increment.increment.int__content)) )) else (
    ( [@GP_Pretty_Ada:22398] true ))) )) /\ (if (True) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)))) ) }
  reads {P3_1__global_vector.global_vector, P3_1__increment.increment}
  writes {P3_1__global_vector.global_vector}

end

(* Module for declaring a program function (and possibly an axiom) for "inverse_vector" defined at p3_1.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__inverse_vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector as P3_1__global_inverse_vector
 use        P3_1__vector as P3_1__vector
 use        P3_1__inverse_vector as P3_1__inverse_vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val inverse_vector 
   (__void_param : unit) : P3_1__vector.vector
  requires {  ( ( ( [@GP_Pretty_Ada:3365] ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3371] ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) < (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3377] ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) = (0 : int)) ) ) }
  ensures {  ( ( (result = (P3_1__inverse_vector.inverse_vector P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content)) /\ (P3_1__inverse_vector.inverse_vector__function_guard result P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content) )/\( (P3_1__vector___axiom.dynamic_invariant result True False True True) /\ (forall i   [@name:I] [@model_trace:3382]  : int.
   ( ( ((P3_1__vector.first result) <= i) /\ (i <= (P3_1__vector.last result)) ) -> (forall j   [@model_trace:3395] [@name:J]  : int.
    ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= j) /\ (j <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) -> ( [@GP_Pretty_Ada:3411] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array result) i)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content j))) ) )) )) ) ) }
  reads {P3_1__global_inverse_vector.global_inverse_vector}

end

(* Module for declaring a program function (and possibly an axiom) for "get_max_count" defined at p3_1.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__get_max_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count as P3_1__get_max_count
 use        P3_1__vector___axiom as P3_1__vector___axiom

 val get_max_count 
   (vec1 : P3_1__vector.vector) (vec2 : P3_1__vector.vector) : int
  requires {  ( ( ( [@GP_Pretty_Ada:3464] ((P3_1__vector.length vec1) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3470] ((P3_1__vector.length vec2) > (0 : int)) ) ) /\ ( ( [@GP_Pretty_Ada:3476] ((P3_1__vector.length vec1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3482] ((P3_1__vector.length vec2) < (1000 : int)) ) ) ) }
  ensures {  ( ( (result = (P3_1__get_max_count.get_max_count vec1 vec2)) /\ (P3_1__get_max_count.get_max_count__function_guard result vec1 vec2) )/\( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ (if (((P3_1__vector.length vec1) < (P3_1__vector.length vec2))) then (
   ( [@GP_Pretty_Ada:3497] (result = (P3_1__vector.length vec1)) )) else (
   ( [@GP_Pretty_Ada:22499] true ))) ) ) }
 
 axiom get_max_count__post_axiom :
  (forall vec1   vec2   : P3_1__vector.vector [(P3_1__get_max_count.get_max_count vec1 vec2)].
   ( ( ( (P3_1__vector___axiom.dynamic_invariant vec1 True True True True) /\ (P3_1__vector___axiom.dynamic_invariant vec2 True True True True) ) /\ ( ( ( [@GP_Pretty_Ada:3464] ((P3_1__vector.length vec1) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3470] ((P3_1__vector.length vec2) > (0 : int)) ) ) /\ ( ( [@GP_Pretty_Ada:3476] ((P3_1__vector.length vec1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3482] ((P3_1__vector.length vec2) < (1000 : int)) ) ) ) ) -> (let result = (P3_1__get_max_count.get_max_count vec1 vec2) in (
    (if ((P3_1__get_max_count.get_max_count__function_guard result vec1 vec2)) then (
     ( ( (if (((P3_1__vector.length vec1) < (P3_1__vector.length vec2))) then (
      ( [@GP_Pretty_Ada:3497] (result = (P3_1__vector.length vec1)) )) else (
      ( [@GP_Pretty_Ada:22499] true ))) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_bood_pressure_degree" defined at p3_1.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__get_bood_pressure_degree___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        P3_1__get_bood_pressure_degree as P3_1__get_bood_pressure_degree
 use        Temp___String_Literal_179 as Temp___String_Literal_179
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_183 as Temp___String_Literal_183
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_187 as Temp___String_Literal_187
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_191 as Temp___String_Literal_191
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_195 as Temp___String_Literal_195
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_199 as Temp___String_Literal_199
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_203 as Temp___String_Literal_203
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_bood_pressure_degree 
   (systolic : int) (diastolic : int) : Standard__string.string
  requires {  ( ( ( ( [@GP_Pretty_Ada:3549] (systolic > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3553] (systolic < (2147483647 : int)) ) ) /\ ( [@GP_Pretty_Ada:3559] (diastolic > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3563] (diastolic < (2147483647 : int)) ) ) }
  ensures {  ( ( (result = (P3_1__get_bood_pressure_degree.get_bood_pressure_degree systolic diastolic)) /\ (P3_1__get_bood_pressure_degree.get_bood_pressure_degree__function_guard result systolic diastolic) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ (if (( (systolic < (80 : int)) \/ (diastolic < (60 : int)) )) then (
   ( [@GP_Pretty_Ada:3581] ( ((let temp___182 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_179.temp___String_Literal_179 ()) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___182 (1 : int) (11 : int))))
    = True) \/ (if (( ( ( (systolic > (80 : int)) /\ (systolic < (120 : int)) ) /\ (diastolic > (60 : int)) ) /\ (diastolic < (80 : int)) )) then (
    ( ((let temp___186 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_183.temp___String_Literal_183 ()) in (
     (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___186 (1 : int) (6 : int))))
     = True) \/ (if (( ( (systolic > (120 : int)) /\ (systolic < (139 : int)) ) \/ ( (diastolic > (80 : int)) /\ (diastolic < (89 : int)) ) )) then (
     ( ((let temp___190 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_187.temp___String_Literal_187 ()) in (
      (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___190 (1 : int) (15 : int))))
      = True) \/ (if (( ( (systolic > (140 : int)) /\ (systolic < (159 : int)) ) \/ ( (diastolic > (90 : int)) /\ (diastolic < (99 : int)) ) )) then (
      ( ((let temp___194 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_191.temp___String_Literal_191 ()) in (
       (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___194 (1 : int) (20 : int))))
       = True) \/ (if (( (systolic > (160 : int)) \/ (diastolic > (100 : int)) )) then (
       ( ((let temp___198 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_195.temp___String_Literal_195 ()) in (
        (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___198 (1 : int) (20 : int))))
        = True) \/ (if (( (systolic > (180 : int)) \/ (diastolic > (110 : int)) )) then (
        ((let temp___202 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_199.temp___String_Literal_199 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___202 (1 : int) (39 : int))))
         = True)) else (
        ((let temp___206 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_203.temp___String_Literal_203 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___206 (1 : int) (5 : int))))
         = True))) )) else (
       true)) )) else (
      true)) )) else (
     true)) )) else (
    true)) ) )) else (
   ( [@GP_Pretty_Ada:22562] true ))) ) ) }
 
 axiom get_bood_pressure_degree__post_axiom :
  (forall systolic   diastolic   : int [(P3_1__get_bood_pressure_degree.get_bood_pressure_degree systolic diastolic)].
   ( ( ( (Standard__integer___axiom.dynamic_invariant systolic True True True True) /\ (Standard__integer___axiom.dynamic_invariant diastolic True True True True) ) /\ ( ( ( ( [@GP_Pretty_Ada:3549] (systolic > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3553] (systolic < (2147483647 : int)) ) ) /\ ( [@GP_Pretty_Ada:3559] (diastolic > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3563] (diastolic < (2147483647 : int)) ) ) ) -> (let result = (P3_1__get_bood_pressure_degree.get_bood_pressure_degree systolic diastolic) in (
    (if ((P3_1__get_bood_pressure_degree.get_bood_pressure_degree__function_guard result systolic diastolic)) then (
     ( ( (if (( (systolic < (80 : int)) \/ (diastolic < (60 : int)) )) then (
      ( [@GP_Pretty_Ada:3581] ( ((let temp___210 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_179.temp___String_Literal_179 ()) in (
       (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___210 (1 : int) (11 : int))))
       = True) \/ (if (( ( ( (systolic > (80 : int)) /\ (systolic < (120 : int)) ) /\ (diastolic > (60 : int)) ) /\ (diastolic < (80 : int)) )) then (
       ( ((let temp___213 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_183.temp___String_Literal_183 ()) in (
        (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___213 (1 : int) (6 : int))))
        = True) \/ (if (( ( (systolic > (120 : int)) /\ (systolic < (139 : int)) ) \/ ( (diastolic > (80 : int)) /\ (diastolic < (89 : int)) ) )) then (
        ( ((let temp___216 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_187.temp___String_Literal_187 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___216 (1 : int) (15 : int))))
         = True) \/ (if (( ( (systolic > (140 : int)) /\ (systolic < (159 : int)) ) \/ ( (diastolic > (90 : int)) /\ (diastolic < (99 : int)) ) )) then (
         ( ((let temp___219 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_191.temp___String_Literal_191 ()) in (
          (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___219 (1 : int) (20 : int))))
          = True) \/ (if (( (systolic > (160 : int)) \/ (diastolic > (100 : int)) )) then (
          ( ((let temp___222 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_195.temp___String_Literal_195 ()) in (
           (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___222 (1 : int) (20 : int))))
           = True) \/ (if (( (systolic > (180 : int)) \/ (diastolic > (110 : int)) )) then (
           ((let temp___225 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_199.temp___String_Literal_199 ()) in (
            (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___225 (1 : int) (39 : int))))
            = True)) else (
           ((let temp___228 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_203.temp___String_Literal_203 ()) in (
            (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___228 (1 : int) (5 : int))))
            = True))) )) else (
          true)) )) else (
         true)) )) else (
        true)) )) else (
       true)) ) )) else (
      ( [@GP_Pretty_Ada:22562] true ))) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "compare_to" defined at p3_1.ads:57, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__compare_to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        P3_1__compare_to as P3_1__compare_to
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val compare_to 
   (string1 : Standard__string.string) (string2 : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (P3_1__compare_to.compare_to string1 string2)) /\ (P3_1__compare_to.compare_to__function_guard result string1 string2) )/\( [@GP_Pretty_Ada:22171] ( (result = True) <-> ((Array__Int__Standard__character.bool_eq (Standard__string.to_array string1) (Standard__string.first string1) (Standard__string.last string1) (Standard__string.to_array string2) (Standard__string.first string2) (Standard__string.last string2)) = True) ) ) ) }
 
 axiom compare_to__post_axiom :
  (forall string1   string2   : Standard__string.string [(P3_1__compare_to.compare_to string1 string2)].
   ( ( (Standard__string___axiom.dynamic_invariant string1 True True True True) /\ (Standard__string___axiom.dynamic_invariant string2 True True True True) ) -> (let result = (P3_1__compare_to.compare_to string1 string2) in (
    (if ((P3_1__compare_to.compare_to__function_guard result string1 string2)) then (
     ( ( ( [@GP_Pretty_Ada:22171] ( (result = True) <-> ((Array__Int__Standard__character.bool_eq (Standard__string.to_array string1) (Standard__string.first string1) (Standard__string.last string1) (Standard__string.to_array string2) (Standard__string.first string2) (Standard__string.last string2)) = True) ) ) /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "delete_elements" defined at p3_1.ads:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__delete_elements___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        P3_1__vector as P3_1__vector
 use        P3_1__delete_elements as P3_1__delete_elements
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val delete_elements 
   (vector1 : P3_1__vector.vector) (number : int) : P3_1__vector.vector
  requires {  ( ( [@GP_Pretty_Ada:3785] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3791] ((P3_1__vector.first vector1) = (0 : int)) ) ) }
  ensures {  ( ( (result = (P3_1__delete_elements.delete_elements vector1 number)) /\ (P3_1__delete_elements.delete_elements__function_guard result vector1 number) )/\( (P3_1__vector___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:22251] ( (if (((P3_1__vector.length result) = (0 : int))) then (
   (forall k   [@model_trace:3803] [@name:K]  : int.
    ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) > number) ))) else (
   true)) \/ (if (((P3_1__vector.length result) > (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) <= number) ))) else (
   true)) ) ) ) ) }
 
 axiom delete_elements__post_axiom :
  (forall vector1   : P3_1__vector.vector.
  (forall number   : int [(P3_1__delete_elements.delete_elements vector1 number)].
   ( ( ( (P3_1__vector___axiom.dynamic_invariant vector1 True True True True) /\ (Standard__integer___axiom.dynamic_invariant number True True True True) ) /\ ( ( [@GP_Pretty_Ada:3785] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3791] ((P3_1__vector.first vector1) = (0 : int)) ) ) ) -> (let result = (P3_1__delete_elements.delete_elements vector1 number) in (
    (if ((P3_1__delete_elements.delete_elements__function_guard result vector1 number)) then (
     ( ( ( [@GP_Pretty_Ada:22251] ( (if (((P3_1__vector.length result) = (0 : int))) then (
      (forall k   [@model_trace:3803] [@name:K]  : int.
       ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) > number) ))) else (
      true)) \/ (if (((P3_1__vector.length result) > (0 : int))) then (
      (exists k  : int.
       ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) <= number) ))) else (
      true)) ) ) /\ (P3_1__vector___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "count_lower_elements" defined at p3_1.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__count_lower_elements___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural___axiom as Standard__natural___axiom
 use        P3_1__vector as P3_1__vector
 use        P3_1__count_lower_elements as P3_1__count_lower_elements
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val count_lower_elements 
   (vector1 : P3_1__vector.vector) (number : int) : int
  requires {  ( ( [@GP_Pretty_Ada:3895] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3901] ((P3_1__vector.first vector1) = (0 : int)) ) ) }
  ensures {  ( ( (result = (P3_1__count_lower_elements.count_lower_elements vector1 number)) /\ (P3_1__count_lower_elements.count_lower_elements__function_guard result vector1 number) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:22340] ( (if (((P3_1__vector.length vector1) = (0 : int))) then (
   (result = (0 : int))) else (
   true)) \/ (if ((result <> (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) < number) ))) else (
   (forall x   [@model_trace:3939] [@name:X]  : int.
    ( ( ((P3_1__vector.first vector1) <= x) /\ (x <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) x)) >= number) )))) ) ) ) ) }
 
 axiom count_lower_elements__post_axiom :
  (forall vector1   : P3_1__vector.vector.
  (forall number   : int [(P3_1__count_lower_elements.count_lower_elements vector1 number)].
   ( ( ( (P3_1__vector___axiom.dynamic_invariant vector1 True True True True) /\ (Standard__integer___axiom.dynamic_invariant number True True True True) ) /\ ( ( [@GP_Pretty_Ada:3895] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3901] ((P3_1__vector.first vector1) = (0 : int)) ) ) ) -> (let result = (P3_1__count_lower_elements.count_lower_elements vector1 number) in (
    (if ((P3_1__count_lower_elements.count_lower_elements__function_guard result vector1 number)) then (
     ( ( ( [@GP_Pretty_Ada:22340] ( (if (((P3_1__vector.length vector1) = (0 : int))) then (
      (result = (0 : int))) else (
      true)) \/ (if ((result <> (0 : int))) then (
      (exists k  : int.
       ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) < number) ))) else (
      (forall x   [@model_trace:3939] [@name:X]  : int.
       ( ( ((P3_1__vector.first vector1) <= x) /\ (x <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) x)) >= number) )))) ) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for defining the value of the aggregate at p3_1.ads:7, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_vector__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_vector__aggregate_def as P3_1__global_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___334   temp___335   temp___336   temp___337   temp___338   : int.
   (let temp___333 [@mlw:proxy_symbol] [@introduced] = (P3_1__global_vector__aggregate_def.p3_1__global_vector__aggregate_def temp___334 temp___335 temp___336 temp___337 temp___338) in (
    (if (( ( (Standard__integer___axiom.dynamic_invariant temp___334 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___335 True True True True) )/\( ( (Standard__integer___axiom.dynamic_invariant temp___336 True True True True)/\(Standard__integer___axiom.dynamic_invariant temp___337 True True True True) )/\(Standard__integer___axiom.dynamic_invariant temp___338 True True True True) ) )) then (
     ( ( ((Array__Int__Standard__integer.get temp___333 (0 : int)) = ( -1 : Standard__integer.integer )) /\ ((Array__Int__Standard__integer.get temp___333 (1 : int)) = ( -1 : Standard__integer.integer )) )/\( ( ((Array__Int__Standard__integer.get temp___333 (2 : int)) = ( -1 : Standard__integer.integer ))/\((Array__Int__Standard__integer.get temp___333 (3 : int)) = ( -1 : Standard__integer.integer )) )/\((Array__Int__Standard__integer.get temp___333 (4 : int)) = ( -1 : Standard__integer.integer )) ) )) else true)))
  )

end

(* Module for defining the value of the aggregate at p3_1.ads:8, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_inverse_vector__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector__aggregate_def as P3_1__global_inverse_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___342   temp___343   temp___344   temp___345   temp___346   : int.
   (let temp___341 [@mlw:proxy_symbol] [@introduced] = (P3_1__global_inverse_vector__aggregate_def.p3_1__global_inverse_vector__aggregate_def temp___342 temp___343 temp___344 temp___345 temp___346) in (
    (if (( ( (Standard__integer___axiom.dynamic_invariant temp___342 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___343 True True True True) )/\( ( (Standard__integer___axiom.dynamic_invariant temp___344 True True True True)/\(Standard__integer___axiom.dynamic_invariant temp___345 True True True True) )/\(Standard__integer___axiom.dynamic_invariant temp___346 True True True True) ) )) then (
     ( ( ((Array__Int__Standard__integer.get temp___341 (0 : int)) = ( -3 : Standard__integer.integer )) /\ ((Array__Int__Standard__integer.get temp___341 (1 : int)) = ( 5 : Standard__integer.integer )) )/\( ( ((Array__Int__Standard__integer.get temp___341 (2 : int)) = ( 9 : Standard__integer.integer ))/\((Array__Int__Standard__integer.get temp___341 (3 : int)) = ( 0 : Standard__integer.integer )) )/\((Array__Int__Standard__integer.get temp___341 (4 : int)) = ( 22 : Standard__integer.integer )) ) )) else true)))
  )

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "p3_1" defined at p3_1.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module P3_1__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_vector as P3_1__global_vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector as P3_1__global_inverse_vector
 use        P3_1__increment as P3_1__increment
 use        P3_1__vector as P3_1__vector
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        P3_1__T3s as P3_1__T3s
 use        P3_1__T5s as P3_1__T5s
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        P3_1__global_vector__aggregate_def as P3_1__global_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector__aggregate_def as P3_1__global_inverse_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__global_vector___axiom as P3_1__global_vector___axiom
 use        P3_1__global_vector__aggregate_def___axiom as P3_1__global_vector__aggregate_def___axiom
 use        P3_1__global_inverse_vector___axiom as P3_1__global_inverse_vector___axiom
 use        P3_1__global_inverse_vector__aggregate_def___axiom as P3_1__global_inverse_vector__aggregate_def___axiom
 use        P3_1__increment___axiom as P3_1__increment___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        P3_1__T3s___axiom as P3_1__T3s___axiom
 use        P3_1__T5s___axiom as P3_1__T5s___axiom

 let def [#"p3_1.ads" 3 0 0][@GP_Subp:p3_1.ads:3] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 3 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"p3_1.ads" 3 0 0] ());
  ([#"p3_1.ads" 4 0 0] ());
  ([#"p3_1.ads" 5 0 0] ());
  ([#"p3_1.ads" 7 0 0] ());
  ([#"p3_1.ads" 7 0 0] ( (let p3_1__global_vector__assume = (P3_1__vector.of_array((P3_1__global_vector__aggregate_def.p3_1__global_vector__aggregate_def((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int)))) (P3_1__T3s.first) (P3_1__T3s.last)) in (
   ( [#"p3_1.ads" 7 0 0] (P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content <- ( (P3_1__vector.to_array(p3_1__global_vector__assume)) ));
   [#"p3_1.ads" 7 0 0] assume { [#"p3_1.ads" 7 0 0] ((Standard__integer__rep.to_rep(P3_1__global_vector.global_vector__first)) = (P3_1__vector.first(p3_1__global_vector__assume))) };
   [#"p3_1.ads" 7 0 0] assume { [#"p3_1.ads" 7 0 0] ((Standard__integer__rep.to_rep(P3_1__global_vector.global_vector__last)) = (P3_1__vector.last(p3_1__global_vector__assume))) } )))
  ;
  [#"p3_1.ads" 7 0 0] assume { [#"p3_1.ads" 7 0 0] (if (False) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)))) } ));
  ([#"p3_1.ads" 8 0 0] ( (let p3_1__global_inverse_vector__assume = (P3_1__vector.of_array((P3_1__global_inverse_vector__aggregate_def.p3_1__global_inverse_vector__aggregate_def((( -3) : int)) ((5 : int)) ((9 : int)) ((0 : int)) ((22 : int)))) (P3_1__T5s.first) (P3_1__T5s.last)) in (
   ( [#"p3_1.ads" 8 0 0] (P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content <- ( (P3_1__vector.to_array(p3_1__global_inverse_vector__assume)) ));
   [#"p3_1.ads" 8 0 0] assume { [#"p3_1.ads" 8 0 0] ((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__first)) = (P3_1__vector.first(p3_1__global_inverse_vector__assume))) };
   [#"p3_1.ads" 8 0 0] assume { [#"p3_1.ads" 8 0 0] ((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__last)) = (P3_1__vector.last(p3_1__global_inverse_vector__assume))) } )))
  ;
  [#"p3_1.ads" 8 0 0] assume { [#"p3_1.ads" 8 0 0] (if (False) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)))) } ));
  ([#"p3_1.ads" 9 0 0] ( [#"p3_1.ads" 9 0 0] (P3_1__increment.increment.int__content <- ( (1 : int) ));
  [#"p3_1.ads" 9 0 0] assume { [#"p3_1.ads" 9 0 0] (Standard__integer___axiom.dynamic_invariant P3_1__increment.increment.int__content True False True True) } ));
  ([#"p3_1.ads" 11 0 0] ());
  ([#"p3_1.ads" 18 0 0] ());
  ([#"p3_1.ads" 15 0 0] ());
  ([#"p3_1.ads" 14 0 0] ());
  ([#"p3_1.ads" 12 0 0] ());
  ([#"p3_1.ads" 22 0 0] ());
  ([#"p3_1.ads" 27 0 0] ());
  ([#"p3_1.ads" 25 0 0] ());
  ([#"p3_1.ads" 24 0 0] ());
  ([#"p3_1.ads" 23 0 0] ());
  ([#"p3_1.ads" 33 0 0] ());
  ([#"p3_1.ads" 37 0 0] ());
  ([#"p3_1.ads" 36 0 0] ());
  ([#"p3_1.ads" 35 0 0] ());
  ([#"p3_1.ads" 34 0 0] ());
  ([#"p3_1.ads" 39 0 0] ());
  ([#"p3_1.ads" 43 0 0] ());
  ([#"p3_1.ads" 42 0 0] ());
  ([#"p3_1.ads" 41 0 0] ());
  ([#"p3_1.ads" 40 0 0] ());
  ([#"p3_1.ads" 57 0 0] ());
  ([#"p3_1.ads" 60 0 0] ());
  ([#"p3_1.ads" 59 0 0] ());
  ([#"p3_1.ads" 58 0 0] ());
  ([#"p3_1.ads" 62 0 0] ());
  ([#"p3_1.ads" 66 0 0] ());
  ([#"p3_1.ads" 65 0 0] ());
  ([#"p3_1.ads" 64 0 0] ());
  ([#"p3_1.ads" 63 0 0] ());
  ([#"p3_1.ads" 71 0 0] ());
  ([#"p3_1.ads" 75 0 0] ());
  ([#"p3_1.ads" 74 0 0] ());
  ([#"p3_1.ads" 73 0 0] ());
  ([#"p3_1.ads" 72 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"p3_1.adb" 6 0 0] ());
  ([#"p3_1.adb" 8 0 0] ());
  ([#"p3_1.adb" 24 0 0] ());
  ([#"p3_1.adb" 45 0 0] ());
  ([#"p3_1.adb" 53 0 0] ());
  ([#"p3_1.adb" 71 0 0] ());
  ([#"p3_1.adb" 76 0 0] ());
  ([#"p3_1.adb" 101 0 0] ());
  ();
  ( [@GP_Sloc:p3_1.adb:117:1] ([#"p3_1.adb" 117 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "search_and_increment" defined at p3_1.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__search_and_increment__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_vector as P3_1__global_vector
 use        P3_1__increment as P3_1__increment
 use        P3_1__search_and_increment__number as P3_1__search_and_increment__number
 use        P3_1__vector as P3_1__vector
 use        P3_1__search_and_increment__i as P3_1__search_and_increment__i
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__search_and_increment__L_1 as P3_1__search_and_increment__L_1
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__search_and_increment__i___axiom as P3_1__search_and_increment__i___axiom
 use        P3_1__search_and_increment__L_1___axiom as P3_1__search_and_increment__L_1___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__global_vector___axiom as P3_1__global_vector___axiom
 use        P3_1__increment___axiom as P3_1__increment___axiom
 use        P3_1__search_and_increment__number___axiom as P3_1__search_and_increment__number___axiom

 let def [#"p3_1.ads" 11 0 0][@GP_Subp:p3_1.ads:11] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 11 0 0] true }
  ensures { [#"p3_1.ads" 11 0 0] ([#"p3_1.ads" 18 0 0] ( [@GP_Shape:pragargs__forall] [@GP_Reason:VC_POSTCONDITION] [@GP_Id:17] [@GP_Sloc:p3_1.ads:18:14] [@model_vc_post] [@comment:     Post => (for all K in Global_Vector'Range =>              ^ p3_1.ads:18:14:VC_POSTCONDITION] (forall k [#"p3_1.ads" 18 0 0]  [@name:K] [@model_trace:3310]  : int.
   ( ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) -> (if ((P3_1__search_and_increment__number.number = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)))) then (
    ( [@GP_Pretty_Ada:3329] [@GP_Sloc:p3_1.ads:19:52] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = (P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content)) )) else (
    ( [@GP_Sloc:p3_1.ads:19:18] [@GP_Pretty_Ada:22398] true ))) )) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:11 *)
  ;
   assume {  (if (False) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)))) };
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__increment.increment.int__content True False True True) };
   assume {  (Standard__natural___axiom.dynamic_invariant P3_1__search_and_increment__number.number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:11 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
   ()))
   in () end ;
  (Integer.length((Standard__integer__rep.to_rep(P3_1__global_vector.global_vector__first))) ((Standard__integer__rep.to_rep(P3_1__global_vector.global_vector__last)))) ) < (1000 : int))) (((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
   ()))
   in () end ;
  P3_1__global_vector.global_vector__first ))) = (0 : int))))) (( ( (P3_1__search_and_increment__number.number >= (0 : int)) && (P3_1__increment.increment.int__content <= ([#"p3_1.ads" 16 0 0] ( [@comment:     and ((number >= 0 and then Increment <= Integer'Last - number)                                                           ^ p3_1.ads:16:59:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__and__orelse__andthen__cmp__sub] [@GP_Id:15] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.ads:16:59] (Standard__integer.range_check_(((2147483647 : int) - P3_1__search_and_increment__number.number))) ))) ) || ( (P3_1__search_and_increment__number.number < (0 : int)) && (P3_1__increment.increment.int__content >= ([#"p3_1.ads" 17 0 0] ( [@GP_Shape:pragargs__and__orelse__andthen__cmp__sub] [@GP_Id:16] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:          or else (number < 0 and then Increment >= Integer'First - number)),                                                                   ^ p3_1.ads:17:67:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.ads:17:67] (Standard__integer.range_check_(((( -2147483648) : int) - P3_1__search_and_increment__number.number))) ))) ) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:11 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3275] ((Integer.length (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3281] ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3294] ( ( (P3_1__search_and_increment__number.number >= (0 : int)) /\ (P3_1__increment.increment.int__content <= ((2147483647 : int) - P3_1__search_and_increment__number.number)) ) \/ ( (P3_1__search_and_increment__number.number < (0 : int)) /\ (P3_1__increment.increment.int__content >= ((( -2147483648) : int) - P3_1__search_and_increment__number.number)) ) ) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 9 0 0] ());
   ([#"p3_1.adb" 9 0 0] ( [#"p3_1.adb" 9 0 0] (P3_1__search_and_increment__i.i.int__content <- ( ([#"p3_1.adb" 9 0 0] ( [@GP_Sloc:p3_1.adb:9:35] [@comment:      i : Natural := Global_Vector'First;                                   ^ p3_1.adb:9:35:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:i_decl__first_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:0] (Standard__natural.range_check_((Standard__integer__rep.to_rep(( [#"p3_1.adb" 9 0 0] begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   P3_1__global_vector.global_vector__first ))))) )) ));
    assume {  (Standard__natural___axiom.dynamic_invariant P3_1__search_and_increment__i.i.int__content True False True True) } ));
   ([#"p3_1.adb" 11 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:11:39] ([#"p3_1.adb" 11 0 0] ( () (* Translation of an Ada loop from p3_1.adb:11 *)
   ;
   (if ((P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep(( [#"p3_1.adb" 11 0 0] begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   P3_1__global_vector.global_vector__last ))))) then (
    [#"p3_1.adb" 11 0 0] try
     ( [#"p3_1.adb" 11 0 0] begin ensures {true} let _ = (let _ = P3_1__search_and_increment__i.i.int__content in (
      ()))
      in () end ;
     (let temp___352 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 11 0 0] (val _f : int
     ensures {[#"p3_1.adb" 11 0 0] (result = P3_1__search_and_increment__i.i.int__content)} 
     in _f) in (
      ( [#"p3_1.adb" 11 0 0] begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
       ()))
       in () end ;
      (let temp___350 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 11 0 0] (val _f : Array__Int__Standard__integer.map
      ensures {[#"p3_1.adb" 11 0 0] (result = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop p3_1.adb:11 *)
       ;
       () (* While loop translating the Ada loop from p3_1.adb:11 *)
       ;
       (let temp___inv_355 [@mlw:proxy_symbol] [@introduced] = (P3_1__search_and_increment__i.i.int__content < (1000 : int)) in (
        [#"p3_1.adb" 11 0 0] begin ensures {true} let _ = (let _ = (let temp___inv_354 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((Standard__integer__rep.to_rep(( [#"p3_1.adb" 11 0 0] begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
         ()))
         in () end ;
        P3_1__global_vector.global_vector__first ))) <= P3_1__search_and_increment__i.i.int__content)) ((P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep(( [#"p3_1.adb" 11 0 0] begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
         ()))
         in () end ;
        P3_1__global_vector.global_vector__last )))))) in (
         [#"p3_1.adb" 11 0 0] begin ensures {true} let _ = (let _ = (let temp___inv_353 [@mlw:proxy_symbol] [@introduced] = ( (let k = [#"p3_1.adb" 11 0 0] (val _f : int
         in _f) in (
          (if ((Boolean.andb((([#"p3_1.adb" 14 0 0] ( [@GP_Shape:L_1_while__pragargs__forall__range__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:14:47] [@comment:         pragma Loop_Invariant((for all K in I+1..Global_Vector'Last =>                                               ^ p3_1.adb:14:47:VC_OVERFLOW_CHECK] [@GP_Id:5] (Standard__integer.range_check_((P3_1__search_and_increment__i.i.int__content + (1 : int)))) )) <= k)) ((k <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
           ()))
           in () end ;
          P3_1__global_vector.global_vector__last ))))))) then (
            begin ensures {true} let _ = (let _ = (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 15 0 0] ( [@vc:annotation] [@GP_Sloc:p3_1.adb:15:53] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp] [@GP_Id:8] [@comment:                                  (if Global_Vector(K) = number then (Global_Vector(K) = number + Increment))));                                                     ^ p3_1.adb:15:53:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
           k ))))) = P3_1__search_and_increment__number.number)) then (
            ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 15 0 0] ( [@comment:                                  (if Global_Vector(K) = number then (Global_Vector(K) = number + Increment))));                                                                                     ^ p3_1.adb:15:85:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:p3_1.adb:15:85] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp] [@GP_Id:6] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
            k ))))) = ([#"p3_1.adb" 15 0 0] ( [@vc:annotation] [@GP_Sloc:p3_1.adb:15:97] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                                  (if Global_Vector(K) = number then (Global_Vector(K) = number + Increment))));                                                                                                 ^ p3_1.adb:15:97:VC_OVERFLOW_CHECK] [@GP_Id:7] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__add] (Standard__integer.range_check_((P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content))) )))) else (
            (Boolean.of_int((1 : int))))) in (
            ()))
            in () end ))))
         ;
          (val _f : bool
         ensures { ( (result = True) <-> (forall k   [@model_trace:2401] [@name:K]  : int.
          ( ( ((P3_1__search_and_increment__i.i.int__content + (1 : int)) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) -> (if (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = P3_1__search_and_increment__number.number)) then (
           ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = (P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content))) else (
           true)) )) )} 
         in _f) ) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          in (
          ()))
          in () end ))
         in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"p3_1.adb" 12 0 0] ( [@GP_Id:11] [@comment:         pragma Loop_Invariant(I < Max);                                ^ p3_1.adb:12:32:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__cmp] [@GP_Sloc:p3_1.adb:12:32] ( [@GP_Pretty_Ada:2384] [@GP_Sloc:p3_1.adb:12:32] (P3_1__search_and_increment__i.i.int__content < (1000 : int)) ) ))
         }
        invariant { 
         ([#"p3_1.adb" 13 0 0] ( [@comment:         pragma Loop_Invariant(I in Global_Vector'First..Global_Vector'Last);                                ^ p3_1.adb:13:32:VC_LOOP_INVARIANT] [@GP_Id:10] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:13:32] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__in] ( [@GP_Sloc:p3_1.adb:13:32] [@GP_Pretty_Ada:2390] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= P3_1__search_and_increment__i.i.int__content) /\ (P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) ) ))
         }
        invariant { 
         ([#"p3_1.adb" 14 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@comment:         pragma Loop_Invariant((for all K in I+1..Global_Vector'Last =>                                ^ p3_1.adb:14:32:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__forall] [@GP_Sloc:p3_1.adb:14:32] [@GP_Id:9] (forall k [#"p3_1.adb" 14 0 0]  [@model_trace:2401] [@name:K]  : int.
          ( ( ((P3_1__search_and_increment__i.i.int__content + (1 : int)) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) -> (if (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = P3_1__search_and_increment__number.number)) then (
           ( [@GP_Sloc:p3_1.adb:15:70] [@GP_Pretty_Ada:2425] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = (P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content)) )) else (
           ( [@GP_Sloc:p3_1.adb:15:36] [@GP_Pretty_Ada:29224] true ))) )) ))
         }
        ( () (* Assume implicit invariants from the loop p3_1.adb:11 *)
        ;
         assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
         true) else (
         (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)))) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant P3_1__search_and_increment__i.i.int__content True True True True) )/\true )) ((P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)))) };
        () (* Check for absence of RTE in the invariant of loop p3_1.adb:11 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop p3_1.adb:11 *)
        ;
        ();
        ( [@GP_Sloc:p3_1.adb:16:13] ([#"p3_1.adb" 16 0 0] ()) );
        ( [@GP_Sloc:p3_1.adb:16:27] ([#"p3_1.adb" 16 0 0] ()) );
        ( [@GP_Sloc:p3_1.adb:16:10] ([#"p3_1.adb" 16 0 0] (if (( ([#"p3_1.adb" 16 0 0] [#"p3_1.adb" 16 0 0] (([@branch_id=2429] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 16 0 0] assert { [#"p3_1.adb" 16 0 0] ([#"p3_1.adb" 16 0 0] ( [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:16:27] [@GP_Id:3] [@comment:         if Global_Vector(i) = number then                           ^ p3_1.adb:16:27:VC_INDEX_CHECK] [@GP_Shape:L_1_while__if__cmp__ixdcomp] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= P3_1__search_and_increment__i.i.int__content) /\ (P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
        P3_1__search_and_increment__i.i.int__content ))))) = P3_1__search_and_increment__number.number) )));
        ( [@branch_id=2429] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:p3_1.adb:17:13] ([#"p3_1.adb" 17 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:17:27] ([#"p3_1.adb" 17 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:17:42] ([#"p3_1.adb" 17 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:17:30] ([#"p3_1.adb" 17 0 0] [#"p3_1.adb" 17 0 0] (P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 17 0 0] assert { [#"p3_1.adb" 17 0 0] ([#"p3_1.adb" 17 0 0] ( [@comment:            Global_Vector(i) := number + Increment;                           ^ p3_1.adb:17:27:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:17:27] [@vc:annotation] [@GP_Shape:L_1_while__if__global_vector_assign__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= P3_1__search_and_increment__i.i.int__content) /\ (P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
         P3_1__search_and_increment__i.i.int__content )) ((Standard__integer__rep.of_rep(([#"p3_1.adb" 17 0 0] ( [@comment:            Global_Vector(i) := number + Increment;                                        ^ p3_1.adb:17:40:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:17:40] [@GP_Shape:L_1_while__if__global_vector_assign__add] [@GP_Id:1] (Standard__integer.range_check_((P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content))) )))))) ))) ) )) else (
         ()))) );
        ( [@GP_Sloc:p3_1.adb:19:10] ([#"p3_1.adb" 19 0 0] ()) );
        ( [@GP_Sloc:p3_1.adb:19:15] ([#"p3_1.adb" 19 0 0] ()) );
        ( [@GP_Sloc:p3_1.adb:19:12] ([#"p3_1.adb" 19 0 0] [#"p3_1.adb" 19 0 0] (P3_1__search_and_increment__i.i.int__content <- ( ([#"p3_1.adb" 19 0 0] ( [@GP_Sloc:p3_1.adb:19:17] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         i := i + 1;                 ^ p3_1.adb:19:17:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__i_assign__add] [@GP_Id:4] (Standard__integer.range_check_((P3_1__search_and_increment__i.i.int__content + (1 : int)))) )) ))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop p3_1.adb:11 *)
        ;
        (if (not ( (P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
         ()))
         in () end ;
        P3_1__global_vector.global_vector__last )))) )) then (
          raise P3_1__search_and_increment__L_1.L_1));
        (let temp___inv_355 [@mlw:proxy_symbol] [@introduced] = (P3_1__search_and_increment__i.i.int__content < (1000 : int)) in (
          begin ensures {true} let _ = (let _ = (let temp___inv_354 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
          ()))
          in () end ;
         P3_1__global_vector.global_vector__first ))) <= P3_1__search_and_increment__i.i.int__content)) ((P3_1__search_and_increment__i.i.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
          ()))
          in () end ;
         P3_1__global_vector.global_vector__last )))))) in (
           begin ensures {true} let _ = (let _ = (let temp___inv_353 [@mlw:proxy_symbol] [@introduced] = ( (let k =  (val _f : int
          in _f) in (
           (if ((Boolean.andb((([#"p3_1.adb" 14 0 0] ( [@GP_Shape:L_1_while__pragargs__forall__range__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:14:47] [@comment:         pragma Loop_Invariant((for all K in I+1..Global_Vector'Last =>                                               ^ p3_1.adb:14:47:VC_OVERFLOW_CHECK] [@GP_Id:5] (Standard__integer.range_check_((P3_1__search_and_increment__i.i.int__content + (1 : int)))) )) <= k)) ((k <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
            ()))
            in () end ;
           P3_1__global_vector.global_vector__last ))))))) then (
             begin ensures {true} let _ = (let _ = (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 15 0 0] ( [@vc:annotation] [@GP_Sloc:p3_1.adb:15:53] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp] [@GP_Id:8] [@comment:                                  (if Global_Vector(K) = number then (Global_Vector(K) = number + Increment))));                                                     ^ p3_1.adb:15:53:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
            k ))))) = P3_1__search_and_increment__number.number)) then (
             ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 15 0 0] ( [@comment:                                  (if Global_Vector(K) = number then (Global_Vector(K) = number + Increment))));                                                                                     ^ p3_1.adb:15:85:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:p3_1.adb:15:85] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp] [@GP_Id:6] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
             k ))))) = ([#"p3_1.adb" 15 0 0] ( [@vc:annotation] [@GP_Sloc:p3_1.adb:15:97] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                                  (if Global_Vector(K) = number then (Global_Vector(K) = number + Increment))));                                                                                                 ^ p3_1.adb:15:97:VC_OVERFLOW_CHECK] [@GP_Id:7] [@GP_Shape:L_1_while__pragargs__forall__if__cmp__add] (Standard__integer.range_check_((P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content))) )))) else (
             (Boolean.of_int((1 : int))))) in (
             ()))
             in () end ))))
          ;
           (val _f : bool
          ensures { ( (result = True) <-> (forall k   [@model_trace:2401] [@name:K]  : int.
           ( ( ((P3_1__search_and_increment__i.i.int__content + (1 : int)) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) -> (if (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = P3_1__search_and_increment__number.number)) then (
            ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = (P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content))) else (
            true)) )) )} 
          in _f) ) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           in (
           ()))
           in () end ))
          in (
          ()))
          in () end ))
         )
       done )))
       )))
      )
    with
     P3_1__search_and_increment__L_1.L_1 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( (let k =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   P3_1__global_vector.global_vector__first ))) <= k)) ((k <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   P3_1__global_vector.global_vector__last ))))))) then (
     begin ensures {true} let _ = (let _ = (if ((P3_1__search_and_increment__number.number = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.ads" 19 0 0] ( [@GP_Id:14] [@GP_Sloc:p3_1.ads:19:44] [@vc:annotation] [@GP_Shape:pragargs__forall__if__cmp__ixdcomp] [@comment:                (if number = Global_Vector(K) then Global_Vector(K) = number + Increment));                                            ^ p3_1.ads:19:44:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
    k ))))))) then (
     ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.ads" 19 0 0] ( [@GP_Id:12] [@comment:                (if number = Global_Vector(K) then Global_Vector(K) = number + Increment));                                                                  ^ p3_1.ads:19:66:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:pragargs__forall__if__cmp__ixdcomp] [@GP_Sloc:p3_1.ads:19:66] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) )) };
     k ))))) = ([#"p3_1.ads" 19 0 0] ( [@GP_Id:13] [@GP_Shape:pragargs__forall__if__cmp__add] [@vc:annotation] [@GP_Sloc:p3_1.ads:19:78] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                (if number = Global_Vector(K) then Global_Vector(K) = number + Increment));                                                                              ^ p3_1.ads:19:78:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content))) )))) else (
     (Boolean.of_int((1 : int))))) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall k   [@name:K] [@model_trace:3310]  : int.
   ( ( ((Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)) ) -> (if ((P3_1__search_and_increment__number.number = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)))) then (
    ( [@GP_Pretty_Ada:3329] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content k)) = (P3_1__search_and_increment__number.number + P3_1__increment.increment.int__content)) )) else (
    ( [@GP_Pretty_Ada:22398] true ))) )) )} 
  in _f) ) in (
   ()))
   in () end  )
end

(* Module for defining the value of the aggregate at p3_1.adb:25, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__inverse_vector__vec__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        P3_1__vector as P3_1__vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__inverse_vector__T6b as P3_1__inverse_vector__T6b
 use        P3_1__inverse_vector__vec__aggregate_def as P3_1__inverse_vector__vec__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___360   temp___361   temp___362   : int.
   (let temp___359 [@mlw:proxy_symbol] [@introduced] = (P3_1__inverse_vector__vec__aggregate_def.p3_1__inverse_vector__vec__aggregate_def temp___360 temp___361 temp___362) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___360 True True True True)) then (
     ( (if ((P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last temp___361 temp___362)) then (
      ( ((P3_1__inverse_vector__T6b.first temp___359) = temp___361) /\ ((P3_1__inverse_vector__T6b.last temp___359) = temp___362) )) else true) /\ (forall temp___363   : int.
      ((Array__Int__Standard__integer.get (P3_1__inverse_vector__T6b.to_array temp___359) temp___363) = ( 0 : Standard__integer.integer ))) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "inverse_vector" defined at p3_1.ads:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__inverse_vector__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector as P3_1__global_inverse_vector
 use        P3_1__vector as P3_1__vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__inverse_vector__vec as P3_1__inverse_vector__vec
 use        P3_1__inverse_vector__i as P3_1__inverse_vector__i
 use        P3_1__inverse_vector__j as P3_1__inverse_vector__j
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__inverse_vector__TvecS as P3_1__inverse_vector__TvecS
 use        P3_1__inverse_vector__T6b as P3_1__inverse_vector__T6b
 use        P3_1__inverse_vector__L_2 as P3_1__inverse_vector__L_2
 use        P3_1__inverse_vector__vec__aggregate_def as P3_1__inverse_vector__vec__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__inverse_vector__vec___axiom as P3_1__inverse_vector__vec___axiom
 use        P3_1__inverse_vector__vec__aggregate_def___axiom as P3_1__inverse_vector__vec__aggregate_def___axiom
 use        P3_1__inverse_vector__i___axiom as P3_1__inverse_vector__i___axiom
 use        P3_1__inverse_vector__j___axiom as P3_1__inverse_vector__j___axiom
 use        P3_1__inverse_vector__L_2___axiom as P3_1__inverse_vector__L_2___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__global_inverse_vector___axiom as P3_1__global_inverse_vector___axiom
 use        P3_1__inverse_vector__TvecS___axiom as P3_1__inverse_vector__TvecS___axiom
 use        P3_1__inverse_vector__T6b___axiom as P3_1__inverse_vector__T6b___axiom

 val p3_1__inverse_vector__result [@model_projected] [@name:Inverse_Vector] [@model_trace:3333@result]  : P3_1__vector.vector__ref 
 
 let def [#"p3_1.ads" 22 0 0][@GP_Subp:p3_1.ads:22] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 22 0 0] true }
  ensures { [#"p3_1.ads" 22 0 0] ([#"p3_1.ads" 27 0 0] ( [@GP_Shape:pragargs__forall] [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:p3_1.ads:27:14] [@GP_Id:33] [@comment:     Post => (for all I in Inverse_Vector'Result'Range =>              ^ p3_1.ads:27:14:VC_POSTCONDITION] [@model_vc_post] (forall i [#"p3_1.ads" 27 0 0]  [@name:I] [@model_trace:3382]  : int.
   ( ( ((P3_1__vector.first p3_1__inverse_vector__result.P3_1__vector.vector__content) <= i) /\ (i <= (P3_1__vector.last p3_1__inverse_vector__result.P3_1__vector.vector__content)) ) -> (forall j [#"p3_1.ads" 27 0 0]  [@model_trace:3395] [@name:J]  : int.
    ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= j) /\ (j <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) -> ( [@GP_Pretty_Ada:3411] [@GP_Sloc:p3_1.ads:29:22] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array p3_1__inverse_vector__result.P3_1__vector.vector__content) i)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content j))) ) )) )) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:22 *)
  ;
   assume {  (if (False) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)))) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:22 *)
  ;
   begin ensures {true} let _ = (let _ = ( (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
   ()))
   in () end ;
  (Integer.length((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__first))) ((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__last)))) ) > (0 : int))) (((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
   ()))
   in () end ;
  (Integer.length((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__first))) ((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__last)))) ) < (1000 : int)))) && ((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
   ()))
   in () end ;
  P3_1__global_inverse_vector.global_inverse_vector__first ))) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:22 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3365] ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3371] ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) < (1000 : int)) ) ) /\ ( [@GP_Pretty_Ada:3377] ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) = (0 : int)) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 25 0 0] ());
   ([#"p3_1.adb" 25 0 0] ( [#"p3_1.adb" 25 0 0] begin ensures {true} let _ = (let _ = (([#"p3_1.adb" 25 0 0] ( [@GP_Shape:TvecS_def__vector_ind__range__sub__typeconv__length_ref] [@GP_Id:19] [@vc:annotation] [@comment:      vec : Vector (0..Global_Inverse_Vector'Length-1) := (others => 0);                                             ^ p3_1.adb:25:45:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:p3_1.adb:25:45] (Standard__integer.range_check_(( [#"p3_1.adb" 25 0 0] begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   (Integer.length((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__first))) ((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__last)))) ))) )) - (1 : int)) in (
    ()))
    in () end ;
   ([#"p3_1.adb" 25 0 0] [#"p3_1.adb" 25 0 0] (val _f : unit
   requires {( [@GP_Sloc:p3_1.adb:25:7] [@GP_Id:18] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:      vec : Vector (0..Global_Inverse_Vector'Length-1) := (others => 0);       ^ p3_1.adb:25:7:VC_RANGE_CHECK] [#"p3_1.adb" 25 0 0] ( ((0 : int) <= ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int))) -> ( ((0 : int) >= Standard__natural.first) /\ (((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int)) <= Standard__natural.last) ) ) )} 
   ensures {[#"p3_1.adb" 25 0 0] true} 
   in _f)) ));
   ([#"p3_1.adb" 25 0 0] ( (let p3_1__inverse_vector__vec__assume = (let temp___365 [@mlw:proxy_symbol] [@introduced] = (let temp___364 [@mlw:proxy_symbol] [@introduced] = (P3_1__inverse_vector__vec__aggregate_def.p3_1__inverse_vector__vec__aggregate_def((0 : int)) ((0 : int)) (((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int)))) in (
    ( [#"p3_1.adb" 25 0 0] assume { [#"p3_1.adb" 25 0 0] ((P3_1__inverse_vector__T6b.first temp___364) = (0 : int)) };
    [#"p3_1.adb" 25 0 0] assume { [#"p3_1.adb" 25 0 0] ((P3_1__inverse_vector__T6b.last temp___364) = ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int))) };
    temp___364 )))
    in (
    ( [#"p3_1.adb" 25 0 0] assert { [#"p3_1.adb" 25 0 0] ([#"p3_1.adb" 25 0 0] ( [@vc:annotation] [@GP_Shape:vec_decl__aggr] [@GP_Sloc:p3_1.adb:25:59] [@GP_Id:20] [@comment:      vec : Vector (0..Global_Inverse_Vector'Length-1) := (others => 0);                                                           ^ p3_1.adb:25:59:VC_LENGTH_CHECK] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((P3_1__inverse_vector__T6b.first temp___365) <= (P3_1__inverse_vector__T6b.last temp___365))) then (
     ( ((0 : int) <= ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int))) /\ (((P3_1__inverse_vector__T6b.last temp___365) - (P3_1__inverse_vector__T6b.first temp___365)) = (((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int)) - (0 : int))) )) else (
     (((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int)) < (0 : int)))) ) )) };
    (P3_1__inverse_vector__TvecS.of_array((P3_1__inverse_vector__T6b.to_array(temp___365))) ((P3_1__inverse_vector__T6b.first(temp___365))) ((P3_1__inverse_vector__T6b.last(temp___365)))) )))
    in (
    (  (P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content <- ( (P3_1__inverse_vector__TvecS.to_array(p3_1__inverse_vector__vec__assume)) ));
     assume {  ((Standard__integer__rep.to_rep(P3_1__inverse_vector__vec.vec__first)) = (P3_1__inverse_vector__TvecS.first(p3_1__inverse_vector__vec__assume))) };
     assume {  ((Standard__integer__rep.to_rep(P3_1__inverse_vector__vec.vec__last)) = (P3_1__inverse_vector__TvecS.last(p3_1__inverse_vector__vec__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (P3_1__inverse_vector__TvecS.dynamic_property (0 : int) ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int)) (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__first) (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) /\ ( ((Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__first) = (0 : int)) /\ ((Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last) = ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int))) ) ))) } ));
   ([#"p3_1.adb" 26 0 0] ());
   ([#"p3_1.adb" 26 0 0] ( [#"p3_1.adb" 26 0 0] (P3_1__inverse_vector__i.i.int__content <- ( (0 : int) ));
   [#"p3_1.adb" 26 0 0] assume { [#"p3_1.adb" 26 0 0] (Standard__natural___axiom.dynamic_invariant P3_1__inverse_vector__i.i.int__content True False True True) } ));
   ([#"p3_1.adb" 27 0 0] ());
   ([#"p3_1.adb" 27 0 0] ( [#"p3_1.adb" 27 0 0] (P3_1__inverse_vector__j.j.int__content <- ( (Standard__integer__rep.to_rep(( [#"p3_1.adb" 27 0 0] begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   P3_1__global_inverse_vector.global_inverse_vector__last ))) ));
   [#"p3_1.adb" 27 0 0] assume { [#"p3_1.adb" 27 0 0] (Standard__integer___axiom.dynamic_invariant P3_1__inverse_vector__j.j.int__content True False True True) } ));
   ([#"p3_1.adb" 29 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:29:66] ([#"p3_1.adb" 29 0 0] ( () (* Translation of an Ada loop from p3_1.adb:29 *)
   ;
   (if ((Boolean.andb((P3_1__inverse_vector__i.i.int__content <= (Standard__integer__rep.to_rep(( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   P3_1__inverse_vector__vec.vec__last ))))) ((P3_1__inverse_vector__j.j.int__content >= (Standard__integer__rep.to_rep(( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   P3_1__global_inverse_vector.global_inverse_vector__first ))))))) then (
    [#"p3_1.adb" 29 0 0] try
     ( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__inverse_vector__i.i.int__content in (
      ()))
      in () end ;
     (let temp___371 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 29 0 0] (val _f : int
     ensures {[#"p3_1.adb" 29 0 0] (result = P3_1__inverse_vector__i.i.int__content)} 
     in _f) in (
      ( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content in (
       ()))
       in () end ;
      (let temp___369 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 29 0 0] (val _f : Array__Int__Standard__integer.map
      ensures {[#"p3_1.adb" 29 0 0] (result = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content)} 
      in _f) in (
       ( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__inverse_vector__j.j.int__content in (
        ()))
        in () end ;
       (let temp___367 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 29 0 0] (val _f : int
       ensures {[#"p3_1.adb" 29 0 0] (result = P3_1__inverse_vector__j.j.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop p3_1.adb:29 *)
        ;
        () (* While loop translating the Ada loop from p3_1.adb:29 *)
        ;
        (let temp___inv_375 [@mlw:proxy_symbol] [@introduced] = (P3_1__inverse_vector__i.i.int__content < (1000 : int)) in (
         [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = (let temp___inv_374 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= P3_1__inverse_vector__i.i.int__content)) ((P3_1__inverse_vector__i.i.int__content <= (Standard__integer__rep.to_rep(( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content in (
          ()))
          in () end ;
         P3_1__inverse_vector__vec.vec__last )))))) in (
          [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = (let temp___inv_373 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((Standard__integer__rep.to_rep(( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
           ()))
           in () end ;
          P3_1__global_inverse_vector.global_inverse_vector__first ))) <= P3_1__inverse_vector__j.j.int__content)) ((P3_1__inverse_vector__j.j.int__content <= (Standard__integer__rep.to_rep(( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
           ()))
           in () end ;
          P3_1__global_inverse_vector.global_inverse_vector__last )))))) in (
           [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = (let temp___inv_372 [@mlw:proxy_symbol] [@introduced] = ( (let k = [#"p3_1.adb" 29 0 0] (val _f : int
           in _f) in (
            (if ((Boolean.andb((P3_1__inverse_vector__i.i.int__content <= k)) ((k <= (Standard__integer__rep.to_rep(( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content in (
             ()))
             in () end ;
            P3_1__inverse_vector__vec.vec__last ))))))) then (
             [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = ( (let l = [#"p3_1.adb" 29 0 0] (val _f : int
             in _f) in (
              (if ((Boolean.andb(((Standard__integer__rep.to_rep(( [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
               ()))
               in () end ;
              P3_1__global_inverse_vector.global_inverse_vector__first ))) <= l)) ((l <= P3_1__inverse_vector__j.j.int__content)))) then (
               [#"p3_1.adb" 29 0 0] begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 29 0 0] assert { [#"p3_1.adb" 29 0 0] ([#"p3_1.adb" 35 0 0] ( [@vc:annotation] [@GP_Shape:L_2_while__pragargs__forall__forall__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:25] [@comment:                                    vec(K) = Global_Inverse_Vector(L)));                                         ^ p3_1.adb:35:41:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:35:41] ( ((Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) ) )) };
               k ))))) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 35 0 0] ( [@vc:annotation] [@comment:                                    vec(K) = Global_Inverse_Vector(L)));                                                                    ^ p3_1.adb:35:68:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:35:68] [@GP_Shape:L_2_while__pragargs__forall__forall__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:26] ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= l) /\ (l <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) )) };
               l )))))) in (
                ()))
                in () end ))))
             ;
              (val _f : bool
             ensures { ( (result = True) <-> (forall l   [@model_trace:2569] [@name:L]  : int.
              ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= l) /\ (l <= P3_1__inverse_vector__j.j.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content k)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content l))) )) )} 
             in _f) ) in (
              ()))
              in () end ))))
           ;
            (val _f : bool
           ensures { ( (result = True) <-> (forall k   [@model_trace:2555] [@name:K]  : int.
            ( ( (P3_1__inverse_vector__i.i.int__content <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) ) -> (forall l   [@model_trace:2569] [@name:L]  : int.
             ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= l) /\ (l <= P3_1__inverse_vector__j.j.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content k)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content l))) )) )) )} 
           in _f) ) in (
             begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
            in (
            ()))
            in () end ))
           in (
           ()))
           in () end ))
          in (
          ()))
          in () end ))
        ;
         while True do
         invariant { 
          ([#"p3_1.adb" 30 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:30:32] [@vc:annotation] [@GP_Id:30] [@GP_Shape:L_2_while__pragargs__cmp] [@comment:         pragma Loop_Invariant(I < Max);                                ^ p3_1.adb:30:32:VC_LOOP_INVARIANT] ( [@GP_Sloc:p3_1.adb:30:32] [@GP_Pretty_Ada:2526] (P3_1__inverse_vector__i.i.int__content < (1000 : int)) ) ))
          }
         invariant { 
          ([#"p3_1.adb" 31 0 0] ( [@comment:         pragma Loop_Invariant(I in vec'First..vec'Last);                                ^ p3_1.adb:31:32:VC_LOOP_INVARIANT] [@GP_Shape:L_2_while__pragargs__in] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:p3_1.adb:31:32] [@GP_Id:29] ( [@GP_Sloc:p3_1.adb:31:32] [@GP_Pretty_Ada:2532] ( ((0 : int) <= P3_1__inverse_vector__i.i.int__content) /\ (P3_1__inverse_vector__i.i.int__content <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) ) ) ))
          }
         invariant { 
          ([#"p3_1.adb" 32 0 0] ( [@GP_Shape:L_2_while__pragargs__in] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:         pragma Loop_Invariant(J in Global_Inverse_Vector'First..Global_Inverse_Vector'Last);                                ^ p3_1.adb:32:32:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:32:32] [@GP_Id:28] ( [@GP_Pretty_Ada:2544] [@GP_Sloc:p3_1.adb:32:32] ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= P3_1__inverse_vector__j.j.int__content) /\ (P3_1__inverse_vector__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) ) ))
          }
         invariant { 
          ([#"p3_1.adb" 33 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:33:32] [@GP_Shape:L_2_while__pragargs__forall] [@vc:annotation] [@comment:         pragma Loop_Invariant(for all K in I..vec'Last =>                                 ^ p3_1.adb:33:32:VC_LOOP_INVARIANT] [@GP_Id:27] (forall k [#"p3_1.adb" 33 0 0]  [@model_trace:2555] [@name:K]  : int.
           ( ( (P3_1__inverse_vector__i.i.int__content <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) ) -> (forall l [#"p3_1.adb" 33 0 0]  [@model_trace:2569] [@name:L]  : int.
            ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= l) /\ (l <= P3_1__inverse_vector__j.j.int__content) ) -> ( [@GP_Sloc:p3_1.adb:35:37] [@GP_Pretty_Ada:2586] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content k)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content l))) ) )) )) ))
          }
         ( () (* Assume implicit invariants from the loop p3_1.adb:29 *)
         ;
          assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant P3_1__inverse_vector__j.j.int__content True True True True) )/\true ) /\ (if (True) then (
          true) else (
          ( (P3_1__inverse_vector__TvecS.dynamic_property (0 : int) ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int)) (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__first) (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) /\ ( ((Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__first) = (0 : int)) /\ ((Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last) = ((Integer.length (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) - (1 : int))) ) ))) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant P3_1__inverse_vector__i.i.int__content True True True True) )/\true )) (( (P3_1__inverse_vector__i.i.int__content <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) /\ (P3_1__inverse_vector__j.j.int__content >= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first)) ))) };
         () (* Check for absence of RTE in the invariant of loop p3_1.adb:29 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop p3_1.adb:29 *)
         ;
         ();
         ( [@GP_Sloc:p3_1.adb:36:10] ([#"p3_1.adb" 36 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:36:14] ([#"p3_1.adb" 36 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:36:20] ([#"p3_1.adb" 36 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:36:42] ([#"p3_1.adb" 36 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:36:17] ([#"p3_1.adb" 36 0 0] [#"p3_1.adb" 36 0 0] (P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 36 0 0] assert { [#"p3_1.adb" 36 0 0] ([#"p3_1.adb" 36 0 0] ( [@GP_Sloc:p3_1.adb:36:14] [@comment:         vec(i) := Global_Inverse_Vector(j);              ^ p3_1.adb:36:14:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_2_while__vec_assign__ixdcomp] [@GP_Id:22] ( ((Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__first) <= P3_1__inverse_vector__i.i.int__content) /\ (P3_1__inverse_vector__i.i.int__content <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) ) )) };
         P3_1__inverse_vector__i.i.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 36 0 0] ( [@GP_Sloc:p3_1.adb:36:42] [@vc:annotation] [@comment:         vec(i) := Global_Inverse_Vector(j);                                          ^ p3_1.adb:36:42:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_2_while__vec_assign__ixdcomp] [@GP_Id:21] ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= P3_1__inverse_vector__j.j.int__content) /\ (P3_1__inverse_vector__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) )) };
         P3_1__inverse_vector__j.j.int__content ))))))))) ))) );
         ( [@GP_Sloc:p3_1.adb:37:10] ([#"p3_1.adb" 37 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:37:15] ([#"p3_1.adb" 37 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:37:12] ([#"p3_1.adb" 37 0 0] [#"p3_1.adb" 37 0 0] (P3_1__inverse_vector__i.i.int__content <- ( ([#"p3_1.adb" 37 0 0] ( [@GP_Shape:L_2_while__i_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:37:17] [@comment:         i := i + 1;                 ^ p3_1.adb:37:17:VC_OVERFLOW_CHECK] [@GP_Id:23] (Standard__integer.range_check_((P3_1__inverse_vector__i.i.int__content + (1 : int)))) )) ))) );
         ( [@GP_Sloc:p3_1.adb:38:10] ([#"p3_1.adb" 38 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:38:15] ([#"p3_1.adb" 38 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:38:12] ([#"p3_1.adb" 38 0 0] [#"p3_1.adb" 38 0 0] (P3_1__inverse_vector__j.j.int__content <- ( ([#"p3_1.adb" 38 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         j := j - 1;                 ^ p3_1.adb:38:17:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__j_assign__sub] [@GP_Id:24] [@GP_Sloc:p3_1.adb:38:17] (Standard__integer.range_check_((P3_1__inverse_vector__j.j.int__content - (1 : int)))) )) ))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop p3_1.adb:29 *)
         ;
         (if (not ( (Boolean.andb((P3_1__inverse_vector__i.i.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content in (
          ()))
          in () end ;
         P3_1__inverse_vector__vec.vec__last ))))) ((P3_1__inverse_vector__j.j.int__content >= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
          ()))
          in () end ;
         P3_1__global_inverse_vector.global_inverse_vector__first )))))) )) then (
           raise P3_1__inverse_vector__L_2.L_2));
         (let temp___inv_375 [@mlw:proxy_symbol] [@introduced] = (P3_1__inverse_vector__i.i.int__content < (1000 : int)) in (
           begin ensures {true} let _ = (let _ = (let temp___inv_374 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= P3_1__inverse_vector__i.i.int__content)) ((P3_1__inverse_vector__i.i.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content in (
           ()))
           in () end ;
          P3_1__inverse_vector__vec.vec__last )))))) in (
            begin ensures {true} let _ = (let _ = (let temp___inv_373 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
            ()))
            in () end ;
           P3_1__global_inverse_vector.global_inverse_vector__first ))) <= P3_1__inverse_vector__j.j.int__content)) ((P3_1__inverse_vector__j.j.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
            ()))
            in () end ;
           P3_1__global_inverse_vector.global_inverse_vector__last )))))) in (
             begin ensures {true} let _ = (let _ = (let temp___inv_372 [@mlw:proxy_symbol] [@introduced] = ( (let k =  (val _f : int
            in _f) in (
             (if ((Boolean.andb((P3_1__inverse_vector__i.i.int__content <= k)) ((k <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content in (
              ()))
              in () end ;
             P3_1__inverse_vector__vec.vec__last ))))))) then (
               begin ensures {true} let _ = (let _ = ( (let l =  (val _f : int
              in _f) in (
               (if ((Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
                ()))
                in () end ;
               P3_1__global_inverse_vector.global_inverse_vector__first ))) <= l)) ((l <= P3_1__inverse_vector__j.j.int__content)))) then (
                 begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 35 0 0] ( [@vc:annotation] [@GP_Shape:L_2_while__pragargs__forall__forall__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:25] [@comment:                                    vec(K) = Global_Inverse_Vector(L)));                                         ^ p3_1.adb:35:41:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:35:41] ( ((Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__first) <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) ) )) };
                k ))))) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.adb" 35 0 0] ( [@vc:annotation] [@comment:                                    vec(K) = Global_Inverse_Vector(L)));                                                                    ^ p3_1.adb:35:68:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:35:68] [@GP_Shape:L_2_while__pragargs__forall__forall__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:26] ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= l) /\ (l <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) )) };
                l )))))) in (
                 ()))
                 in () end ))))
              ;
               (val _f : bool
              ensures { ( (result = True) <-> (forall l   [@model_trace:2569] [@name:L]  : int.
               ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= l) /\ (l <= P3_1__inverse_vector__j.j.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content k)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content l))) )) )} 
              in _f) ) in (
               ()))
               in () end ))))
            ;
             (val _f : bool
            ensures { ( (result = True) <-> (forall k   [@model_trace:2555] [@name:K]  : int.
             ( ( (P3_1__inverse_vector__i.i.int__content <= k) /\ (k <= (Standard__integer__rep.to_rep P3_1__inverse_vector__vec.vec__last)) ) -> (forall l   [@model_trace:2569] [@name:L]  : int.
              ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= l) /\ (l <= P3_1__inverse_vector__j.j.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content k)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content l))) )) )) )} 
            in _f) ) in (
              begin ensures {true} let _ = (let _ = () in (
              ()))
              in () end ))
             in (
             ()))
             in () end ))
            in (
            ()))
            in () end ))
           in (
           ()))
           in () end ))
          )
        done )))
        )))
       )))
      )
    with
     P3_1__inverse_vector__L_2.L_2 -> ()
    end)) )) );
   ( [@GP_Sloc:p3_1.adb:40:14] ([#"p3_1.adb" 40 0 0] ()) );
   ( [@GP_Sloc:p3_1.adb:40:7] ([#"p3_1.adb" 40 0 0] ( [#"p3_1.adb" 40 0 0] (p3_1__inverse_vector__result.P3_1__vector.vector__content <- ( (P3_1__vector.of_array(P3_1__inverse_vector__vec.vec.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(P3_1__inverse_vector__vec.vec__first))) ((Standard__integer__rep.to_rep(P3_1__inverse_vector__vec.vec__last)))) ));
   [#"p3_1.adb" 40 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( (let i =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = p3_1__inverse_vector__result.P3_1__vector.vector__content in (
    ()))
    in () end ;
   (P3_1__vector.first(p3_1__inverse_vector__result.P3_1__vector.vector__content)) ) <= i)) ((i <= (  begin ensures {true} let _ = (let _ = p3_1__inverse_vector__result.P3_1__vector.vector__content in (
    ()))
    in () end ;
   (P3_1__vector.last(p3_1__inverse_vector__result.P3_1__vector.vector__content)) ))))) then (
     begin ensures {true} let _ = (let _ = ( (let j =  (val _f : int
    in _f) in (
     (if ((Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
      ()))
      in () end ;
     P3_1__global_inverse_vector.global_inverse_vector__first ))) <= j)) ((j <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content in (
      ()))
      in () end ;
     P3_1__global_inverse_vector.global_inverse_vector__last ))))))) then (
       begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(p3_1__inverse_vector__result.P3_1__vector.vector__content))) ((  assert {  ([#"p3_1.ads" 29 0 0] ( [@comment:                     Inverse_Vector'Result(I) = Global_Inverse_Vector(J)));                                            ^ p3_1.ads:29:44:VC_INDEX_CHECK] [@GP_Sloc:p3_1.ads:29:44] [@GP_Shape:pragargs__forall__forall__cmp__ixdcomp] [@vc:annotation] [@GP_Id:31] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first p3_1__inverse_vector__result.P3_1__vector.vector__content) <= i) /\ (i <= (P3_1__vector.last p3_1__inverse_vector__result.P3_1__vector.vector__content)) ) )) };
      i ))))) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content) ((  assert {  ([#"p3_1.ads" 29 0 0] ( [@GP_Shape:pragargs__forall__forall__cmp__ixdcomp] [@GP_Sloc:p3_1.ads:29:71] [@vc:annotation] [@GP_Id:32] [@GP_Reason:VC_INDEX_CHECK] [@comment:                     Inverse_Vector'Result(I) = Global_Inverse_Vector(J)));                                                                       ^ p3_1.ads:29:71:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= j) /\ (j <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) )) };
      j )))))) in (
       ()))
       in () end ))))
    ;
     (val _f : bool
    ensures { ( (result = True) <-> (forall j   [@model_trace:3395] [@name:J]  : int.
     ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= j) /\ (j <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) -> ( [@GP_Pretty_Ada:3411] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array p3_1__inverse_vector__result.P3_1__vector.vector__content) i)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content j))) ) )) )} 
    in _f) ) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:3382]  : int.
   ( ( ((P3_1__vector.first p3_1__inverse_vector__result.P3_1__vector.vector__content) <= i) /\ (i <= (P3_1__vector.last p3_1__inverse_vector__result.P3_1__vector.vector__content)) ) -> (forall j   [@model_trace:3395] [@name:J]  : int.
    ( ( ((Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) <= j) /\ (j <= (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)) ) -> ( [@GP_Pretty_Ada:3411] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array p3_1__inverse_vector__result.P3_1__vector.vector__content) i)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content j))) ) )) )) )} 
  in _f) ) in (
   ()))
   in () end ;
  p3_1__inverse_vector__result.P3_1__vector.vector__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_max_count" defined at p3_1.ads:33, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__get_max_count__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count__vec1 as P3_1__get_max_count__vec1
 use        P3_1__get_max_count__vec2 as P3_1__get_max_count__vec2
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__get_max_count__vec1___axiom as P3_1__get_max_count__vec1___axiom
 use        P3_1__get_max_count__vec2___axiom as P3_1__get_max_count__vec2___axiom

 val p3_1__get_max_count__result [@model_projected] [@name:Get_Max_Count] [@model_trace:3414@result]  : int__ref 
 
 let def [#"p3_1.ads" 33 0 0][@GP_Subp:p3_1.ads:33] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 33 0 0] true }
  ensures { [#"p3_1.ads" 33 0 0] ([#"p3_1.ads" 37 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (if vec1'Length < vec2'Length then Get_Max_Count'Result = vec1'Length);              ^ p3_1.ads:37:14:VC_POSTCONDITION] [@GP_Sloc:p3_1.ads:37:14] [@GP_Id:37] [@model_vc_post] [@GP_Shape:pragargs__if] (if (((P3_1__vector.length P3_1__get_max_count__vec1.vec1) < (P3_1__vector.length P3_1__get_max_count__vec2.vec2))) then (
   ( [@GP_Pretty_Ada:3497] [@GP_Sloc:p3_1.ads:37:49] (p3_1__get_max_count__result.int__content = (P3_1__vector.length P3_1__get_max_count__vec1.vec1)) )) else (
   ( [@GP_Pretty_Ada:22499] [@GP_Sloc:p3_1.ads:37:15] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:33 *)
  ;
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__get_max_count__vec1.vec1 True False True True) };
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__get_max_count__vec2.vec2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:33 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:33 *)
  ;
   begin ensures {true} let _ = (let _ = ( (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) > (0 : int))) (((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ) > (0 : int)))) && (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) < (1000 : int))) (((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ) < (1000 : int)))) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:33 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3464] ((P3_1__vector.length P3_1__get_max_count__vec1.vec1) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3470] ((P3_1__vector.length P3_1__get_max_count__vec2.vec2) > (0 : int)) ) ) /\ ( ( [@GP_Pretty_Ada:3476] ((P3_1__vector.length P3_1__get_max_count__vec1.vec1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3482] ((P3_1__vector.length P3_1__get_max_count__vec2.vec2) < (1000 : int)) ) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 45 0 0] ());
   ([#"p3_1.adb" 45 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:47:7] ([#"p3_1.adb" 47 0 0] (if (( ([#"p3_1.adb" 47 0 0] [#"p3_1.adb" 47 0 0] (([@branch_id=2638] Main.spark__branch).bool__content <- ( (( [#"p3_1.adb" 47 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) < ( [#"p3_1.adb" 47 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) )) )));
   ( [@branch_id=2638] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:p3_1.adb:48:10] ([#"p3_1.adb" 48 0 0] ( [#"p3_1.adb" 48 0 0] (p3_1__get_max_count__result.int__content <- ( ([#"p3_1.adb" 48 0 0] ( [@vc:annotation] [@GP_Shape:if__return__typeconv__length_ref] [@GP_Id:34] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:p3_1.adb:48:21] [@comment:         return vec1'Length;                     ^ p3_1.adb:48:21:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"p3_1.adb" 48 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
     ()))
     in () end ;
    (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ))) )) ));
     raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:p3_1.adb:50:7] ([#"p3_1.adb" 50 0 0] ( [#"p3_1.adb" 50 0 0] (p3_1__get_max_count__result.int__content <- ( ([#"p3_1.adb" 50 0 0] ( [@vc:annotation] [@GP_Id:35] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:return__typeconv__length_ref] [@GP_Sloc:p3_1.adb:50:18] [@comment:      return vec2'Length;                  ^ p3_1.adb:50:18:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"p3_1.adb" 50 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ))) )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) < (  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ))) then (
   (p3_1__get_max_count__result.int__content = ([#"p3_1.ads" 37 0 0] ( [@vc:annotation] [@GP_Id:36] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:p3_1.ads:37:76] [@GP_Shape:pragargs__if__cmp__typeconv__length_ref] [@comment:     Post => (if vec1'Length < vec2'Length then Get_Max_Count'Result = vec1'Length);                                                                            ^ p3_1.ads:37:76:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"p3_1.ads" 37 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ))) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  p3_1__get_max_count__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_bood_pressure_degree" defined at p3_1.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__get_bood_pressure_degree__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        P3_1__get_bood_pressure_degree__systolic as P3_1__get_bood_pressure_degree__systolic
 use        P3_1__get_bood_pressure_degree__diastolic as P3_1__get_bood_pressure_degree__diastolic
 use        Temp___String_Literal_179 as Temp___String_Literal_179
 use        Temp___String_Literal_183 as Temp___String_Literal_183
 use        Temp___String_Literal_187 as Temp___String_Literal_187
 use        Temp___String_Literal_191 as Temp___String_Literal_191
 use        Temp___String_Literal_195 as Temp___String_Literal_195
 use        Temp___String_Literal_199 as Temp___String_Literal_199
 use        Temp___String_Literal_203 as Temp___String_Literal_203
 use        Temp___String_Literal_381 as Temp___String_Literal_381
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_382 as Temp___String_Literal_382
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_383 as Temp___String_Literal_383
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_384 as Temp___String_Literal_384
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_385 as Temp___String_Literal_385
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_386 as Temp___String_Literal_386
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_387 as Temp___String_Literal_387
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__get_bood_pressure_degree__systolic___axiom as P3_1__get_bood_pressure_degree__systolic___axiom
 use        P3_1__get_bood_pressure_degree__diastolic___axiom as P3_1__get_bood_pressure_degree__diastolic___axiom

 val p3_1__get_bood_pressure_degree__result [@name:Get_Bood_Pressure_Degree] [@model_trace:3501@result] [@model_projected]  : Standard__string.string__ref 
 
 let def [#"p3_1.ads" 39 0 0][@GP_Subp:p3_1.ads:39] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 39 0 0] true }
  ensures { [#"p3_1.ads" 39 0 0] ([#"p3_1.ads" 43 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (if systolic < 80 or diastolic < 60 then              ^ p3_1.ads:43:14:VC_POSTCONDITION] [@GP_Id:38] [@model_vc_post] [@GP_Sloc:p3_1.ads:43:14] [@GP_Shape:pragargs__if] (if (( (P3_1__get_bood_pressure_degree__systolic.systolic < (80 : int)) \/ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (60 : int)) )) then (
   ( [@GP_Sloc:p3_1.ads:44:17] [@GP_Pretty_Ada:3581] ( ((let temp___412 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_179.temp___String_Literal_179 ()) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___412 (1 : int) (11 : int))))
    = True) \/ (if (( ( ( (P3_1__get_bood_pressure_degree__systolic.systolic > (80 : int)) /\ (P3_1__get_bood_pressure_degree__systolic.systolic < (120 : int)) ) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic > (60 : int)) ) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (80 : int)) )) then (
    ( ((let temp___415 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_183.temp___String_Literal_183 ()) in (
     (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___415 (1 : int) (6 : int))))
     = True) \/ (if (( ( (P3_1__get_bood_pressure_degree__systolic.systolic > (120 : int)) /\ (P3_1__get_bood_pressure_degree__systolic.systolic < (139 : int)) ) \/ ( (P3_1__get_bood_pressure_degree__diastolic.diastolic > (80 : int)) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (89 : int)) ) )) then (
     ( ((let temp___418 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_187.temp___String_Literal_187 ()) in (
      (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___418 (1 : int) (15 : int))))
      = True) \/ (if (( ( (P3_1__get_bood_pressure_degree__systolic.systolic > (140 : int)) /\ (P3_1__get_bood_pressure_degree__systolic.systolic < (159 : int)) ) \/ ( (P3_1__get_bood_pressure_degree__diastolic.diastolic > (90 : int)) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (99 : int)) ) )) then (
      ( ((let temp___421 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_191.temp___String_Literal_191 ()) in (
       (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___421 (1 : int) (20 : int))))
       = True) \/ (if (( (P3_1__get_bood_pressure_degree__systolic.systolic > (160 : int)) \/ (P3_1__get_bood_pressure_degree__diastolic.diastolic > (100 : int)) )) then (
       ( ((let temp___424 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_195.temp___String_Literal_195 ()) in (
        (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___424 (1 : int) (20 : int))))
        = True) \/ (if (( (P3_1__get_bood_pressure_degree__systolic.systolic > (180 : int)) \/ (P3_1__get_bood_pressure_degree__diastolic.diastolic > (110 : int)) )) then (
        ((let temp___427 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_199.temp___String_Literal_199 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___427 (1 : int) (39 : int))))
         = True)) else (
        ((let temp___430 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_203.temp___String_Literal_203 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___430 (1 : int) (5 : int))))
         = True))) )) else (
       true)) )) else (
      true)) )) else (
     true)) )) else (
    true)) ) )) else (
   ( [@GP_Pretty_Ada:22562] [@GP_Sloc:p3_1.ads:43:15] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:39 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__get_bood_pressure_degree__systolic.systolic True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__get_bood_pressure_degree__diastolic.diastolic True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:39 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (0 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (2147483647 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (0 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (2147483647 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:39 *)
  ;
   assume {  ( ( ( ( [@GP_Pretty_Ada:3549] (P3_1__get_bood_pressure_degree__systolic.systolic > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3553] (P3_1__get_bood_pressure_degree__systolic.systolic < (2147483647 : int)) ) ) /\ ( [@GP_Pretty_Ada:3559] (P3_1__get_bood_pressure_degree__diastolic.diastolic > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3563] (P3_1__get_bood_pressure_degree__diastolic.diastolic < (2147483647 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:p3_1.adb:55:7] ([#"p3_1.adb" 55 0 0] (if (( ([#"p3_1.adb" 55 0 0] [#"p3_1.adb" 55 0 0] (([@branch_id=2683] Main.spark__branch).bool__content <- ( (Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic < (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (60 : int)))) )));
   ( [@branch_id=2683] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:p3_1.adb:56:10] ([#"p3_1.adb" 56 0 0] ( [#"p3_1.adb" 56 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_381.temp___String_Literal_381(()))) ((1 : int)) ((11 : int))) ));
    [#"p3_1.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:p3_1.adb:57:7] (if (( ([#"p3_1.adb" 57 0 0] [#"p3_1.adb" 57 0 0] (([@branch_id=2694] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (80 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (120 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (60 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (80 : int)))) )));
    ( [@branch_id=2694] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:p3_1.adb:58:10] ([#"p3_1.adb" 58 0 0] ( [#"p3_1.adb" 58 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_386.temp___String_Literal_386(()))) ((1 : int)) ((6 : int))) ));
     [#"p3_1.adb" 58 0 0] raise Return__exc )) ) )) else (
     ( [@GP_Sloc:p3_1.adb:59:7] (if (( ([#"p3_1.adb" 59 0 0] [#"p3_1.adb" 59 0 0] (([@branch_id=2711] Main.spark__branch).bool__content <- ( (Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (120 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (139 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (89 : int)))))) )));
     ( [@branch_id=2711] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:p3_1.adb:60:10] ([#"p3_1.adb" 60 0 0] ( [#"p3_1.adb" 60 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_385.temp___String_Literal_385(()))) ((1 : int)) ((15 : int))) ));
      [#"p3_1.adb" 60 0 0] raise Return__exc )) ) )) else (
      ( [@GP_Sloc:p3_1.adb:61:7] (if (( ([#"p3_1.adb" 61 0 0] [#"p3_1.adb" 61 0 0] (([@branch_id=2729] Main.spark__branch).bool__content <- ( (Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (140 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (159 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (90 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (99 : int)))))) )));
      ( [@branch_id=2729] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:p3_1.adb:62:10] ([#"p3_1.adb" 62 0 0] ( [#"p3_1.adb" 62 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_384.temp___String_Literal_384(()))) ((1 : int)) ((20 : int))) ));
       [#"p3_1.adb" 62 0 0] raise Return__exc )) ) )) else (
       ( [@GP_Sloc:p3_1.adb:63:7] (if (( ([#"p3_1.adb" 63 0 0] [#"p3_1.adb" 63 0 0] (([@branch_id=2748] Main.spark__branch).bool__content <- ( (Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (160 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (100 : int)))) )));
       ( [@branch_id=2748] Main.spark__branch ).bool__content )) then (
        ( ();
        ( [@GP_Sloc:p3_1.adb:64:10] ([#"p3_1.adb" 64 0 0] ( [#"p3_1.adb" 64 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_383.temp___String_Literal_383(()))) ((1 : int)) ((20 : int))) ));
        [#"p3_1.adb" 64 0 0] raise Return__exc )) ) )) else (
        ( [@GP_Sloc:p3_1.adb:65:7] (if (( ([#"p3_1.adb" 65 0 0] [#"p3_1.adb" 65 0 0] (([@branch_id=2758] Main.spark__branch).bool__content <- ( (Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (180 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (110 : int)))) )));
        ( [@branch_id=2758] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:p3_1.adb:66:10] ([#"p3_1.adb" 66 0 0] ( [#"p3_1.adb" 66 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_382.temp___String_Literal_382(()))) ((1 : int)) ((39 : int))) ));
         [#"p3_1.adb" 66 0 0] raise Return__exc )) ) )) else (
         ())) ))) ))) ))) ))) )))) );
   ( [@GP_Sloc:p3_1.adb:68:7] ([#"p3_1.adb" 68 0 0] ( [#"p3_1.adb" 68 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_387.temp___String_Literal_387(()))) ((1 : int)) ((5 : int))) ));
   [#"p3_1.adb" 68 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if ((Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic < (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (60 : int))))) then (
   (Boolean.orb((let temp___391 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_179.temp___String_Literal_179(())) in (
    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___391) ((1 : int)) ((11 : int)))))
   ) ((if ((Boolean.andb((Boolean.andb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (80 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (120 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (60 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (80 : int))))) then (
    (Boolean.orb((let temp___394 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_183.temp___String_Literal_183(())) in (
     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___394) ((1 : int)) ((6 : int)))))
    ) ((if ((Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (120 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (139 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (89 : int))))))) then (
     (Boolean.orb((let temp___397 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_187.temp___String_Literal_187(())) in (
      (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___397) ((1 : int)) ((15 : int)))))
     ) ((if ((Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (140 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (159 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (90 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (99 : int))))))) then (
      (Boolean.orb((let temp___400 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_191.temp___String_Literal_191(())) in (
       (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___400) ((1 : int)) ((20 : int)))))
      ) ((if ((Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (160 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (100 : int))))) then (
       (Boolean.orb((let temp___403 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_195.temp___String_Literal_195(())) in (
        (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___403) ((1 : int)) ((20 : int)))))
       ) ((if ((Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (180 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (110 : int))))) then (
        (let temp___406 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_199.temp___String_Literal_199(())) in (
         (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___406) ((1 : int)) ((39 : int)))))
       ) else (
        (let temp___409 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_203.temp___String_Literal_203(())) in (
         (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___409) ((1 : int)) ((5 : int)))))
       ))))) else (
       (Boolean.of_int((1 : int)))))))) else (
      (Boolean.of_int((1 : int)))))))) else (
     (Boolean.of_int((1 : int)))))))) else (
    (Boolean.of_int((1 : int)))))))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  p3_1__get_bood_pressure_degree__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "compare_to" defined at p3_1.ads:57, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__compare_to__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        P3_1__compare_to__string1 as P3_1__compare_to__string1
 use        P3_1__compare_to__string2 as P3_1__compare_to__string2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__compare_to__string1___axiom as P3_1__compare_to__string1___axiom
 use        P3_1__compare_to__string2___axiom as P3_1__compare_to__string2___axiom

 val p3_1__compare_to__result [@name:Compare_To] [@model_projected] [@model_trace:3681@result]  : bool__ref 
 
 let def [#"p3_1.ads" 57 0 0][@GP_Subp:p3_1.ads:57] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 57 0 0] true }
  ensures { [#"p3_1.ads" 57 0 0] ([#"p3_1.ads" 60 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => Compare_To'Result = (String1 = String2);              ^ p3_1.ads:60:14:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Id:39] [@model_vc_post] [@GP_Sloc:p3_1.ads:60:14] ( [@GP_Pretty_Ada:22171] [@GP_Sloc:p3_1.ads:60:14] ( (p3_1__compare_to__result.bool__content = True) <-> ((Array__Int__Standard__character.bool_eq (Standard__string.to_array P3_1__compare_to__string1.string1) (Standard__string.first P3_1__compare_to__string1.string1) (Standard__string.last P3_1__compare_to__string1.string1) (Standard__string.to_array P3_1__compare_to__string2.string2) (Standard__string.first P3_1__compare_to__string2.string2) (Standard__string.last P3_1__compare_to__string2.string2)) = True) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:57 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant P3_1__compare_to__string1.string1 True False True True) };
   assume {  (Standard__string___axiom.dynamic_invariant P3_1__compare_to__string2.string2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:57 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:57 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:57 *)
  ;
   try
   ( ();
   ([#"p3_1.adb" 71 0 0] ());
   ([#"p3_1.adb" 71 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:73:7] ([#"p3_1.adb" 73 0 0] ( [#"p3_1.adb" 73 0 0] (p3_1__compare_to__result.bool__content <- ( (Array__Int__Standard__character.bool_eq((Standard__string.to_array(P3_1__compare_to__string1.string1))) ((Standard__string.first(P3_1__compare_to__string1.string1))) ((Standard__string.last(P3_1__compare_to__string1.string1))) ((Standard__string.to_array(P3_1__compare_to__string2.string2))) ((Standard__string.first(P3_1__compare_to__string2.string2))) ((Standard__string.last(P3_1__compare_to__string2.string2)))) ));
   [#"p3_1.adb" 73 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Boolean.to_int(p3_1__compare_to__result.bool__content)) = (Boolean.to_int((Array__Int__Standard__character.bool_eq((Standard__string.to_array(P3_1__compare_to__string1.string1))) ((Standard__string.first(P3_1__compare_to__string1.string1))) ((Standard__string.last(P3_1__compare_to__string1.string1))) ((Standard__string.to_array(P3_1__compare_to__string2.string2))) ((Standard__string.first(P3_1__compare_to__string2.string2))) ((Standard__string.last(P3_1__compare_to__string2.string2))))))) in (
   ()))
   in () end ;
  p3_1__compare_to__result.bool__content )
end

(* Module for defining the value of the aggregate at p3_1.adb:77, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__delete_elements__aux_vector__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        P3_1__vector as P3_1__vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__delete_elements__T40b as P3_1__delete_elements__T40b
 use        P3_1__delete_elements__aux_vector__aggregate_def as P3_1__delete_elements__aux_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___440   temp___441   temp___442   : int.
   (let temp___439 [@mlw:proxy_symbol] [@introduced] = (P3_1__delete_elements__aux_vector__aggregate_def.p3_1__delete_elements__aux_vector__aggregate_def temp___440 temp___441 temp___442) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___440 True True True True)) then (
     ( (if ((P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last temp___441 temp___442)) then (
      ( ((P3_1__delete_elements__T40b.first temp___439) = temp___441) /\ ((P3_1__delete_elements__T40b.last temp___439) = temp___442) )) else true) /\ (forall temp___443   : int.
      ((Array__Int__Standard__integer.get (P3_1__delete_elements__T40b.to_array temp___439) temp___443) = ( 0 : Standard__integer.integer ))) )) else true)))
  )

end

(* Module for defining the value of the aggregate at p3_1.adb:81, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_447___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_447 as Temp_____aggregate_def_447
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___449   : int.
   (let temp___448 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_447.temp_____aggregate_def_447 temp___449) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___449 True True True True)) then (
     ((Array__Int__Standard__integer.get temp___448 (1 : int)) = ( 0 : Standard__integer.integer ))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "delete_elements" defined at p3_1.ads:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__delete_elements__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        P3_1__vector as P3_1__vector
 use        P3_1__delete_elements__vector1 as P3_1__delete_elements__vector1
 use        P3_1__delete_elements__number as P3_1__delete_elements__number
 use        P3_1__count_lower_elements___axiom as P3_1__count_lower_elements___axiom
 use        P3_1__delete_elements__R38b as P3_1__delete_elements__R38b
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__delete_elements__aux_vector as P3_1__delete_elements__aux_vector
 use        P3_1__delete_elements__j as P3_1__delete_elements__j
 use        P3_1__delete_elements__L_3__i as P3_1__delete_elements__L_3__i
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__delete_elements__Taux_vectorS as P3_1__delete_elements__Taux_vectorS
 use        P3_1__delete_elements__T40b as P3_1__delete_elements__T40b
 use        P3_1__delete_elements__T42b as P3_1__delete_elements__T42b
 use        P3_1__delete_elements__L_3 as P3_1__delete_elements__L_3
 use        P3_1__delete_elements__L_3__T44b as P3_1__delete_elements__L_3__T44b
 use        P3_1__delete_elements__aux_vector__aggregate_def as P3_1__delete_elements__aux_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_447 as Temp_____aggregate_def_447
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__delete_elements__aux_vector___axiom as P3_1__delete_elements__aux_vector___axiom
 use        P3_1__delete_elements__aux_vector__aggregate_def___axiom as P3_1__delete_elements__aux_vector__aggregate_def___axiom
 use        P3_1__delete_elements__j___axiom as P3_1__delete_elements__j___axiom
 use        Temp_____aggregate_def_447___axiom as Temp_____aggregate_def_447___axiom
 use        P3_1__delete_elements__L_3__i___axiom as P3_1__delete_elements__L_3__i___axiom
 use        P3_1__delete_elements__L_3___axiom as P3_1__delete_elements__L_3___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__delete_elements__vector1___axiom as P3_1__delete_elements__vector1___axiom
 use        P3_1__delete_elements__number___axiom as P3_1__delete_elements__number___axiom
 use        P3_1__count_lower_elements___axiom as P3_1__count_lower_elements___axiom
 use        P3_1__delete_elements__Taux_vectorS___axiom as P3_1__delete_elements__Taux_vectorS___axiom
 use        P3_1__delete_elements__R38b___axiom as P3_1__delete_elements__R38b___axiom
 use        P3_1__delete_elements__T40b___axiom as P3_1__delete_elements__T40b___axiom
 use        P3_1__delete_elements__T42b___axiom as P3_1__delete_elements__T42b___axiom
 use        P3_1__delete_elements__L_3__T44b___axiom as P3_1__delete_elements__L_3__T44b___axiom

 val p3_1__delete_elements__result [@name:Delete_Elements] [@model_projected] [@model_trace:3734@result]  : P3_1__vector.vector__ref 
 
 exception Temp___exception_453
 
 let def [#"p3_1.ads" 62 0 0][@GP_Subp:p3_1.ads:62] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 62 0 0] true }
  ensures { [#"p3_1.ads" 62 0 0] ([#"p3_1.ads" 66 0 0] ( [@comment:     Post => (if Delete_Elements'Result'Length = 0 then              ^ p3_1.ads:66:14:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:p3_1.ads:66:14] [@GP_Shape:pragargs__or] [@model_vc_post] [@GP_Id:51] ( [@GP_Sloc:p3_1.ads:66:14] [@GP_Pretty_Ada:22251] ( (if (((P3_1__vector.length p3_1__delete_elements__result.P3_1__vector.vector__content) = (0 : int))) then (
   (forall k [#"p3_1.ads" 66 0 0]  [@model_trace:3803] [@name:K]  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) ))) else (
   true)) \/ (if (((P3_1__vector.length p3_1__delete_elements__result.P3_1__vector.vector__content) > (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) ))) else (
   true)) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:62 *)
  ;
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__delete_elements__vector1.vector1 True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__delete_elements__number.number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:62 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__delete_elements__vector1.vector1)) ) < (1000 : int)) && ((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:62 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3785] ((P3_1__vector.length P3_1__delete_elements__vector1.vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3791] ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) = (0 : int)) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 76 0 0] ());
   ([#"p3_1.adb" 77 0 0] ());
   ([#"p3_1.adb" 77 0 0] ( (let p3_1__delete_elements__R38b__assume = (([#"p3_1.adb" 77 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:p3_1.adb:77:32] [@GP_Id:40] [@GP_Shape:R38b_decl__sub__call_count_lower_elements] [@vc:annotation] [@comment:      Aux_Vector : Vector (0..(Count_Lower_Elements(Vector1, Number)-1)) := (others => 0);                                ^ p3_1.adb:77:32:VC_PRECONDITION] (P3_1__count_lower_elements___axiom.count_lower_elements(P3_1__delete_elements__vector1.vector1) (P3_1__delete_elements__number.number)) )) - (1 : int)) in (
     assume {  (p3_1__delete_elements__R38b__assume = P3_1__delete_elements__R38b.r38b) }))
   ;
    assume {  (Standard__integer___axiom.dynamic_invariant P3_1__delete_elements__R38b.r38b True False True True) } ));
   ([#"p3_1.adb" 77 0 0] ( [#"p3_1.adb" 77 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__R38b.r38b in (
    ()))
    in () end ;
   ([#"p3_1.adb" 77 0 0] [#"p3_1.adb" 77 0 0] (val _f : unit
   requires {( [@GP_Sloc:p3_1.adb:77:7] [@GP_Id:41] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:      Aux_Vector : Vector (0..(Count_Lower_Elements(Vector1, Number)-1)) := (others => 0);       ^ p3_1.adb:77:7:VC_RANGE_CHECK] [#"p3_1.adb" 77 0 0] ( ((0 : int) <= P3_1__delete_elements__R38b.r38b) -> ( ((0 : int) >= Standard__natural.first) /\ (P3_1__delete_elements__R38b.r38b <= Standard__natural.last) ) ) )} 
   ensures {[#"p3_1.adb" 77 0 0] true} 
   in _f)) ));
   ([#"p3_1.adb" 77 0 0] ( (let p3_1__delete_elements__aux_vector__assume = (let temp___445 [@mlw:proxy_symbol] [@introduced] = (let temp___444 [@mlw:proxy_symbol] [@introduced] = (P3_1__delete_elements__aux_vector__aggregate_def.p3_1__delete_elements__aux_vector__aggregate_def((0 : int)) ((0 : int)) (P3_1__delete_elements__R38b.r38b)) in (
    ( [#"p3_1.adb" 77 0 0] assume { [#"p3_1.adb" 77 0 0] ((P3_1__delete_elements__T40b.first temp___444) = (0 : int)) };
    [#"p3_1.adb" 77 0 0] assume { [#"p3_1.adb" 77 0 0] ((P3_1__delete_elements__T40b.last temp___444) = P3_1__delete_elements__R38b.r38b) };
    temp___444 )))
    in (
    ( [#"p3_1.adb" 77 0 0] assert { [#"p3_1.adb" 77 0 0] ([#"p3_1.adb" 77 0 0] ( [@GP_Sloc:p3_1.adb:77:77] [@comment:      Aux_Vector : Vector (0..(Count_Lower_Elements(Vector1, Number)-1)) := (others => 0);                                                                             ^ p3_1.adb:77:77:VC_LENGTH_CHECK] [@GP_Id:42] [@vc:annotation] [@GP_Shape:aux_vector_decl__aggr] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((P3_1__delete_elements__T40b.first temp___445) <= (P3_1__delete_elements__T40b.last temp___445))) then (
     ( ((0 : int) <= P3_1__delete_elements__R38b.r38b) /\ (((P3_1__delete_elements__T40b.last temp___445) - (P3_1__delete_elements__T40b.first temp___445)) = (P3_1__delete_elements__R38b.r38b - (0 : int))) )) else (
     (P3_1__delete_elements__R38b.r38b < (0 : int)))) ) )) };
    (P3_1__delete_elements__Taux_vectorS.of_array((P3_1__delete_elements__T40b.to_array(temp___445))) ((P3_1__delete_elements__T40b.first(temp___445))) ((P3_1__delete_elements__T40b.last(temp___445)))) )))
    in (
    (  (P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content <- ( (P3_1__delete_elements__Taux_vectorS.to_array(p3_1__delete_elements__aux_vector__assume)) ));
     assume {  ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first)) = (P3_1__delete_elements__Taux_vectorS.first(p3_1__delete_elements__aux_vector__assume))) };
     assume {  ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)) = (P3_1__delete_elements__Taux_vectorS.last(p3_1__delete_elements__aux_vector__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (P3_1__delete_elements__Taux_vectorS.dynamic_property (0 : int) P3_1__delete_elements__R38b.r38b (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) /\ ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) = (0 : int)) /\ ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last) = P3_1__delete_elements__R38b.r38b) ) ))) } ));
   ([#"p3_1.adb" 78 0 0] ( [#"p3_1.adb" 78 0 0] (P3_1__delete_elements__j.j.int__content <- ( (0 : int) ));
   [#"p3_1.adb" 78 0 0] assume { [#"p3_1.adb" 78 0 0] (Standard__natural___axiom.dynamic_invariant P3_1__delete_elements__j.j.int__content True False True True) } ));
   ([#"p3_1.adb" 83 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:80:10] ([#"p3_1.adb" 80 0 0] ()) );
   ( [@GP_Sloc:p3_1.adb:80:7] ([#"p3_1.adb" 80 0 0] (if (( ([#"p3_1.adb" 80 0 0] [#"p3_1.adb" 80 0 0] (([@branch_id=2866] Main.spark__branch).bool__content <- ( (( [#"p3_1.adb" 80 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   (Integer.length((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first))) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)))) ) = (0 : int)) )));
   ( [@branch_id=2866] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:p3_1.adb:81:10] ([#"p3_1.adb" 81 0 0] ( [#"p3_1.adb" 81 0 0] (p3_1__delete_elements__result.P3_1__vector.vector__content <- ( (P3_1__vector.of_array(( [#"p3_1.adb" 81 0 0] begin ensures {true} let _ = (let _ = ((0 : int) = (1 : int)) in (
     ()))
     in () end ;
    (Temp_____aggregate_def_447.temp_____aggregate_def_447((0 : int))) )) (P3_1__delete_elements__T42b.first) (P3_1__delete_elements__T42b.last)) ));
    [#"p3_1.adb" 81 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:p3_1.adb:83:30] ([#"p3_1.adb" 83 0 0] (let temp___451 [@mlw:proxy_symbol] [@introduced] = ( [#"p3_1.adb" 83 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) in (
   (let temp___452 [@mlw:proxy_symbol] [@introduced] = ( [#"p3_1.adb" 83 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) ) in (
    ( [#"p3_1.adb" 83 0 0] (P3_1__delete_elements__L_3__i.i.int__content <- ( temp___451 ));
    () (* Translation of an Ada loop from p3_1.adb:83 *)
    ;
    (if ((Boolean.andb((temp___451 <= P3_1__delete_elements__L_3__i.i.int__content)) ((P3_1__delete_elements__L_3__i.i.int__content <= temp___452)))) then (
     [#"p3_1.adb" 83 0 0] try
      [#"p3_1.adb" 83 0 0] try
       ( [#"p3_1.adb" 83 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__j.j.int__content in (
        ()))
        in () end ;
       (let temp___458 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 83 0 0] (val _f : int
       ensures {[#"p3_1.adb" 83 0 0] (result = P3_1__delete_elements__j.j.int__content)} 
       in _f) in (
        ( [#"p3_1.adb" 83 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
         ()))
         in () end ;
        (let temp___456 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 83 0 0] (val _f : Array__Int__Standard__integer.map
        ensures {[#"p3_1.adb" 83 0 0] (result = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content)} 
        in _f) in (
         ( [#"p3_1.adb" 83 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__L_3__i.i.int__content in (
          ()))
          in () end ;
         (let temp___454 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 83 0 0] (val _f : int
         ensures {[#"p3_1.adb" 83 0 0] (result = P3_1__delete_elements__L_3__i.i.int__content)} 
         in _f) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop p3_1.adb:83 *)
          ;
          ();
          ( [@GP_Sloc:p3_1.adb:84:10] ([#"p3_1.adb" 84 0 0] (if (( ([#"p3_1.adb" 84 0 0] [#"p3_1.adb" 84 0 0] (([@branch_id=2891] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_3__i.i.int__content)))) <= P3_1__delete_elements__number.number) )));
          ( [@branch_id=2891] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:p3_1.adb:85:13] ([#"p3_1.adb" 85 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:85:24] ([#"p3_1.adb" 85 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:85:27] ([#"p3_1.adb" 85 0 0] [#"p3_1.adb" 85 0 0] (P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 85 0 0] assert { [#"p3_1.adb" 85 0 0] ([#"p3_1.adb" 85 0 0] ( [@GP_Id:43] [@vc:annotation] [@comment:            Aux_Vector(j) := Vector1(i);                        ^ p3_1.adb:85:24:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:85:24] [@GP_Shape:L_3_while__if__aux_vector_assign__ixdcomp] ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) <= P3_1__delete_elements__j.j.int__content) /\ (P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) ) )) };
           P3_1__delete_elements__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_3__i.i.int__content)))))))) ))) );
           ( [@GP_Sloc:p3_1.adb:86:13] ([#"p3_1.adb" 86 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:86:18] ([#"p3_1.adb" 86 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:86:15] ([#"p3_1.adb" 86 0 0] [#"p3_1.adb" 86 0 0] (P3_1__delete_elements__j.j.int__content <- ( ([#"p3_1.adb" 86 0 0] ( [@GP_Id:44] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:            j := j + 1;                    ^ p3_1.adb:86:20:VC_OVERFLOW_CHECK] [@GP_Shape:L_3_while__if__j_assign__add] [@GP_Sloc:p3_1.adb:86:20] (Standard__integer.range_check_((P3_1__delete_elements__j.j.int__content + (1 : int)))) )) ))) );
           ( [@GP_Sloc:p3_1.adb:87:16] ([#"p3_1.adb" 87 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:87:20] ([#"p3_1.adb" 87 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:87:13] ([#"p3_1.adb" 87 0 0] (if (( ([#"p3_1.adb" 87 0 0] [#"p3_1.adb" 87 0 0] (([@branch_id=2909] Main.spark__branch).bool__content <- ( (P3_1__delete_elements__j.j.int__content > (Standard__integer__rep.to_rep(( [#"p3_1.adb" 87 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
            ()))
            in () end ;
           P3_1__delete_elements__aux_vector.aux_vector__last )))) )));
           ( [@branch_id=2909] Main.spark__branch ).bool__content )) then (
             raise Temp___exception_453) else (
            ()))) ) )) else (
           ()))) );
          () (* While loop translating the Ada loop from p3_1.adb:83 *)
          ;
          (let temp___inv_460 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Boolean.andb(((0 : int) <= P3_1__delete_elements__j.j.int__content)) ((P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
           ()))
           in () end ;
          P3_1__delete_elements__aux_vector.aux_vector__last ))))))) ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
           ()))
           in () end ;
          (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= P3_1__delete_elements__L_3__i.i.int__content)) ((P3_1__delete_elements__L_3__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
           ()))
           in () end ;
          (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) )))))) in (
            begin ensures {true} let _ = (let _ = (let temp___inv_459 [@mlw:proxy_symbol] [@introduced] = (if ((P3_1__delete_elements__j.j.int__content <> (0 : int))) then (
            ( (let k =  (val _f : int
            in _f) in (
             (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
              ()))
              in () end ;
             (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_3__i.i.int__content)))) then (
               begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 94 0 0] ( [@GP_Shape:L_3_while__pragargs__if__forsome__cmp__ixdcomp] [@GP_Id:45] [@comment:              (for some K in Vector1'First..i => Vector1(K) <= Number)                                                          ^ p3_1.adb:94:58:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:p3_1.adb:94:58] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
              k ))))) <= P3_1__delete_elements__number.number) in (
               ()))
               in () end ))))
            ;
             (val _f : bool
            ensures { ( (result = True) <-> (exists k  : int.
             ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_3__i.i.int__content) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) )) )} 
            in _f) )) else (
            ( (let k =  (val _f : int
            in _f) in (
             (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
              ()))
              in () end ;
             (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_3__i.i.int__content)))) then (
               begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 96 0 0] ( [@GP_Id:46] [@vc:annotation] [@comment:              (for all K in Vector1'First..i => Vector1(K) > Number));                                                         ^ p3_1.adb:96:57:VC_INDEX_CHECK] [@GP_Shape:L_3_while__pragargs__if__forall__cmp__ixdcomp] [@GP_Sloc:p3_1.adb:96:57] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
              k ))))) > P3_1__delete_elements__number.number) in (
               ()))
               in () end ))))
            ;
             (val _f : bool
            ensures { ( (result = True) <-> (forall k   [@model_trace:2955] [@name:K]  : int.
             ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_3__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) )) )} 
            in _f) ))) in (
             begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
            in (
            ()))
            in () end ))
          ;
           while True do
           invariant { 
            ([#"p3_1.adb" 91 0 0] ( [@comment:         pragma Loop_Invariant (j in Aux_Vector'Range and i in Vector1'Range);                                 ^ p3_1.adb:91:33:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Id:48] [@vc:annotation] [@GP_Shape:L_3_while__pragargs__and] [@GP_Sloc:p3_1.adb:91:33] ( ( [@GP_Pretty_Ada:2922] [@GP_Sloc:p3_1.adb:91:33] ( ((0 : int) <= P3_1__delete_elements__j.j.int__content) /\ (P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) ) ) /\ ( [@GP_Pretty_Ada:2927] [@GP_Sloc:p3_1.adb:91:59] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= P3_1__delete_elements__L_3__i.i.int__content) /\ (P3_1__delete_elements__L_3__i.i.int__content <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) ) ) ))
            }
           invariant { 
            ([#"p3_1.adb" 93 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:93:13] [@GP_Id:47] [@vc:annotation] [@GP_Shape:L_3_while__pragargs__if] [@comment:           (if j /= 0 then             ^ p3_1.adb:93:13:VC_LOOP_INVARIANT] (if ((P3_1__delete_elements__j.j.int__content <> (0 : int))) then (
             (exists k  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_3__i.i.int__content) ) /\ ( [@GP_Pretty_Ada:2953] [@GP_Sloc:p3_1.adb:94:50] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) ) ))) else (
             (forall k [#"p3_1.adb" 93 0 0]  [@model_trace:2955] [@name:K]  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_3__i.i.int__content) ) -> ( [@GP_Pretty_Ada:2972] [@GP_Sloc:p3_1.adb:96:49] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) ) )))) ))
            }
           ( () (* Assume implicit invariants from the loop p3_1.adb:83 *)
           ;
            assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) )) then (
            (P3_1__delete_elements__L_3__T44b.dynamic_property (P3_1__vector.first P3_1__delete_elements__vector1.vector1) (P3_1__vector.last P3_1__delete_elements__vector1.vector1) P3_1__delete_elements__L_3__i.i.int__content)) else true) )/\true ) /\ (if (True) then (
            true) else (
            ( (P3_1__delete_elements__Taux_vectorS.dynamic_property (0 : int) P3_1__delete_elements__R38b.r38b (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) /\ ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) = (0 : int)) /\ ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last) = P3_1__delete_elements__R38b.r38b) ) ))) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant P3_1__delete_elements__j.j.int__content True True True True) )/\true )) (( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= P3_1__delete_elements__L_3__i.i.int__content) /\ (P3_1__delete_elements__L_3__i.i.int__content <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ))) };
           () (* Check for absence of RTE in the invariant of loop p3_1.adb:83 *)
           ;
           () (* Loop statements appearing after the loop invariant of loop p3_1.adb:83 *)
           ;
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop p3_1.adb:83 *)
           ;
           (if ((P3_1__delete_elements__L_3__i.i.int__content = temp___452)) then (
             raise P3_1__delete_elements__L_3.L_3));
           ([#"p3_1.adb" 83 0 0] [#"p3_1.adb" 83 0 0] (P3_1__delete_elements__L_3__i.i.int__content <- ( (P3_1__delete_elements__L_3__i.i.int__content + (1 : int)) )));
           ();
           ( [@GP_Sloc:p3_1.adb:84:10] ([#"p3_1.adb" 84 0 0] (if (( ([#"p3_1.adb" 84 0 0] [#"p3_1.adb" 84 0 0] (([@branch_id=2891] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_3__i.i.int__content)))) <= P3_1__delete_elements__number.number) )));
           ( [@branch_id=2891] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:p3_1.adb:85:13] ([#"p3_1.adb" 85 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:85:24] ([#"p3_1.adb" 85 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:85:27] ([#"p3_1.adb" 85 0 0] [#"p3_1.adb" 85 0 0] (P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 85 0 0] assert { [#"p3_1.adb" 85 0 0] ([#"p3_1.adb" 85 0 0] ( [@GP_Id:43] [@vc:annotation] [@comment:            Aux_Vector(j) := Vector1(i);                        ^ p3_1.adb:85:24:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:85:24] [@GP_Shape:L_3_while__if__aux_vector_assign__ixdcomp] ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) <= P3_1__delete_elements__j.j.int__content) /\ (P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) ) )) };
            P3_1__delete_elements__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_3__i.i.int__content)))))))) ))) );
            ( [@GP_Sloc:p3_1.adb:86:13] ([#"p3_1.adb" 86 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:86:18] ([#"p3_1.adb" 86 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:86:15] ([#"p3_1.adb" 86 0 0] [#"p3_1.adb" 86 0 0] (P3_1__delete_elements__j.j.int__content <- ( ([#"p3_1.adb" 86 0 0] ( [@GP_Id:44] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:            j := j + 1;                    ^ p3_1.adb:86:20:VC_OVERFLOW_CHECK] [@GP_Shape:L_3_while__if__j_assign__add] [@GP_Sloc:p3_1.adb:86:20] (Standard__integer.range_check_((P3_1__delete_elements__j.j.int__content + (1 : int)))) )) ))) );
            ( [@GP_Sloc:p3_1.adb:87:16] ([#"p3_1.adb" 87 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:87:20] ([#"p3_1.adb" 87 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:87:13] ([#"p3_1.adb" 87 0 0] (if (( ([#"p3_1.adb" 87 0 0] [#"p3_1.adb" 87 0 0] (([@branch_id=2909] Main.spark__branch).bool__content <- ( (P3_1__delete_elements__j.j.int__content > (Standard__integer__rep.to_rep(( [#"p3_1.adb" 87 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
             ()))
             in () end ;
            P3_1__delete_elements__aux_vector.aux_vector__last )))) )));
            ( [@branch_id=2909] Main.spark__branch ).bool__content )) then (
              raise Temp___exception_453) else (
             ()))) ) )) else (
            ()))) );
           (let temp___inv_460 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Boolean.andb(((0 : int) <= P3_1__delete_elements__j.j.int__content)) ((P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
            ()))
            in () end ;
           P3_1__delete_elements__aux_vector.aux_vector__last ))))))) ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
            ()))
            in () end ;
           (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= P3_1__delete_elements__L_3__i.i.int__content)) ((P3_1__delete_elements__L_3__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
            ()))
            in () end ;
           (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) )))))) in (
             begin ensures {true} let _ = (let _ = (let temp___inv_459 [@mlw:proxy_symbol] [@introduced] = (if ((P3_1__delete_elements__j.j.int__content <> (0 : int))) then (
             ( (let k =  (val _f : int
             in _f) in (
              (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
               ()))
               in () end ;
              (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_3__i.i.int__content)))) then (
                begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 94 0 0] ( [@GP_Shape:L_3_while__pragargs__if__forsome__cmp__ixdcomp] [@GP_Id:45] [@comment:              (for some K in Vector1'First..i => Vector1(K) <= Number)                                                          ^ p3_1.adb:94:58:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:p3_1.adb:94:58] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
               k ))))) <= P3_1__delete_elements__number.number) in (
                ()))
                in () end ))))
             ;
              (val _f : bool
             ensures { ( (result = True) <-> (exists k  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_3__i.i.int__content) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) )) )} 
             in _f) )) else (
             ( (let k =  (val _f : int
             in _f) in (
              (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
               ()))
               in () end ;
              (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_3__i.i.int__content)))) then (
                begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 96 0 0] ( [@GP_Id:46] [@vc:annotation] [@comment:              (for all K in Vector1'First..i => Vector1(K) > Number));                                                         ^ p3_1.adb:96:57:VC_INDEX_CHECK] [@GP_Shape:L_3_while__pragargs__if__forall__cmp__ixdcomp] [@GP_Sloc:p3_1.adb:96:57] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
               k ))))) > P3_1__delete_elements__number.number) in (
                ()))
                in () end ))))
             ;
              (val _f : bool
             ensures { ( (result = True) <-> (forall k   [@model_trace:2955] [@name:K]  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_3__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) )) )} 
             in _f) ))) in (
              begin ensures {true} let _ = (let _ = () in (
              ()))
              in () end ))
             in (
             ()))
             in () end ))
            )
          done )))
          )))
         )))
        )
      with
       Temp___exception_453 -> ( ();
       ( [@GP_Sloc:p3_1.adb:88:23] ([#"p3_1.adb" 88 0 0] ()) );
       ( [@GP_Sloc:p3_1.adb:88:16] ([#"p3_1.adb" 88 0 0] ( [#"p3_1.adb" 88 0 0] (p3_1__delete_elements__result.P3_1__vector.vector__content <- ( (P3_1__vector.of_array(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first))) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)))) ));
       [#"p3_1.adb" 88 0 0] raise Return__exc )) ) )
      end
     with
      P3_1__delete_elements__L_3.L_3 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:p3_1.adb:98:14] ([#"p3_1.adb" 98 0 0] ()) );
   ( [@GP_Sloc:p3_1.adb:98:7] ([#"p3_1.adb" 98 0 0] ( [#"p3_1.adb" 98 0 0] (p3_1__delete_elements__result.P3_1__vector.vector__content <- ( (P3_1__vector.of_array(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first))) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)))) ));
   [#"p3_1.adb" 98 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.orb((if (((  begin ensures {true} let _ = (let _ = p3_1__delete_elements__result.P3_1__vector.vector__content in (
   ()))
   in () end ;
  (P3_1__vector.length(p3_1__delete_elements__result.P3_1__vector.vector__content)) ) = (0 : int))) then (
   ( (let k =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 67 0 0] ( [@vc:annotation] [@GP_Id:49] [@GP_Sloc:p3_1.ads:67:56] [@GP_Shape:pragargs__or__if__forall__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:                (for all K in Vector1'Range => Vector1(K) > Number)) or                                                        ^ p3_1.ads:67:56:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
     k ))))) > P3_1__delete_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall k   [@model_trace:3803] [@name:K]  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) -> ( [@GP_Pretty_Ada:3817] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) ) )) )} 
   in _f) )) else (
   (Boolean.of_int((1 : int)))))) ((if (((  begin ensures {true} let _ = (let _ = p3_1__delete_elements__result.P3_1__vector.vector__content in (
   ()))
   in () end ;
  (P3_1__vector.length(p3_1__delete_elements__result.P3_1__vector.vector__content)) ) > (0 : int))) then (
   ( (let k =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 69 0 0] ( [@comment:        (for some K in Vector1'Range => Vector1(K) <= Number));                                                 ^ p3_1.ads:69:49:VC_INDEX_CHECK] [@GP_Shape:pragargs__or__if__forsome__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:p3_1.ads:69:49] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:50] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
     k ))))) <= P3_1__delete_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) /\ ( [@GP_Pretty_Ada:3842] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) ) )) )} 
   in _f) )) else (
   (Boolean.of_int((1 : int))))))) in (
   ()))
   in () end ;
  p3_1__delete_elements__result.P3_1__vector.vector__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "count_lower_elements" defined at p3_1.ads:71, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__count_lower_elements__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        P3_1__vector as P3_1__vector
 use        P3_1__count_lower_elements__vector1 as P3_1__count_lower_elements__vector1
 use        P3_1__count_lower_elements__number as P3_1__count_lower_elements__number
 use        P3_1__count_lower_elements__i as P3_1__count_lower_elements__i
 use        P3_1__count_lower_elements__count as P3_1__count_lower_elements__count
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__count_lower_elements__L_4 as P3_1__count_lower_elements__L_4
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__count_lower_elements__i___axiom as P3_1__count_lower_elements__i___axiom
 use        P3_1__count_lower_elements__count___axiom as P3_1__count_lower_elements__count___axiom
 use        P3_1__count_lower_elements__L_4___axiom as P3_1__count_lower_elements__L_4___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__count_lower_elements__vector1___axiom as P3_1__count_lower_elements__vector1___axiom
 use        P3_1__count_lower_elements__number___axiom as P3_1__count_lower_elements__number___axiom

 val p3_1__count_lower_elements__result [@name:Count_Lower_Elements] [@model_projected] [@model_trace:3844@result]  : int__ref 
 
 let def [#"p3_1.ads" 71 0 0][@GP_Subp:p3_1.ads:71] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 71 0 0] true }
  ensures { [#"p3_1.ads" 71 0 0] ([#"p3_1.ads" 75 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (if Vector1'Length = 0 then Count_Lower_Elements'Result = 0) or              ^ p3_1.ads:75:14:VC_POSTCONDITION] [@GP_Shape:pragargs__or] [@model_vc_post] [@GP_Id:65] [@GP_Sloc:p3_1.ads:75:14] ( [@GP_Sloc:p3_1.ads:75:14] [@GP_Pretty_Ada:22340] ( (if (((P3_1__vector.length P3_1__count_lower_elements__vector1.vector1) = (0 : int))) then (
   (p3_1__count_lower_elements__result.int__content = (0 : int))) else (
   true)) \/ (if ((p3_1__count_lower_elements__result.int__content <> (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) k)) < P3_1__count_lower_elements__number.number) ))) else (
   (forall x [#"p3_1.ads" 75 0 0]  [@model_trace:3939] [@name:X]  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= x) /\ (x <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) x)) >= P3_1__count_lower_elements__number.number) )))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:71 *)
  ;
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__count_lower_elements__vector1.vector1 True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__count_lower_elements__number.number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:71 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:71 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__count_lower_elements__vector1.vector1)) ) < (1000 : int)) && ((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:71 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3895] ((P3_1__vector.length P3_1__count_lower_elements__vector1.vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3901] ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) = (0 : int)) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 101 0 0] ());
   ([#"p3_1.adb" 102 0 0] ( [#"p3_1.adb" 102 0 0] (P3_1__count_lower_elements__i.i.int__content <- ( ([#"p3_1.adb" 102 0 0] ( [@GP_Sloc:p3_1.adb:102:29] [@vc:annotation] [@comment:      i : Natural := Vector1'First;                             ^ p3_1.adb:102:29:VC_RANGE_CHECK] [@GP_Shape:i_decl__first_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:52] (Standard__natural.range_check_(( [#"p3_1.adb" 102 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ))) )) ));
    assume {  (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__i.i.int__content True False True True) } ));
   ([#"p3_1.adb" 103 0 0] ( [#"p3_1.adb" 103 0 0] (P3_1__count_lower_elements__count.count.int__content <- ( (0 : int) ));
   [#"p3_1.adb" 103 0 0] assume { [#"p3_1.adb" 103 0 0] (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__count.count.int__content True False True True) } ));
   ([#"p3_1.adb" 105 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:105:29] ([#"p3_1.adb" 105 0 0] ( () (* Translation of an Ada loop from p3_1.adb:105 *)
   ;
   (if ((P3_1__count_lower_elements__i.i.int__content <= ( [#"p3_1.adb" 105 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) ))) then (
    [#"p3_1.adb" 105 0 0] try
     ( [#"p3_1.adb" 105 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__count.count.int__content in (
      ()))
      in () end ;
     (let temp___464 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 105 0 0] (val _f : int
     ensures {[#"p3_1.adb" 105 0 0] (result = P3_1__count_lower_elements__count.count.int__content)} 
     in _f) in (
      ( [#"p3_1.adb" 105 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__i.i.int__content in (
       ()))
       in () end ;
      (let temp___463 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 105 0 0] (val _f : int
      ensures {[#"p3_1.adb" 105 0 0] (result = P3_1__count_lower_elements__i.i.int__content)} 
      in _f) in (
       [#"p3_1.adb" 105 0 0] let temp___468 [@mlw:proxy_symbol] [@introduced] = { int__content = (0 : int) } in 
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop p3_1.adb:105 *)
        ;
        ();
        ( [@GP_Sloc:p3_1.adb:106:21] ([#"p3_1.adb" 106 0 0] ()) );
        ( [@GP_Sloc:p3_1.adb:106:10] ([#"p3_1.adb" 106 0 0] (if (( ([#"p3_1.adb" 106 0 0] [#"p3_1.adb" 106 0 0] (([@branch_id=3038] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) (( [#"p3_1.adb" 106 0 0] assert { [#"p3_1.adb" 106 0 0] ([#"p3_1.adb" 106 0 0] ( [@GP_Shape:L_4_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:         if Vector1(i)<Number then                     ^ p3_1.adb:106:21:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:106:21] [@GP_Id:54] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= P3_1__count_lower_elements__i.i.int__content) /\ (P3_1__count_lower_elements__i.i.int__content <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
        P3_1__count_lower_elements__i.i.int__content ))))) < P3_1__count_lower_elements__number.number) )));
        ( [@branch_id=3038] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:p3_1.adb:107:13] ([#"p3_1.adb" 107 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:107:22] ([#"p3_1.adb" 107 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:107:19] ([#"p3_1.adb" 107 0 0] [#"p3_1.adb" 107 0 0] (P3_1__count_lower_elements__count.count.int__content <- ( ([#"p3_1.adb" 107 0 0] ( [@GP_Shape:L_4_while__if__count_assign__add] [@GP_Sloc:p3_1.adb:107:28] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:            Count := Count + 1;                            ^ p3_1.adb:107:28:VC_OVERFLOW_CHECK] [@GP_Id:53] (Standard__integer.range_check_((P3_1__count_lower_elements__count.count.int__content + (1 : int)))) )) ))) ) )) else (
         ()))) );
        () (* While loop translating the Ada loop from p3_1.adb:105 *)
        ;
        (let temp___inv_467 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
         ()))
         in () end ;
        (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= P3_1__count_lower_elements__i.i.int__content)) ((P3_1__count_lower_elements__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
         ()))
         in () end ;
        (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) )))) in (
          begin ensures {true} let _ = (let _ = (let temp___inv_466 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= P3_1__count_lower_elements__count.count.int__content)) ((P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 111 0 0] ( [@GP_Id:59] [@GP_Sloc:p3_1.adb:111:45] [@vc:annotation] [@comment:         pragma Loop_Invariant(Count in 0..i+1);                                             ^ p3_1.adb:111:45:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__in__range__add] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content + (1 : int)))) ))))) in (
           begin ensures {true} let _ = (let _ = (let temp___inv_465 [@mlw:proxy_symbol] [@introduced] = (P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 112 0 0] ( [@GP_Id:57] [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:112:58] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                                          ^ p3_1.adb:112:58:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"p3_1.adb" 112 0 0] ( [@GP_Id:56] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                           ^ p3_1.adb:112:43:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:112:43] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content - ( [#"p3_1.adb" 112 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
           ()))
           in () end ;
          (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           in (
           ()))
           in () end ))
          in (
          ()))
          in () end ))
        ;
         while True do
         invariant { 
          ([#"p3_1.adb" 110 0 0] ( [@comment:         pragma Loop_Invariant(i in Vector1'First..Vector1'Last);                                ^ p3_1.adb:110:32:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:110:32] [@vc:annotation] [@GP_Id:61] [@GP_Shape:L_4_while__pragargs__in] ( [@GP_Sloc:p3_1.adb:110:32] [@GP_Pretty_Ada:3059] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= P3_1__count_lower_elements__i.i.int__content) /\ (P3_1__count_lower_elements__i.i.int__content <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) ) ))
          }
         invariant { 
          ([#"p3_1.adb" 111 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:p3_1.adb:111:32] [@comment:         pragma Loop_Invariant(Count in 0..i+1);                                ^ p3_1.adb:111:32:VC_LOOP_INVARIANT] [@GP_Id:60] [@GP_Shape:L_4_while__pragargs__in] ( [@GP_Sloc:p3_1.adb:111:32] [@GP_Pretty_Ada:3071] ( ((0 : int) <= P3_1__count_lower_elements__count.count.int__content) /\ (P3_1__count_lower_elements__count.count.int__content <= (P3_1__count_lower_elements__i.i.int__content + (1 : int))) ) ) ))
          }
         invariant { 
          ([#"p3_1.adb" 112 0 0] ( [@GP_Id:58] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                ^ p3_1.adb:112:32:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:112:32] ( [@GP_Pretty_Ada:3080] [@GP_Sloc:p3_1.adb:112:32] (P3_1__count_lower_elements__count.count.int__content <= ((P3_1__count_lower_elements__i.i.int__content - (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1)) + (1 : int))) ) ))
          }
         ( () (* Assume implicit invariants from the loop p3_1.adb:105 *)
         ;
          assume {  ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__i.i.int__content True True True True) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__count.count.int__content True True True True) )/\true ) };
         () (* Check for absence of RTE in the invariant of loop p3_1.adb:105 *)
         ;
          (temp___468.int__content <- ( P3_1__count_lower_elements__i.i.int__content ));
         () (* Loop statements appearing after the loop invariant of loop p3_1.adb:105 *)
         ;
         ();
         ( [@GP_Sloc:p3_1.adb:113:10] ([#"p3_1.adb" 113 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:113:15] ([#"p3_1.adb" 113 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:113:12] ([#"p3_1.adb" 113 0 0] [#"p3_1.adb" 113 0 0] (P3_1__count_lower_elements__i.i.int__content <- ( ([#"p3_1.adb" 113 0 0] ( [@GP_Sloc:p3_1.adb:113:17] [@comment:         i := i + 1;                 ^ p3_1.adb:113:17:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__i_assign__add] [@GP_Id:55] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content + (1 : int)))) )) ))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop p3_1.adb:105 *)
         ;
         (if (not ( (P3_1__count_lower_elements__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
          ()))
          in () end ;
         (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) )) )) then (
           raise P3_1__count_lower_elements__L_4.L_4));
         ();
         ( [@GP_Sloc:p3_1.adb:106:21] ([#"p3_1.adb" 106 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:106:10] ([#"p3_1.adb" 106 0 0] (if (( ([#"p3_1.adb" 106 0 0] [#"p3_1.adb" 106 0 0] (([@branch_id=3038] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) (( [#"p3_1.adb" 106 0 0] assert { [#"p3_1.adb" 106 0 0] ([#"p3_1.adb" 106 0 0] ( [@GP_Shape:L_4_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:         if Vector1(i)<Number then                     ^ p3_1.adb:106:21:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:106:21] [@GP_Id:54] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= P3_1__count_lower_elements__i.i.int__content) /\ (P3_1__count_lower_elements__i.i.int__content <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
         P3_1__count_lower_elements__i.i.int__content ))))) < P3_1__count_lower_elements__number.number) )));
         ( [@branch_id=3038] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:p3_1.adb:107:13] ([#"p3_1.adb" 107 0 0] ()) );
          ( [@GP_Sloc:p3_1.adb:107:22] ([#"p3_1.adb" 107 0 0] ()) );
          ( [@GP_Sloc:p3_1.adb:107:19] ([#"p3_1.adb" 107 0 0] [#"p3_1.adb" 107 0 0] (P3_1__count_lower_elements__count.count.int__content <- ( ([#"p3_1.adb" 107 0 0] ( [@GP_Shape:L_4_while__if__count_assign__add] [@GP_Sloc:p3_1.adb:107:28] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:            Count := Count + 1;                            ^ p3_1.adb:107:28:VC_OVERFLOW_CHECK] [@GP_Id:53] (Standard__integer.range_check_((P3_1__count_lower_elements__count.count.int__content + (1 : int)))) )) ))) ) )) else (
          ()))) );
          begin ensures {true} let _ = (let _ =  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__i.i.int__content in (
          ()))
          in () end  in (
          ()))
          in () end ;
          check {  ([#"p3_1.adb" 109 0 0] ( [@GP_Reason:VC_LOOP_VARIANT] [@GP_Sloc:p3_1.adb:109:10] [@comment:         pragma Loop_Variant(Increases => i);          ^ p3_1.adb:109:10:VC_LOOP_VARIANT] [@vc:annotation] [@GP_Id:62] [@GP_Shape:L_4_while] (P3_1__count_lower_elements__i.i.int__content > temp___468.int__content) )) };
         (let temp___inv_467 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
          ()))
          in () end ;
         (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= P3_1__count_lower_elements__i.i.int__content)) ((P3_1__count_lower_elements__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
          ()))
          in () end ;
         (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) )))) in (
           begin ensures {true} let _ = (let _ = (let temp___inv_466 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= P3_1__count_lower_elements__count.count.int__content)) ((P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 111 0 0] ( [@GP_Id:59] [@GP_Sloc:p3_1.adb:111:45] [@vc:annotation] [@comment:         pragma Loop_Invariant(Count in 0..i+1);                                             ^ p3_1.adb:111:45:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__in__range__add] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content + (1 : int)))) ))))) in (
            begin ensures {true} let _ = (let _ = (let temp___inv_465 [@mlw:proxy_symbol] [@introduced] = (P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 112 0 0] ( [@GP_Id:57] [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:112:58] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                                          ^ p3_1.adb:112:58:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"p3_1.adb" 112 0 0] ( [@GP_Id:56] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                           ^ p3_1.adb:112:43:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:112:43] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content - ( [#"p3_1.adb" 112 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
            ()))
            in () end ;
           (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) )))) )) + (1 : int)))) ))) in (
             begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
            in (
            ()))
            in () end ))
           in (
           ()))
           in () end ))
          )
        done )))
       )))
      )
    with
     P3_1__count_lower_elements__L_4.L_4 -> ()
    end)) )) );
   ( [@GP_Sloc:p3_1.adb:115:14] ([#"p3_1.adb" 115 0 0] ()) );
   ( [@GP_Sloc:p3_1.adb:115:7] ([#"p3_1.adb" 115 0 0] ( [#"p3_1.adb" 115 0 0] (p3_1__count_lower_elements__result.int__content <- ( P3_1__count_lower_elements__count.count.int__content ));
   [#"p3_1.adb" 115 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.orb((if (((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__count_lower_elements__vector1.vector1)) ) = (0 : int))) then (
   (p3_1__count_lower_elements__result.int__content = (0 : int))) else (
   (Boolean.of_int((1 : int)))))) ((if ((p3_1__count_lower_elements__result.int__content <> (0 : int))) then (
   ( (let k =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= k)) ((k <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 77 0 0] ( [@GP_Shape:pragargs__or__if__forsome__cmp__ixdcomp] [@vc:annotation] [@comment:        (for some K in Vector1'Range => Vector1(K)<Number)                                                 ^ p3_1.ads:77:49:VC_INDEX_CHECK] [@GP_Id:63] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.ads:77:49] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
     k ))))) < P3_1__count_lower_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) /\ ( [@GP_Pretty_Ada:3937] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) k)) < P3_1__count_lower_elements__number.number) ) )) )} 
   in _f) )) else (
   ( (let x =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= x)) ((x <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 79 0 0] ( [@vc:annotation] [@comment:        (for all X in Vector1'Range => Vector1(X)>=Number));                                                ^ p3_1.ads:79:48:VC_INDEX_CHECK] [@GP_Shape:pragargs__or__if__forall__cmp__ixdcomp] [@GP_Sloc:p3_1.ads:79:48] [@GP_Id:64] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= x) /\ (x <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
     x ))))) >= P3_1__count_lower_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall x   [@model_trace:3939] [@name:X]  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= x) /\ (x <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) -> ( [@GP_Pretty_Ada:3953] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) x)) >= P3_1__count_lower_elements__number.number) ) )) )} 
   in _f) ))))) in (
   ()))
   in () end ;
  p3_1__count_lower_elements__result.int__content )
end
