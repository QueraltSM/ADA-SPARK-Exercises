(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "vector" defined at p3_1.ads:3, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "vector" defined at p3_1.ads:3, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "vector" defined at p3_1.ads:3, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "vector" defined at p3_1.ads:3, created in Gnat2Why.Types.Translate_Type *)
module P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type vector =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type vector__ref =
  { mutable vector__content : vector }
 
 function vector__ref_vector__content__projection 
   (a : vector__ref) : vector =
  a.vector__content
 
 meta "model_projection" function vector__ref_vector__content__projection
 
 meta "inline:no" function vector__ref_vector__content__projection
 
 val vector__havoc 
   (x : vector__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3s" defined at p3_1.ads:5, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t3s =
  < range 0 4 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at p3_1.ads:5, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T3s__rep
 use        P3_1__T3s as P3_1__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : P3_1__T3s.t3s) : int =
  (P3_1__T3s.t3s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = P3_1__T3s.t3s, 
 predicate in_range = P3_1__T3s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at p3_1.ads:5, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T4s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5s" defined at p3_1.ads:6, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T5s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t5s =
  < range 0 4 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t5s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t5s__ref =
  { mutable t5s__content : t5s }
 
 function t5s__ref_t5s__content__projection 
   (a : t5s__ref) : t5s =
  a.t5s__content
 
 meta "model_projection" function t5s__ref_t5s__content__projection
 
 meta "inline:no" function t5s__ref_t5s__content__projection
 
 val t5s__havoc 
   (x : t5s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T5s" defined at p3_1.ads:6, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T5s__rep
 use        P3_1__T5s as P3_1__T5s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : P3_1__T5s.t5s) : int =
  (P3_1__T5s.t5s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = P3_1__T5s.t5s, 
 predicate in_range = P3_1__T5s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T6s" defined at p3_1.ads:6, created in Gnat2Why.Types.Translate_Type *)
module P3_1__T6s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "vec1" defined at p3_1.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_max_count__vec1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vec1 [#"p3_1.ads" 29 0 0][@model_projected] [@name:vec1] [@model_trace:2939] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vec1" defined at p3_1.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_max_count__vec1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "vec2" defined at p3_1.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_max_count__vec2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vec2 [#"p3_1.ads" 29 0 0][@model_projected] [@model_trace:2946] [@name:vec2] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vec2" defined at p3_1.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_max_count__vec2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_max_count" defined at p3_1.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__get_max_count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val function get_max_count 
   (vec1 : P3_1__vector.vector) (vec2 : P3_1__vector.vector) : int
 
 val predicate get_max_count__function_guard 
   (temp___result_155 : int) (vec1 : P3_1__vector.vector) (vec2 : P3_1__vector.vector)

end

(* Module for defining the constant "systolic" defined at p3_1.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_bood_pressure_degree__systolic
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant systolic [#"p3_1.ads" 35 0 0][@name:systolic] [@model_trace:3026] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "systolic" defined at p3_1.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_bood_pressure_degree__systolic___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "diastolic" defined at p3_1.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__get_bood_pressure_degree__diastolic
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant diastolic [#"p3_1.ads" 35 0 0][@name:diastolic] [@model_trace:3033] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "diastolic" defined at p3_1.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__get_bood_pressure_degree__diastolic___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T16s" defined at p3_1.ads:40, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T16s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17s" defined at p3_1.ads:42, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T17s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T18s" defined at p3_1.ads:44, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T18s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T19s" defined at p3_1.ads:46, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T19s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20s" defined at p3_1.ads:48, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T20s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T21s" defined at p3_1.ads:50, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T21s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (39 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T22s" defined at p3_1.ads:51, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T22s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "get_bood_pressure_degree" defined at p3_1.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__get_bood_pressure_degree
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function get_bood_pressure_degree 
   (systolic : int) (diastolic : int) : Standard__string.string
 
 val predicate get_bood_pressure_degree__function_guard 
   (temp___result_156 : Standard__string.string) (systolic : int) (diastolic : int)

end

(* Module for defining the constant "string1" defined at p3_1.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__compare_to__string1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant string1 [#"p3_1.ads" 53 0 0][@name:String1] [@model_projected] [@model_trace:3206] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "string1" defined at p3_1.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__compare_to__string1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "string2" defined at p3_1.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__compare_to__string2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant string2 [#"p3_1.ads" 53 0 0][@name:String2] [@model_trace:3213] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "string2" defined at p3_1.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__compare_to__string2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "compare_to" defined at p3_1.ads:53, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__compare_to
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function compare_to 
   (string1 : Standard__string.string) (string2 : Standard__string.string) : bool
 
 val predicate compare_to__function_guard 
   (temp___result_157 : bool) (string1 : Standard__string.string) (string2 : Standard__string.string)

end

(* Module for defining the constant "vector1" defined at p3_1.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__delete_elements__vector1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vector1 [#"p3_1.ads" 58 0 0][@model_trace:3259] [@model_projected] [@name:Vector1] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vector1" defined at p3_1.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__vector1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "number" defined at p3_1.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__delete_elements__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"p3_1.ads" 58 0 0][@name:Number] [@model_trace:3268] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at p3_1.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T24s" defined at p3_1.ads:63, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L23s__T24s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t24s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t24s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24s__ref =
  { mutable t24s__content : t24s }
 
 function t24s__ref_t24s__content__projection 
   (a : t24s__ref) : t24s =
  a.t24s__content
 
 meta "model_projection" function t24s__ref_t24s__content__projection
 
 meta "inline:no" function t24s__ref_t24s__content__projection
 
 val t24s__havoc 
   (x : t24s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T26s" defined at p3_1.ads:65, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L25s__T26s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t26s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t26s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t26s__ref =
  { mutable t26s__content : t26s }
 
 function t26s__ref_t26s__content__projection 
   (a : t26s__ref) : t26s =
  a.t26s__content
 
 meta "model_projection" function t26s__ref_t26s__content__projection
 
 meta "inline:no" function t26s__ref_t26s__content__projection
 
 val t26s__havoc 
   (x : t26s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "delete_elements" defined at p3_1.ads:58, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__delete_elements
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val function delete_elements 
   (vector1 : P3_1__vector.vector) (number : int) : P3_1__vector.vector
 
 val predicate delete_elements__function_guard 
   (temp___result_158 : P3_1__vector.vector) (vector1 : P3_1__vector.vector) (number : int)

end

(* Module for defining the constant "vector1" defined at p3_1.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__count_lower_elements__vector1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val constant vector1 [#"p3_1.ads" 67 0 0][@model_projected] [@model_trace:3369] [@name:Vector1] 
   : P3_1__vector.vector

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "vector1" defined at p3_1.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__vector1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "number" defined at p3_1.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__count_lower_elements__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"p3_1.ads" 67 0 0][@name:Number] [@model_trace:3378] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at p3_1.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T28s" defined at p3_1.ads:73, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__L27s__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t28s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t28s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t28s__ref =
  { mutable t28s__content : t28s }
 
 function t28s__ref_t28s__content__projection 
   (a : t28s__ref) : t28s =
  a.t28s__content
 
 meta "model_projection" function t28s__ref_t28s__content__projection
 
 meta "inline:no" function t28s__ref_t28s__content__projection
 
 val t28s__havoc 
   (x : t28s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T30s" defined at p3_1.ads:75, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__L29s__T30s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t30s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t30s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t30s__ref =
  { mutable t30s__content : t30s }
 
 function t30s__ref_t30s__content__projection 
   (a : t30s__ref) : t30s =
  a.t30s__content
 
 meta "model_projection" function t30s__ref_t30s__content__projection
 
 meta "inline:no" function t30s__ref_t30s__content__projection
 
 val t30s__havoc 
   (x : t30s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "count_lower_elements" defined at p3_1.ads:67, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module P3_1__count_lower_elements
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector

 val function count_lower_elements 
   (vector1 : P3_1__vector.vector) (number : int) : int
 
 val predicate count_lower_elements__function_guard 
   (temp___result_159 : int) (vector1 : P3_1__vector.vector) (number : int)

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TS2bP1" defined at p3_1.adb:82, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__TS2bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS2bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS2bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS2bP1__ref =
  { mutable tS2bP1__content : tS2bP1 }
 
 function tS2bP1__ref_tS2bP1__content__projection 
   (a : tS2bP1__ref) : tS2bP1 =
  a.tS2bP1__content
 
 meta "model_projection" function tS2bP1__ref_tS2bP1__content__projection
 
 meta "inline:no" function tS2bP1__ref_tS2bP1__content__projection
 
 val tS2bP1__havoc 
   (x : tS2bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S2b" defined at p3_1.adb:82, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__S2b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s2b =
  vector
 
 type s2b__ref =
  { mutable s2b__content : s2b }
 
 function s2b__ref_s2b__content__projection 
   (a : s2b__ref) : s2b =
  a.s2b__content
 
 meta "model_projection" function s2b__ref_s2b__content__projection
 
 meta "inline:no" function s2b__ref_s2b__content__projection
 
 val s2b__havoc 
   (x : s2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at p3_1.adb:82, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__TS1bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content : tS1bP1 }
 
 function tS1bP1__ref_tS1bP1__content__projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref_tS1bP1__content__projection
 
 meta "inline:no" function tS1bP1__ref_tS1bP1__content__projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at p3_1.adb:82, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_max_count__S1b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s1b =
  vector
 
 type s1b__ref =
  { mutable s1b__content : s1b }
 
 function s1b__ref_s1b__content__projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref_s1b__content__projection
 
 meta "inline:no" function s1b__ref_s1b__content__projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at p3_1.adb:93, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T8b" defined at p3_1.adb:95, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T10b" defined at p3_1.adb:97, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T12b" defined at p3_1.adb:99, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T14b" defined at p3_1.adb:101, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T16b" defined at p3_1.adb:103, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (39 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T18b" defined at p3_1.adb:105, created in Gnat2Why.Types.Translate_Type *)
module P3_1__get_bood_pressure_degree__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS20bP1" defined at p3_1.adb:108, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__TS20bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS20bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS20bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS20bP1__ref =
  { mutable tS20bP1__content : tS20bP1 }
 
 function tS20bP1__ref_tS20bP1__content__projection 
   (a : tS20bP1__ref) : tS20bP1 =
  a.tS20bP1__content
 
 meta "model_projection" function tS20bP1__ref_tS20bP1__content__projection
 
 meta "inline:no" function tS20bP1__ref_tS20bP1__content__projection
 
 val tS20bP1__havoc 
   (x : tS20bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S20b" defined at p3_1.adb:108, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__S20b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s20b =
  string
 
 type s20b__ref =
  { mutable s20b__content : s20b }
 
 function s20b__ref_s20b__content__projection 
   (a : s20b__ref) : s20b =
  a.s20b__content
 
 meta "model_projection" function s20b__ref_s20b__content__projection
 
 meta "inline:no" function s20b__ref_s20b__content__projection
 
 val s20b__havoc 
   (x : s20b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS19bP1" defined at p3_1.adb:108, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__TS19bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS19bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS19bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS19bP1__ref =
  { mutable tS19bP1__content : tS19bP1 }
 
 function tS19bP1__ref_tS19bP1__content__projection 
   (a : tS19bP1__ref) : tS19bP1 =
  a.tS19bP1__content
 
 meta "model_projection" function tS19bP1__ref_tS19bP1__content__projection
 
 meta "inline:no" function tS19bP1__ref_tS19bP1__content__projection
 
 val tS19bP1__havoc 
   (x : tS19bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S19b" defined at p3_1.adb:108, created in Gnat2Why.Types.Translate_Type *)
module P3_1__compare_to__S19b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s19b =
  string
 
 type s19b__ref =
  { mutable s19b__content : s19b }
 
 function s19b__ref_s19b__content__projection 
   (a : s19b__ref) : s19b =
  a.s19b__content
 
 meta "model_projection" function s19b__ref_s19b__content__projection
 
 meta "inline:no" function s19b__ref_s19b__content__projection
 
 val s19b__havoc 
   (x : s19b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS22bP1" defined at p3_1.adb:113, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__TS22bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS22bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS22bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS22bP1__ref =
  { mutable tS22bP1__content : tS22bP1 }
 
 function tS22bP1__ref_tS22bP1__content__projection 
   (a : tS22bP1__ref) : tS22bP1 =
  a.tS22bP1__content
 
 meta "model_projection" function tS22bP1__ref_tS22bP1__content__projection
 
 meta "inline:no" function tS22bP1__ref_tS22bP1__content__projection
 
 val tS22bP1__havoc 
   (x : tS22bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S22b" defined at p3_1.adb:113, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__S22b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s22b =
  vector
 
 type s22b__ref =
  { mutable s22b__content : s22b }
 
 function s22b__ref_s22b__content__projection 
   (a : s22b__ref) : s22b =
  a.s22b__content
 
 meta "model_projection" function s22b__ref_s22b__content__projection
 
 meta "inline:no" function s22b__ref_s22b__content__projection
 
 val s22b__havoc 
   (x : s22b__ref) : unit
  writes {x}

end

(* Module for defining the constant "R23b" defined at p3_1.adb:114, created in Gnat2Why.Decls.Translate_Constant *)
module P3_1__delete_elements__R23b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant r23b [#"p3_1.adb" 114 0 0]
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "TTaux_vectorSP1" defined at p3_1.adb:114, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__TTaux_vectorSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTaux_vectorSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTaux_vectorSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTaux_vectorSP1__ref =
  { mutable tTaux_vectorSP1__content : tTaux_vectorSP1 }
 
 function tTaux_vectorSP1__ref_tTaux_vectorSP1__content__projection 
   (a : tTaux_vectorSP1__ref) : tTaux_vectorSP1 =
  a.tTaux_vectorSP1__content
 
 meta "model_projection" function tTaux_vectorSP1__ref_tTaux_vectorSP1__content__projection
 
 meta "inline:no" function tTaux_vectorSP1__ref_tTaux_vectorSP1__content__projection
 
 val tTaux_vectorSP1__havoc 
   (x : tTaux_vectorSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Taux_vectorS" defined at p3_1.adb:114, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__Taux_vectorS
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type taux_vectorS =
  vector
 
 type taux_vectorS__ref =
  { mutable taux_vectorS__content : taux_vectorS }
 
 function taux_vectorS__ref_taux_vectorS__content__projection 
   (a : taux_vectorS__ref) : taux_vectorS =
  a.taux_vectorS__content
 
 meta "model_projection" function taux_vectorS__ref_taux_vectorS__content__projection
 
 meta "inline:no" function taux_vectorS__ref_taux_vectorS__content__projection
 
 val taux_vectorS__havoc 
   (x : taux_vectorS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T24b" defined at p3_1.adb:114, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t24b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t24b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24b__ref =
  { mutable t24b__content : t24b }
 
 function t24b__ref_t24b__content__projection 
   (a : t24b__ref) : t24b =
  a.t24b__content
 
 meta "model_projection" function t24b__ref_t24b__content__projection
 
 meta "inline:no" function t24b__ref_t24b__content__projection
 
 val t24b__havoc 
   (x : t24b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T25b" defined at p3_1.adb:114, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T25b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t25b =
  vector
 
 type t25b__ref =
  { mutable t25b__content : t25b }
 
 function t25b__ref_t25b__content__projection 
   (a : t25b__ref) : t25b =
  a.t25b__content
 
 meta "model_projection" function t25b__ref_t25b__content__projection
 
 meta "inline:no" function t25b__ref_t25b__content__projection
 
 val t25b__havoc 
   (x : t25b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T27b" defined at p3_1.adb:118, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t27b =
  < range 1 1 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t27b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t27b__ref =
  { mutable t27b__content : t27b }
 
 function t27b__ref_t27b__content__projection 
   (a : t27b__ref) : t27b =
  a.t27b__content
 
 meta "model_projection" function t27b__ref_t27b__content__projection
 
 meta "inline:no" function t27b__ref_t27b__content__projection
 
 val t27b__havoc 
   (x : t27b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T27b" defined at p3_1.adb:118, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T27b__rep
 use        P3_1__delete_elements__T27b as P3_1__delete_elements__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : P3_1__delete_elements__T27b.t27b) : int =
  (P3_1__delete_elements__T27b.t27b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = P3_1__delete_elements__T27b.t27b, 
 predicate in_range = P3_1__delete_elements__T27b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T28b" defined at p3_1.adb:118, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at p3_1.adb:120, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_1__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t29b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t29b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t29b__ref =
  { mutable t29b__content : t29b }
 
 function t29b__ref_t29b__content__projection 
   (a : t29b__ref) : t29b =
  a.t29b__content
 
 meta "model_projection" function t29b__ref_t29b__content__projection
 
 meta "inline:no" function t29b__ref_t29b__content__projection
 
 val t29b__havoc 
   (x : t29b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T36b" defined at p3_1.adb:131, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_1__L35b__T36b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t36b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t36b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t36b__ref =
  { mutable t36b__content : t36b }
 
 function t36b__ref_t36b__content__projection 
   (a : t36b__ref) : t36b =
  a.t36b__content
 
 meta "model_projection" function t36b__ref_t36b__content__projection
 
 meta "inline:no" function t36b__ref_t36b__content__projection
 
 val t36b__havoc 
   (x : t36b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T32b" defined at p3_1.adb:131, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_1__L31b__T32b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t32b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t32b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t32b__ref =
  { mutable t32b__content : t32b }
 
 function t32b__ref_t32b__content__projection 
   (a : t32b__ref) : t32b =
  a.t32b__content
 
 meta "model_projection" function t32b__ref_t32b__content__projection
 
 meta "inline:no" function t32b__ref_t32b__content__projection
 
 val t32b__havoc 
   (x : t32b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T38b" defined at p3_1.adb:133, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_1__L37b__T38b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t38b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t38b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t38b__ref =
  { mutable t38b__content : t38b }
 
 function t38b__ref_t38b__content__projection 
   (a : t38b__ref) : t38b =
  a.t38b__content
 
 meta "model_projection" function t38b__ref_t38b__content__projection
 
 meta "inline:no" function t38b__ref_t38b__content__projection
 
 val t38b__havoc 
   (x : t38b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T34b" defined at p3_1.adb:133, created in Gnat2Why.Types.Translate_Type *)
module P3_1__delete_elements__L_1__L33b__T34b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t34b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t34b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t34b__ref =
  { mutable t34b__content : t34b }
 
 function t34b__ref_t34b__content__projection 
   (a : t34b__ref) : t34b =
  a.t34b__content
 
 meta "model_projection" function t34b__ref_t34b__content__projection
 
 meta "inline:no" function t34b__ref_t34b__content__projection
 
 val t34b__havoc 
   (x : t34b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS40bP1" defined at p3_1.adb:138, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__TS40bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS40bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS40bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS40bP1__ref =
  { mutable tS40bP1__content : tS40bP1 }
 
 function tS40bP1__ref_tS40bP1__content__projection 
   (a : tS40bP1__ref) : tS40bP1 =
  a.tS40bP1__content
 
 meta "model_projection" function tS40bP1__ref_tS40bP1__content__projection
 
 meta "inline:no" function tS40bP1__ref_tS40bP1__content__projection
 
 val tS40bP1__havoc 
   (x : tS40bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S40b" defined at p3_1.adb:138, created in Gnat2Why.Types.Translate_Type *)
module P3_1__count_lower_elements__S40b
 use export P3_1__vector
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s40b =
  vector
 
 type s40b__ref =
  { mutable s40b__content : s40b }
 
 function s40b__ref_s40b__content__projection 
   (a : s40b__ref) : s40b =
  a.s40b__content
 
 meta "model_projection" function s40b__ref_s40b__content__projection
 
 meta "inline:no" function s40b__ref_s40b__content__projection
 
 val s40b__havoc 
   (x : s40b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "global_vector" defined at p3_1.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__global_vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val global_vector [#"p3_1.ads" 5 0 0][@name:Global_Vector] [@model_projected] [@model_trace:2886]  : Array__Int__Standard__integer.map__ref 
 
 val constant global_vector__first [#"p3_1.ads" 5 0 0][@model_trace:2886'First] [@name:Global_Vector] [@model_projected] 
   : Standard__integer.integer

 
 val constant global_vector__last [#"p3_1.ads" 5 0 0][@name:Global_Vector] [@model_trace:2886'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "global_vector" defined at p3_1.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__global_vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "global_inverse_vector" defined at p3_1.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__global_inverse_vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val global_inverse_vector [#"p3_1.ads" 6 0 0][@name:Global_Inverse_Vector] [@model_projected] [@model_trace:2906]  : Array__Int__Standard__integer.map__ref 
 
 val constant global_inverse_vector__first [#"p3_1.ads" 6 0 0][@name:Global_Inverse_Vector] [@model_projected] [@model_trace:2906'First] 
   : Standard__integer.integer

 
 val constant global_inverse_vector__last [#"p3_1.ads" 6 0 0][@name:Global_Inverse_Vector] [@model_projected] [@model_trace:2906'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "global_inverse_vector" defined at p3_1.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__global_inverse_vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "increment" defined at p3_1.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__increment
 use        "_gnatprove_standard".Main
 use        "int".Int

 val increment [#"p3_1.ads" 7 0 0][@name:Increment] [@model_projected] [@model_trace:2922]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "increment" defined at p3_1.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__increment___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "aux_vector" defined at p3_1.adb:114, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__delete_elements__aux_vector
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val aux_vector [#"p3_1.adb" 114 0 0][@model_projected] [@name:Aux_Vector] [@model_trace:2561]  : Array__Int__Standard__integer.map__ref 
 
 val constant aux_vector__first [#"p3_1.adb" 114 0 0][@model_projected] [@name:Aux_Vector] [@model_trace:2561'First] 
   : Standard__integer.integer

 
 val constant aux_vector__last [#"p3_1.adb" 114 0 0][@model_projected] [@name:Aux_Vector] [@model_trace:2561'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "aux_vector" defined at p3_1.adb:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__aux_vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at p3_1.adb:115, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__delete_elements__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"p3_1.adb" 115 0 0][@name:j] [@model_projected] [@model_trace:2584]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at p3_1.adb:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at p3_1.adb:120, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__delete_elements__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"p3_1.adb" 120 0 0][@model_trace:2608] [@name:i] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at p3_1.adb:120, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at p3_1.adb:139, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__count_lower_elements__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"p3_1.adb" 139 0 0][@name:i] [@model_projected] [@model_trace:2736]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at p3_1.adb:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at p3_1.adb:140, created in Gnat2Why.Decls.Translate_Variable *)
module P3_1__count_lower_elements__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"p3_1.adb" 140 0 0][@model_projected] [@model_trace:2748] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at p3_1.adb:140, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_160 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_161 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for defining the loop exit exception for the loop "L_1" defined at p3_1.adb:120, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module P3_1__delete_elements__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at p3_1.adb:120, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__delete_elements__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at p3_1.adb:142, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module P3_1__count_lower_elements__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at p3_1.adb:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module P3_1__count_lower_elements__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "vector" defined at p3_1.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__vector___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        P3_1__vector as P3_1__vector

 predicate dynamic_invariant [@inline] 
   (temp___expr_167 : P3_1__vector.vector) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) =
  (if (temp___skip_constant_164) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (P3_1__vector.first temp___expr_167) (P3_1__vector.last temp___expr_167))))
 val dynamic_invariant [@inline] 
   (temp___expr_167 : P3_1__vector.vector) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_167 : P3_1__vector.vector) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) }

end

(* Module giving axioms for type "T3s" defined at p3_1.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4s" defined at p3_1.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T4s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5s" defined at p3_1.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T5s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6s" defined at p3_1.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__T6s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16s" defined at p3_1.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T16s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17s" defined at p3_1.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T17s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18s" defined at p3_1.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T18s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19s" defined at p3_1.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T19s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20s" defined at p3_1.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T20s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T21s" defined at p3_1.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T21s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22s" defined at p3_1.ads:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T22s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at p3_1.ads:40, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_173
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_173 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_173__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_173 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (5 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (7 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (8 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (9 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_173 __void_param) (11 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:42, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_177
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_177 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_177__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_177 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_177 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_177 __void_param) (2 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_177 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_177 __void_param) (4 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_177 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_177 __void_param) (6 : int))) = (108 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:44, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_181
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_181 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_181__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_181 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (4 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (5 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (6 : int))) = (112 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (8 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (9 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (11 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (12 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (14 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_181 __void_param) (15 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:46, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_185
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_185 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_185__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_185 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_185 __void_param) (20 : int))) = (49 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:48, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_189
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_189 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_189__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_189 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_189 __void_param) (20 : int))) = (50 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:50, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_193
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_193 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_193__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_193 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (9 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (10 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (11 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (12 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (14 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (15 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (16 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (18 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (19 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (20 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (21 : int))) = (40 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (22 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (23 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (24 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (26 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (27 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (28 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (29 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (30 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (31 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (32 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (33 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (34 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (35 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (36 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (37 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (38 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_193 __void_param) (39 : int))) = (41 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.ads:51, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_197
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_197 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_197__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_197 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_197 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_197 __void_param) (2 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_197 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_197 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_197 __void_param) (5 : int))) = (114 : int)) ) ))

end

(* Module giving axioms for type "T24s" defined at p3_1.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L23s__T24s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26s" defined at p3_1.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L25s__T26s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28s" defined at p3_1.ads:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__L27s__T28s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30s" defined at p3_1.ads:75, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__L29s__T30s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_242 : int) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool) =
  (if (( temp___is_init_238 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_242)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_242 : int) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_242 : int) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_243 : int) (temp___skip_top_level_244 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_243 : int) (temp___skip_top_level_244 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_243 : int) (temp___skip_top_level_244 : bool) }

end

(* Module giving axioms for type "TS2bP1" defined at p3_1.adb:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__TS2bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S2b" defined at p3_1.adb:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__S2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count__vec2 as P3_1__get_max_count__vec2
 use        P3_1__get_max_count__S2b as P3_1__get_max_count__S2b

 predicate dynamic_invariant [@inline] 
   (temp___expr_249 : P3_1__get_max_count__S2b.s2b) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) =
  (if (temp___skip_constant_246) then (
   true) else (
   ( (P3_1__get_max_count__S2b.dynamic_property (P3_1__vector.first P3_1__get_max_count__vec2.vec2) (P3_1__vector.last P3_1__get_max_count__vec2.vec2) (P3_1__get_max_count__S2b.first temp___expr_249) (P3_1__get_max_count__S2b.last temp___expr_249)) /\ ( ((P3_1__get_max_count__S2b.first temp___expr_249) = (P3_1__vector.first P3_1__get_max_count__vec2.vec2)) /\ ((P3_1__get_max_count__S2b.last temp___expr_249) = (P3_1__vector.last P3_1__get_max_count__vec2.vec2)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_249 : P3_1__get_max_count__S2b.s2b) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_249 : P3_1__get_max_count__S2b.s2b) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_251 : P3_1__get_max_count__S2b.s2b) (temp___skip_top_level_252 : bool) =
  ( ( true /\ ((P3_1__get_max_count__S2b.first temp___expr_251) = (P3_1__vector.first P3_1__get_max_count__vec2.vec2)) )/\((P3_1__get_max_count__S2b.last temp___expr_251) = (P3_1__vector.last P3_1__get_max_count__vec2.vec2)) )
 val default_initial_assumption [@inline] 
   (temp___expr_251 : P3_1__get_max_count__S2b.s2b) (temp___skip_top_level_252 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_251 : P3_1__get_max_count__S2b.s2b) (temp___skip_top_level_252 : bool) }

end

(* Module giving axioms for type "TS1bP1" defined at p3_1.adb:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__TS1bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S1b" defined at p3_1.adb:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_max_count__S1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count__vec1 as P3_1__get_max_count__vec1
 use        P3_1__get_max_count__S1b as P3_1__get_max_count__S1b

 predicate dynamic_invariant [@inline] 
   (temp___expr_259 : P3_1__get_max_count__S1b.s1b) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) =
  (if (temp___skip_constant_256) then (
   true) else (
   ( (P3_1__get_max_count__S1b.dynamic_property (P3_1__vector.first P3_1__get_max_count__vec1.vec1) (P3_1__vector.last P3_1__get_max_count__vec1.vec1) (P3_1__get_max_count__S1b.first temp___expr_259) (P3_1__get_max_count__S1b.last temp___expr_259)) /\ ( ((P3_1__get_max_count__S1b.first temp___expr_259) = (P3_1__vector.first P3_1__get_max_count__vec1.vec1)) /\ ((P3_1__get_max_count__S1b.last temp___expr_259) = (P3_1__vector.last P3_1__get_max_count__vec1.vec1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_259 : P3_1__get_max_count__S1b.s1b) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_259 : P3_1__get_max_count__S1b.s1b) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_261 : P3_1__get_max_count__S1b.s1b) (temp___skip_top_level_262 : bool) =
  ( ( true /\ ((P3_1__get_max_count__S1b.first temp___expr_261) = (P3_1__vector.first P3_1__get_max_count__vec1.vec1)) )/\((P3_1__get_max_count__S1b.last temp___expr_261) = (P3_1__vector.last P3_1__get_max_count__vec1.vec1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_261 : P3_1__get_max_count__S1b.s1b) (temp___skip_top_level_262 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_261 : P3_1__get_max_count__S1b.s1b) (temp___skip_top_level_262 : bool) }

end

(* Module giving axioms for type "T6b" defined at p3_1.adb:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at p3_1.adb:95, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at p3_1.adb:97, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at p3_1.adb:99, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at p3_1.adb:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at p3_1.adb:103, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at p3_1.adb:105, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__get_bood_pressure_degree__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS20bP1" defined at p3_1.adb:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__TS20bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S20b" defined at p3_1.adb:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__S20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        P3_1__compare_to__string2 as P3_1__compare_to__string2
 use        P3_1__compare_to__S20b as P3_1__compare_to__S20b

 predicate dynamic_invariant [@inline] 
   (temp___expr_269 : P3_1__compare_to__S20b.s20b) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) =
  (if (temp___skip_constant_266) then (
   true) else (
   ( (P3_1__compare_to__S20b.dynamic_property (Standard__string.first P3_1__compare_to__string2.string2) (Standard__string.last P3_1__compare_to__string2.string2) (P3_1__compare_to__S20b.first temp___expr_269) (P3_1__compare_to__S20b.last temp___expr_269)) /\ ( ((P3_1__compare_to__S20b.first temp___expr_269) = (Standard__string.first P3_1__compare_to__string2.string2)) /\ ((P3_1__compare_to__S20b.last temp___expr_269) = (Standard__string.last P3_1__compare_to__string2.string2)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_269 : P3_1__compare_to__S20b.s20b) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_269 : P3_1__compare_to__S20b.s20b) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_271 : P3_1__compare_to__S20b.s20b) (temp___skip_top_level_272 : bool) =
  ( ( true /\ ((P3_1__compare_to__S20b.first temp___expr_271) = (Standard__string.first P3_1__compare_to__string2.string2)) )/\((P3_1__compare_to__S20b.last temp___expr_271) = (Standard__string.last P3_1__compare_to__string2.string2)) )
 val default_initial_assumption [@inline] 
   (temp___expr_271 : P3_1__compare_to__S20b.s20b) (temp___skip_top_level_272 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_271 : P3_1__compare_to__S20b.s20b) (temp___skip_top_level_272 : bool) }

end

(* Module giving axioms for type "TS19bP1" defined at p3_1.adb:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__TS19bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S19b" defined at p3_1.adb:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__compare_to__S19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        P3_1__compare_to__string1 as P3_1__compare_to__string1
 use        P3_1__compare_to__S19b as P3_1__compare_to__S19b

 predicate dynamic_invariant [@inline] 
   (temp___expr_279 : P3_1__compare_to__S19b.s19b) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) =
  (if (temp___skip_constant_276) then (
   true) else (
   ( (P3_1__compare_to__S19b.dynamic_property (Standard__string.first P3_1__compare_to__string1.string1) (Standard__string.last P3_1__compare_to__string1.string1) (P3_1__compare_to__S19b.first temp___expr_279) (P3_1__compare_to__S19b.last temp___expr_279)) /\ ( ((P3_1__compare_to__S19b.first temp___expr_279) = (Standard__string.first P3_1__compare_to__string1.string1)) /\ ((P3_1__compare_to__S19b.last temp___expr_279) = (Standard__string.last P3_1__compare_to__string1.string1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_279 : P3_1__compare_to__S19b.s19b) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_279 : P3_1__compare_to__S19b.s19b) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_281 : P3_1__compare_to__S19b.s19b) (temp___skip_top_level_282 : bool) =
  ( ( true /\ ((P3_1__compare_to__S19b.first temp___expr_281) = (Standard__string.first P3_1__compare_to__string1.string1)) )/\((P3_1__compare_to__S19b.last temp___expr_281) = (Standard__string.last P3_1__compare_to__string1.string1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_281 : P3_1__compare_to__S19b.s19b) (temp___skip_top_level_282 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_281 : P3_1__compare_to__S19b.s19b) (temp___skip_top_level_282 : bool) }

end

(* Module giving axioms for type "TS22bP1" defined at p3_1.adb:113, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__TS22bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S22b" defined at p3_1.adb:113, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__S22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__delete_elements__vector1 as P3_1__delete_elements__vector1
 use        P3_1__delete_elements__S22b as P3_1__delete_elements__S22b

 predicate dynamic_invariant [@inline] 
   (temp___expr_289 : P3_1__delete_elements__S22b.s22b) (temp___is_init_285 : bool) (temp___skip_constant_286 : bool) (temp___do_toplevel_287 : bool) (temp___do_typ_inv_288 : bool) =
  (if (temp___skip_constant_286) then (
   true) else (
   ( (P3_1__delete_elements__S22b.dynamic_property (P3_1__vector.first P3_1__delete_elements__vector1.vector1) (P3_1__vector.last P3_1__delete_elements__vector1.vector1) (P3_1__delete_elements__S22b.first temp___expr_289) (P3_1__delete_elements__S22b.last temp___expr_289)) /\ ( ((P3_1__delete_elements__S22b.first temp___expr_289) = (P3_1__vector.first P3_1__delete_elements__vector1.vector1)) /\ ((P3_1__delete_elements__S22b.last temp___expr_289) = (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_289 : P3_1__delete_elements__S22b.s22b) (temp___is_init_285 : bool) (temp___skip_constant_286 : bool) (temp___do_toplevel_287 : bool) (temp___do_typ_inv_288 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_289 : P3_1__delete_elements__S22b.s22b) (temp___is_init_285 : bool) (temp___skip_constant_286 : bool) (temp___do_toplevel_287 : bool) (temp___do_typ_inv_288 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_291 : P3_1__delete_elements__S22b.s22b) (temp___skip_top_level_292 : bool) =
  ( ( true /\ ((P3_1__delete_elements__S22b.first temp___expr_291) = (P3_1__vector.first P3_1__delete_elements__vector1.vector1)) )/\((P3_1__delete_elements__S22b.last temp___expr_291) = (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_291 : P3_1__delete_elements__S22b.s22b) (temp___skip_top_level_292 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_291 : P3_1__delete_elements__S22b.s22b) (temp___skip_top_level_292 : bool) }

end

(* Module giving axioms for type "TTaux_vectorSP1" defined at p3_1.adb:114, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__TTaux_vectorSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Taux_vectorS" defined at p3_1.adb:114, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__Taux_vectorS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        P3_1__delete_elements__R23b as P3_1__delete_elements__R23b
 use        P3_1__delete_elements__Taux_vectorS as P3_1__delete_elements__Taux_vectorS

 predicate dynamic_invariant [@inline] 
   (temp___expr_299 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___is_init_295 : bool) (temp___skip_constant_296 : bool) (temp___do_toplevel_297 : bool) (temp___do_typ_inv_298 : bool) =
  (if (temp___skip_constant_296) then (
   true) else (
   ( (P3_1__delete_elements__Taux_vectorS.dynamic_property (0 : int) P3_1__delete_elements__R23b.r23b (P3_1__delete_elements__Taux_vectorS.first temp___expr_299) (P3_1__delete_elements__Taux_vectorS.last temp___expr_299)) /\ ( ((P3_1__delete_elements__Taux_vectorS.first temp___expr_299) = (0 : int)) /\ ((P3_1__delete_elements__Taux_vectorS.last temp___expr_299) = P3_1__delete_elements__R23b.r23b) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_299 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___is_init_295 : bool) (temp___skip_constant_296 : bool) (temp___do_toplevel_297 : bool) (temp___do_typ_inv_298 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_299 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___is_init_295 : bool) (temp___skip_constant_296 : bool) (temp___do_toplevel_297 : bool) (temp___do_typ_inv_298 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_301 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___skip_top_level_302 : bool) =
  ( ( true /\ ((P3_1__delete_elements__Taux_vectorS.first temp___expr_301) = (0 : int)) )/\((P3_1__delete_elements__Taux_vectorS.last temp___expr_301) = P3_1__delete_elements__R23b.r23b) )
 val default_initial_assumption [@inline] 
   (temp___expr_301 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___skip_top_level_302 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_301 : P3_1__delete_elements__Taux_vectorS.taux_vectorS) (temp___skip_top_level_302 : bool) }

end

(* Module giving axioms for type "T24b" defined at p3_1.adb:114, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at p3_1.adb:114, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27b" defined at p3_1.adb:118, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28b" defined at p3_1.adb:118, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at p3_1.adb:120, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_1__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36b" defined at p3_1.adb:131, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_1__L35b__T36b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32b" defined at p3_1.adb:131, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_1__L31b__T32b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38b" defined at p3_1.adb:133, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_1__L37b__T38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T34b" defined at p3_1.adb:133, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__delete_elements__L_1__L33b__T34b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS40bP1" defined at p3_1.adb:138, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__TS40bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S40b" defined at p3_1.adb:138, created in Gnat2Why.Types.Generate_Type_Completion *)
module P3_1__count_lower_elements__S40b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__vector as P3_1__vector
 use        P3_1__count_lower_elements__vector1 as P3_1__count_lower_elements__vector1
 use        P3_1__count_lower_elements__S40b as P3_1__count_lower_elements__S40b

 predicate dynamic_invariant [@inline] 
   (temp___expr_309 : P3_1__count_lower_elements__S40b.s40b) (temp___is_init_305 : bool) (temp___skip_constant_306 : bool) (temp___do_toplevel_307 : bool) (temp___do_typ_inv_308 : bool) =
  (if (temp___skip_constant_306) then (
   true) else (
   ( (P3_1__count_lower_elements__S40b.dynamic_property (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1) (P3_1__count_lower_elements__S40b.first temp___expr_309) (P3_1__count_lower_elements__S40b.last temp___expr_309)) /\ ( ((P3_1__count_lower_elements__S40b.first temp___expr_309) = (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1)) /\ ((P3_1__count_lower_elements__S40b.last temp___expr_309) = (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_309 : P3_1__count_lower_elements__S40b.s40b) (temp___is_init_305 : bool) (temp___skip_constant_306 : bool) (temp___do_toplevel_307 : bool) (temp___do_typ_inv_308 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_309 : P3_1__count_lower_elements__S40b.s40b) (temp___is_init_305 : bool) (temp___skip_constant_306 : bool) (temp___do_toplevel_307 : bool) (temp___do_typ_inv_308 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_311 : P3_1__count_lower_elements__S40b.s40b) (temp___skip_top_level_312 : bool) =
  ( ( true /\ ((P3_1__count_lower_elements__S40b.first temp___expr_311) = (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1)) )/\((P3_1__count_lower_elements__S40b.last temp___expr_311) = (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) )
 val default_initial_assumption [@inline] 
   (temp___expr_311 : P3_1__count_lower_elements__S40b.s40b) (temp___skip_top_level_312 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_311 : P3_1__count_lower_elements__S40b.s40b) (temp___skip_top_level_312 : bool) }

end

(* Module for declaring an abstract function for the aggregate at p3_1.ads:5, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_vector__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function p3_1__global_vector__aggregate_def 
   (temp___318 : int) (temp___319 : int) (temp___320 : int) (temp___321 : int) (temp___322 : int) : Array__Int__Standard__integer.map

end

(* Module for declaring an abstract function for the aggregate at p3_1.ads:6, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_inverse_vector__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function p3_1__global_inverse_vector__aggregate_def 
   (temp___326 : int) (temp___327 : int) (temp___328 : int) (temp___329 : int) (temp___330 : int) : Array__Int__Standard__integer.map

end

(* Module for defining a value for string literal  defined at p3_1.adb:93, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_335
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_335 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_335__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_335 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (5 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (7 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (8 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (9 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (11 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:103, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_336
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_336 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_336__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_336 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (9 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (10 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (11 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (12 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (14 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (15 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (16 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (18 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (19 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (20 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (21 : int))) = (40 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (22 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (23 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (24 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (25 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (26 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (27 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (28 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (29 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (30 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (31 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (32 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (33 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (34 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (35 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (36 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (37 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (38 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (39 : int))) = (41 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:101, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_337
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_337 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_337__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_337 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (20 : int))) = (50 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:99, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_338
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_338 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_338__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_338 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (1 : int))) = (72 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (14 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (15 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (17 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (18 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (20 : int))) = (49 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:97, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_339
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_339 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_339__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_339 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (4 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (5 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (6 : int))) = (112 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (8 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (9 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (11 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (12 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (14 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (15 : int))) = (110 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:95, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_340
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_340 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_340__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_340 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_340 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_340 __void_param) (2 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_340 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_340 __void_param) (4 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_340 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_340 __void_param) (6 : int))) = (108 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at p3_1.adb:105, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_341
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_341 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_341__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_341 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (2 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (5 : int))) = (114 : int)) ) ))

end

(* Module for declaring an abstract function for the aggregate at p3_1.adb:114, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__delete_elements__aux_vector__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        P3_1__delete_elements__T25b as P3_1__delete_elements__T25b

 val function p3_1__delete_elements__aux_vector__aggregate_def 
   (temp___394 : int) (temp___395 : int) (temp___396 : int) : P3_1__delete_elements__T25b.t25b

end

(* Module for declaring an abstract function for the aggregate at p3_1.adb:118, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_401
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function temp_____aggregate_def_401 
   (temp___403 : int) : Array__Int__Standard__integer.map

end
(* Module for defining the value of constant "R23b" defined at p3_1.adb:114, created in Gnat2Why.Decls.Translate_Constant_Value *)
module P3_1__delete_elements__R23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        P3_1__delete_elements__vector1 as P3_1__delete_elements__vector1
 use        P3_1__delete_elements__number as P3_1__delete_elements__number
 use        P3_1__count_lower_elements as P3_1__count_lower_elements
 use        P3_1__delete_elements__R23b as P3_1__delete_elements__R23b

 axiom r23b__def_axiom :
  ((P3_1__delete_elements__R23b.r23b ) = ((epsilon temp___result_162 : int.
   ( (temp___result_162 = (P3_1__count_lower_elements.count_lower_elements P3_1__delete_elements__vector1.vector1 P3_1__delete_elements__number.number)) /\ (P3_1__count_lower_elements.count_lower_elements__function_guard temp___result_162 P3_1__delete_elements__vector1.vector1 P3_1__delete_elements__number.number) )) - (1 : int)))

end

(* Module for declaring a program function (and possibly an axiom) for "get_max_count" defined at p3_1.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__get_max_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count as P3_1__get_max_count
 use        P3_1__vector___axiom as P3_1__vector___axiom

 val get_max_count 
   (vec1 : P3_1__vector.vector) (vec2 : P3_1__vector.vector) : int
  requires {  ( ( ( [@GP_Pretty_Ada:2982] ((P3_1__vector.length vec1) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:2988] ((P3_1__vector.length vec2) > (0 : int)) ) ) /\ ( ( [@GP_Pretty_Ada:2994] ((P3_1__vector.length vec1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3000] ((P3_1__vector.length vec2) < (1000 : int)) ) ) ) }
  ensures {  ( ( (result = (P3_1__get_max_count.get_max_count vec1 vec2)) /\ (P3_1__get_max_count.get_max_count__function_guard result vec1 vec2) )/\( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ (if (((P3_1__vector.length vec1) < (P3_1__vector.length vec2))) then (
   ( [@GP_Pretty_Ada:3015] (result = (P3_1__vector.length vec1)) )) else (
   ( [@GP_Pretty_Ada:15862] true ))) ) ) }
 
 axiom get_max_count__post_axiom :
  (forall vec1   vec2   : P3_1__vector.vector [(P3_1__get_max_count.get_max_count vec1 vec2)].
   ( ( ( (P3_1__vector___axiom.dynamic_invariant vec1 True True True True) /\ (P3_1__vector___axiom.dynamic_invariant vec2 True True True True) ) /\ ( ( ( [@GP_Pretty_Ada:2982] ((P3_1__vector.length vec1) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:2988] ((P3_1__vector.length vec2) > (0 : int)) ) ) /\ ( ( [@GP_Pretty_Ada:2994] ((P3_1__vector.length vec1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3000] ((P3_1__vector.length vec2) < (1000 : int)) ) ) ) ) -> (let result = (P3_1__get_max_count.get_max_count vec1 vec2) in (
    (if ((P3_1__get_max_count.get_max_count__function_guard result vec1 vec2)) then (
     ( ( (if (((P3_1__vector.length vec1) < (P3_1__vector.length vec2))) then (
      ( [@GP_Pretty_Ada:3015] (result = (P3_1__vector.length vec1)) )) else (
      ( [@GP_Pretty_Ada:15862] true ))) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_bood_pressure_degree" defined at p3_1.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__get_bood_pressure_degree___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        P3_1__get_bood_pressure_degree as P3_1__get_bood_pressure_degree
 use        Temp___String_Literal_173 as Temp___String_Literal_173
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_177 as Temp___String_Literal_177
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_181 as Temp___String_Literal_181
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_185 as Temp___String_Literal_185
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_189 as Temp___String_Literal_189
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_193 as Temp___String_Literal_193
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_197 as Temp___String_Literal_197
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_bood_pressure_degree 
   (systolic : int) (diastolic : int) : Standard__string.string
  requires {  ( ( ( ( [@GP_Pretty_Ada:3067] (systolic > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3071] (systolic < (2147483647 : int)) ) ) /\ ( [@GP_Pretty_Ada:3077] (diastolic > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3081] (diastolic < (2147483647 : int)) ) ) }
  ensures {  ( ( (result = (P3_1__get_bood_pressure_degree.get_bood_pressure_degree systolic diastolic)) /\ (P3_1__get_bood_pressure_degree.get_bood_pressure_degree__function_guard result systolic diastolic) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ (if (( (systolic < (80 : int)) \/ (diastolic < (60 : int)) )) then (
   ( [@GP_Pretty_Ada:3099] ( ((let temp___176 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_173.temp___String_Literal_173 ()) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___176 (1 : int) (11 : int))))
    = True) \/ (if (( ( ( (systolic > (80 : int)) /\ (systolic < (120 : int)) ) /\ (diastolic > (60 : int)) ) /\ (diastolic < (80 : int)) )) then (
    ( ((let temp___180 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_177.temp___String_Literal_177 ()) in (
     (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___180 (1 : int) (6 : int))))
     = True) \/ (if (( ( (systolic > (120 : int)) /\ (systolic < (139 : int)) ) \/ ( (diastolic > (80 : int)) /\ (diastolic < (89 : int)) ) )) then (
     ( ((let temp___184 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_181.temp___String_Literal_181 ()) in (
      (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___184 (1 : int) (15 : int))))
      = True) \/ (if (( ( (systolic > (140 : int)) /\ (systolic < (159 : int)) ) \/ ( (diastolic > (90 : int)) /\ (diastolic < (99 : int)) ) )) then (
      ( ((let temp___188 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_185.temp___String_Literal_185 ()) in (
       (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___188 (1 : int) (20 : int))))
       = True) \/ (if (( (systolic > (160 : int)) \/ (diastolic > (100 : int)) )) then (
       ( ((let temp___192 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_189.temp___String_Literal_189 ()) in (
        (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___192 (1 : int) (20 : int))))
        = True) \/ (if (( (systolic > (180 : int)) \/ (diastolic > (110 : int)) )) then (
        ((let temp___196 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_193.temp___String_Literal_193 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___196 (1 : int) (39 : int))))
         = True)) else (
        ((let temp___200 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_197.temp___String_Literal_197 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___200 (1 : int) (5 : int))))
         = True))) )) else (
       true)) )) else (
      true)) )) else (
     true)) )) else (
    true)) ) )) else (
   ( [@GP_Pretty_Ada:15925] true ))) ) ) }
 
 axiom get_bood_pressure_degree__post_axiom :
  (forall systolic   diastolic   : int [(P3_1__get_bood_pressure_degree.get_bood_pressure_degree systolic diastolic)].
   ( ( ( (Standard__integer___axiom.dynamic_invariant systolic True True True True) /\ (Standard__integer___axiom.dynamic_invariant diastolic True True True True) ) /\ ( ( ( ( [@GP_Pretty_Ada:3067] (systolic > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3071] (systolic < (2147483647 : int)) ) ) /\ ( [@GP_Pretty_Ada:3077] (diastolic > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3081] (diastolic < (2147483647 : int)) ) ) ) -> (let result = (P3_1__get_bood_pressure_degree.get_bood_pressure_degree systolic diastolic) in (
    (if ((P3_1__get_bood_pressure_degree.get_bood_pressure_degree__function_guard result systolic diastolic)) then (
     ( ( (if (( (systolic < (80 : int)) \/ (diastolic < (60 : int)) )) then (
      ( [@GP_Pretty_Ada:3099] ( ((let temp___204 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_173.temp___String_Literal_173 ()) in (
       (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___204 (1 : int) (11 : int))))
       = True) \/ (if (( ( ( (systolic > (80 : int)) /\ (systolic < (120 : int)) ) /\ (diastolic > (60 : int)) ) /\ (diastolic < (80 : int)) )) then (
       ( ((let temp___207 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_177.temp___String_Literal_177 ()) in (
        (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___207 (1 : int) (6 : int))))
        = True) \/ (if (( ( (systolic > (120 : int)) /\ (systolic < (139 : int)) ) \/ ( (diastolic > (80 : int)) /\ (diastolic < (89 : int)) ) )) then (
        ( ((let temp___210 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_181.temp___String_Literal_181 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___210 (1 : int) (15 : int))))
         = True) \/ (if (( ( (systolic > (140 : int)) /\ (systolic < (159 : int)) ) \/ ( (diastolic > (90 : int)) /\ (diastolic < (99 : int)) ) )) then (
         ( ((let temp___213 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_185.temp___String_Literal_185 ()) in (
          (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___213 (1 : int) (20 : int))))
          = True) \/ (if (( (systolic > (160 : int)) \/ (diastolic > (100 : int)) )) then (
          ( ((let temp___216 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_189.temp___String_Literal_189 ()) in (
           (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___216 (1 : int) (20 : int))))
           = True) \/ (if (( (systolic > (180 : int)) \/ (diastolic > (110 : int)) )) then (
           ((let temp___219 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_193.temp___String_Literal_193 ()) in (
            (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___219 (1 : int) (39 : int))))
            = True)) else (
           ((let temp___222 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_197.temp___String_Literal_197 ()) in (
            (Array__Int__Standard__character.bool_eq (Standard__string.to_array result) (Standard__string.first result) (Standard__string.last result) temp___222 (1 : int) (5 : int))))
            = True))) )) else (
          true)) )) else (
         true)) )) else (
        true)) )) else (
       true)) ) )) else (
      ( [@GP_Pretty_Ada:15925] true ))) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "compare_to" defined at p3_1.ads:53, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__compare_to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        P3_1__compare_to as P3_1__compare_to
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val compare_to 
   (string1 : Standard__string.string) (string2 : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (P3_1__compare_to.compare_to string1 string2)) /\ (P3_1__compare_to.compare_to__function_guard result string1 string2) )/\( [@GP_Pretty_Ada:15639] ( (result = True) <-> ((Array__Int__Standard__character.bool_eq (Standard__string.to_array string1) (Standard__string.first string1) (Standard__string.last string1) (Standard__string.to_array string2) (Standard__string.first string2) (Standard__string.last string2)) = True) ) ) ) }
 
 axiom compare_to__post_axiom :
  (forall string1   string2   : Standard__string.string [(P3_1__compare_to.compare_to string1 string2)].
   ( ( (Standard__string___axiom.dynamic_invariant string1 True True True True) /\ (Standard__string___axiom.dynamic_invariant string2 True True True True) ) -> (let result = (P3_1__compare_to.compare_to string1 string2) in (
    (if ((P3_1__compare_to.compare_to__function_guard result string1 string2)) then (
     ( ( ( [@GP_Pretty_Ada:15639] ( (result = True) <-> ((Array__Int__Standard__character.bool_eq (Standard__string.to_array string1) (Standard__string.first string1) (Standard__string.last string1) (Standard__string.to_array string2) (Standard__string.first string2) (Standard__string.last string2)) = True) ) ) /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "delete_elements" defined at p3_1.ads:58, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__delete_elements___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        P3_1__vector as P3_1__vector
 use        P3_1__delete_elements as P3_1__delete_elements
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val delete_elements 
   (vector1 : P3_1__vector.vector) (number : int) : P3_1__vector.vector
  requires {  ( ( [@GP_Pretty_Ada:3303] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3309] ((P3_1__vector.first vector1) = (0 : int)) ) ) }
  ensures {  ( ( (result = (P3_1__delete_elements.delete_elements vector1 number)) /\ (P3_1__delete_elements.delete_elements__function_guard result vector1 number) )/\( (P3_1__vector___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:15719] ( (if (((P3_1__vector.length result) = (0 : int))) then (
   (forall k   [@model_trace:3321] [@name:K]  : int.
    ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) > number) ))) else (
   true)) \/ (if (((P3_1__vector.length result) > (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) <= number) ))) else (
   true)) ) ) ) ) }
 
 axiom delete_elements__post_axiom :
  (forall vector1   : P3_1__vector.vector.
  (forall number   : int [(P3_1__delete_elements.delete_elements vector1 number)].
   ( ( ( (P3_1__vector___axiom.dynamic_invariant vector1 True True True True) /\ (Standard__integer___axiom.dynamic_invariant number True True True True) ) /\ ( ( [@GP_Pretty_Ada:3303] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3309] ((P3_1__vector.first vector1) = (0 : int)) ) ) ) -> (let result = (P3_1__delete_elements.delete_elements vector1 number) in (
    (if ((P3_1__delete_elements.delete_elements__function_guard result vector1 number)) then (
     ( ( ( [@GP_Pretty_Ada:15719] ( (if (((P3_1__vector.length result) = (0 : int))) then (
      (forall k   [@model_trace:3321] [@name:K]  : int.
       ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) > number) ))) else (
      true)) \/ (if (((P3_1__vector.length result) > (0 : int))) then (
      (exists k  : int.
       ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) <= number) ))) else (
      true)) ) ) /\ (P3_1__vector___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "count_lower_elements" defined at p3_1.ads:67, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module P3_1__count_lower_elements___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural___axiom as Standard__natural___axiom
 use        P3_1__vector as P3_1__vector
 use        P3_1__count_lower_elements as P3_1__count_lower_elements
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val count_lower_elements 
   (vector1 : P3_1__vector.vector) (number : int) : int
  requires {  ( ( [@GP_Pretty_Ada:3413] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3419] ((P3_1__vector.first vector1) = (0 : int)) ) ) }
  ensures {  ( ( (result = (P3_1__count_lower_elements.count_lower_elements vector1 number)) /\ (P3_1__count_lower_elements.count_lower_elements__function_guard result vector1 number) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:15808] ( (if (((P3_1__vector.length vector1) = (0 : int))) then (
   (result = (0 : int))) else (
   true)) \/ (if ((result <> (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) < number) ))) else (
   (forall x   [@model_trace:3457] [@name:X]  : int.
    ( ( ((P3_1__vector.first vector1) <= x) /\ (x <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) x)) >= number) )))) ) ) ) ) }
 
 axiom count_lower_elements__post_axiom :
  (forall vector1   : P3_1__vector.vector.
  (forall number   : int [(P3_1__count_lower_elements.count_lower_elements vector1 number)].
   ( ( ( (P3_1__vector___axiom.dynamic_invariant vector1 True True True True) /\ (Standard__integer___axiom.dynamic_invariant number True True True True) ) /\ ( ( [@GP_Pretty_Ada:3413] ((P3_1__vector.length vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3419] ((P3_1__vector.first vector1) = (0 : int)) ) ) ) -> (let result = (P3_1__count_lower_elements.count_lower_elements vector1 number) in (
    (if ((P3_1__count_lower_elements.count_lower_elements__function_guard result vector1 number)) then (
     ( ( ( [@GP_Pretty_Ada:15808] ( (if (((P3_1__vector.length vector1) = (0 : int))) then (
      (result = (0 : int))) else (
      true)) \/ (if ((result <> (0 : int))) then (
      (exists k  : int.
       ( ( ((P3_1__vector.first vector1) <= k) /\ (k <= (P3_1__vector.last vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) k)) < number) ))) else (
      (forall x   [@model_trace:3457] [@name:X]  : int.
       ( ( ((P3_1__vector.first vector1) <= x) /\ (x <= (P3_1__vector.last vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array vector1) x)) >= number) )))) ) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for defining the value of the aggregate at p3_1.ads:5, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_vector__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_vector__aggregate_def as P3_1__global_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___318   temp___319   temp___320   temp___321   temp___322   : int.
   (let temp___317 [@mlw:proxy_symbol] [@introduced] = (P3_1__global_vector__aggregate_def.p3_1__global_vector__aggregate_def temp___318 temp___319 temp___320 temp___321 temp___322) in (
    (if (( ( (Standard__integer___axiom.dynamic_invariant temp___318 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___319 True True True True) )/\( ( (Standard__integer___axiom.dynamic_invariant temp___320 True True True True)/\(Standard__integer___axiom.dynamic_invariant temp___321 True True True True) )/\(Standard__integer___axiom.dynamic_invariant temp___322 True True True True) ) )) then (
     ( ( ((Array__Int__Standard__integer.get temp___317 (0 : int)) = ( -1 : Standard__integer.integer )) /\ ((Array__Int__Standard__integer.get temp___317 (1 : int)) = ( -1 : Standard__integer.integer )) )/\( ( ((Array__Int__Standard__integer.get temp___317 (2 : int)) = ( -1 : Standard__integer.integer ))/\((Array__Int__Standard__integer.get temp___317 (3 : int)) = ( -1 : Standard__integer.integer )) )/\((Array__Int__Standard__integer.get temp___317 (4 : int)) = ( -1 : Standard__integer.integer )) ) )) else true)))
  )

end

(* Module for defining the value of the aggregate at p3_1.ads:6, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__global_inverse_vector__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector__aggregate_def as P3_1__global_inverse_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___326   temp___327   temp___328   temp___329   temp___330   : int.
   (let temp___325 [@mlw:proxy_symbol] [@introduced] = (P3_1__global_inverse_vector__aggregate_def.p3_1__global_inverse_vector__aggregate_def temp___326 temp___327 temp___328 temp___329 temp___330) in (
    (if (( ( (Standard__integer___axiom.dynamic_invariant temp___326 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___327 True True True True) )/\( ( (Standard__integer___axiom.dynamic_invariant temp___328 True True True True)/\(Standard__integer___axiom.dynamic_invariant temp___329 True True True True) )/\(Standard__integer___axiom.dynamic_invariant temp___330 True True True True) ) )) then (
     ( ( ((Array__Int__Standard__integer.get temp___325 (0 : int)) = ( -3 : Standard__integer.integer )) /\ ((Array__Int__Standard__integer.get temp___325 (1 : int)) = ( 5 : Standard__integer.integer )) )/\( ( ((Array__Int__Standard__integer.get temp___325 (2 : int)) = ( 9 : Standard__integer.integer ))/\((Array__Int__Standard__integer.get temp___325 (3 : int)) = ( 0 : Standard__integer.integer )) )/\((Array__Int__Standard__integer.get temp___325 (4 : int)) = ( 22 : Standard__integer.integer )) ) )) else true)))
  )

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "p3_1" defined at p3_1.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module P3_1__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_vector as P3_1__global_vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector as P3_1__global_inverse_vector
 use        P3_1__increment as P3_1__increment
 use        P3_1__vector as P3_1__vector
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        P3_1__T3s as P3_1__T3s
 use        P3_1__T5s as P3_1__T5s
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        P3_1__global_vector__aggregate_def as P3_1__global_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__global_inverse_vector__aggregate_def as P3_1__global_inverse_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__global_vector___axiom as P3_1__global_vector___axiom
 use        P3_1__global_vector__aggregate_def___axiom as P3_1__global_vector__aggregate_def___axiom
 use        P3_1__global_inverse_vector___axiom as P3_1__global_inverse_vector___axiom
 use        P3_1__global_inverse_vector__aggregate_def___axiom as P3_1__global_inverse_vector__aggregate_def___axiom
 use        P3_1__increment___axiom as P3_1__increment___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        P3_1__T3s___axiom as P3_1__T3s___axiom
 use        P3_1__T5s___axiom as P3_1__T5s___axiom

 let def [#"p3_1.ads" 1 0 0][@GP_Subp:p3_1.ads:1] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 1 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"p3_1.ads" 1 0 0] ());
  ([#"p3_1.ads" 2 0 0] ());
  ([#"p3_1.ads" 3 0 0] ());
  ([#"p3_1.ads" 5 0 0] ());
  ([#"p3_1.ads" 5 0 0] ( (let p3_1__global_vector__assume = (P3_1__vector.of_array((P3_1__global_vector__aggregate_def.p3_1__global_vector__aggregate_def((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int)) ((( -1) : int)))) (P3_1__T3s.first) (P3_1__T3s.last)) in (
   ( [#"p3_1.ads" 5 0 0] (P3_1__global_vector.global_vector.Array__Int__Standard__integer.map__content <- ( (P3_1__vector.to_array(p3_1__global_vector__assume)) ));
   [#"p3_1.ads" 5 0 0] assume { [#"p3_1.ads" 5 0 0] ((Standard__integer__rep.to_rep(P3_1__global_vector.global_vector__first)) = (P3_1__vector.first(p3_1__global_vector__assume))) };
   [#"p3_1.ads" 5 0 0] assume { [#"p3_1.ads" 5 0 0] ((Standard__integer__rep.to_rep(P3_1__global_vector.global_vector__last)) = (P3_1__vector.last(p3_1__global_vector__assume))) } )))
  ;
  [#"p3_1.ads" 5 0 0] assume { [#"p3_1.ads" 5 0 0] (if (False) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__first) (Standard__integer__rep.to_rep P3_1__global_vector.global_vector__last)))) } ));
  ([#"p3_1.ads" 6 0 0] ( (let p3_1__global_inverse_vector__assume = (P3_1__vector.of_array((P3_1__global_inverse_vector__aggregate_def.p3_1__global_inverse_vector__aggregate_def((( -3) : int)) ((5 : int)) ((9 : int)) ((0 : int)) ((22 : int)))) (P3_1__T5s.first) (P3_1__T5s.last)) in (
   ( [#"p3_1.ads" 6 0 0] (P3_1__global_inverse_vector.global_inverse_vector.Array__Int__Standard__integer.map__content <- ( (P3_1__vector.to_array(p3_1__global_inverse_vector__assume)) ));
   [#"p3_1.ads" 6 0 0] assume { [#"p3_1.ads" 6 0 0] ((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__first)) = (P3_1__vector.first(p3_1__global_inverse_vector__assume))) };
   [#"p3_1.ads" 6 0 0] assume { [#"p3_1.ads" 6 0 0] ((Standard__integer__rep.to_rep(P3_1__global_inverse_vector.global_inverse_vector__last)) = (P3_1__vector.last(p3_1__global_inverse_vector__assume))) } )))
  ;
  [#"p3_1.ads" 6 0 0] assume { [#"p3_1.ads" 6 0 0] (if (False) then (
   true) else (
   (P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__first) (Standard__integer__rep.to_rep P3_1__global_inverse_vector.global_inverse_vector__last)))) } ));
  ([#"p3_1.ads" 7 0 0] ( [#"p3_1.ads" 7 0 0] (P3_1__increment.increment.int__content <- ( (1 : int) ));
  [#"p3_1.ads" 7 0 0] assume { [#"p3_1.ads" 7 0 0] (Standard__integer___axiom.dynamic_invariant P3_1__increment.increment.int__content True False True True) } ));
  ([#"p3_1.ads" 29 0 0] ());
  ([#"p3_1.ads" 33 0 0] ());
  ([#"p3_1.ads" 32 0 0] ());
  ([#"p3_1.ads" 31 0 0] ());
  ([#"p3_1.ads" 30 0 0] ());
  ([#"p3_1.ads" 35 0 0] ());
  ([#"p3_1.ads" 39 0 0] ());
  ([#"p3_1.ads" 38 0 0] ());
  ([#"p3_1.ads" 37 0 0] ());
  ([#"p3_1.ads" 36 0 0] ());
  ([#"p3_1.ads" 53 0 0] ());
  ([#"p3_1.ads" 56 0 0] ());
  ([#"p3_1.ads" 55 0 0] ());
  ([#"p3_1.ads" 54 0 0] ());
  ([#"p3_1.ads" 58 0 0] ());
  ([#"p3_1.ads" 62 0 0] ());
  ([#"p3_1.ads" 61 0 0] ());
  ([#"p3_1.ads" 60 0 0] ());
  ([#"p3_1.ads" 59 0 0] ());
  ([#"p3_1.ads" 67 0 0] ());
  ([#"p3_1.ads" 71 0 0] ());
  ([#"p3_1.ads" 70 0 0] ());
  ([#"p3_1.ads" 69 0 0] ());
  ([#"p3_1.ads" 68 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"p3_1.adb" 6 0 0] ());
  ([#"p3_1.adb" 82 0 0] ());
  ([#"p3_1.adb" 90 0 0] ());
  ([#"p3_1.adb" 108 0 0] ());
  ([#"p3_1.adb" 113 0 0] ());
  ([#"p3_1.adb" 138 0 0] ());
  ();
  ( [@GP_Sloc:p3_1.adb:154:1] ([#"p3_1.adb" 154 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_max_count" defined at p3_1.ads:29, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__get_max_count__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        P3_1__vector as P3_1__vector
 use        P3_1__get_max_count__vec1 as P3_1__get_max_count__vec1
 use        P3_1__get_max_count__vec2 as P3_1__get_max_count__vec2
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__get_max_count__vec1___axiom as P3_1__get_max_count__vec1___axiom
 use        P3_1__get_max_count__vec2___axiom as P3_1__get_max_count__vec2___axiom

 val p3_1__get_max_count__result [@model_projected] [@model_trace:2932@result] [@name:Get_Max_Count]  : int__ref 
 
 let def [#"p3_1.ads" 29 0 0][@GP_Subp:p3_1.ads:29] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 29 0 0] true }
  ensures { [#"p3_1.ads" 29 0 0] ([#"p3_1.ads" 33 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (if vec1'Length < vec2'Length then Get_Max_Count'Result = vec1'Length);              ^ p3_1.ads:33:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:p3_1.ads:33:14] [@GP_Id:3] [@GP_Shape:pragargs__if] (if (((P3_1__vector.length P3_1__get_max_count__vec1.vec1) < (P3_1__vector.length P3_1__get_max_count__vec2.vec2))) then (
   ( [@GP_Sloc:p3_1.ads:33:49] [@GP_Pretty_Ada:3015] (p3_1__get_max_count__result.int__content = (P3_1__vector.length P3_1__get_max_count__vec1.vec1)) )) else (
   ( [@GP_Pretty_Ada:15862] [@GP_Sloc:p3_1.ads:33:15] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:29 *)
  ;
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__get_max_count__vec1.vec1 True False True True) };
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__get_max_count__vec2.vec2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:29 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:29 *)
  ;
   begin ensures {true} let _ = (let _ = ( (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) > (0 : int))) (((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ) > (0 : int)))) && (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) < (1000 : int))) (((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ) < (1000 : int)))) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:29 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:2982] ((P3_1__vector.length P3_1__get_max_count__vec1.vec1) > (0 : int)) ) /\ ( [@GP_Pretty_Ada:2988] ((P3_1__vector.length P3_1__get_max_count__vec2.vec2) > (0 : int)) ) ) /\ ( ( [@GP_Pretty_Ada:2994] ((P3_1__vector.length P3_1__get_max_count__vec1.vec1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3000] ((P3_1__vector.length P3_1__get_max_count__vec2.vec2) < (1000 : int)) ) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 82 0 0] ());
   ([#"p3_1.adb" 82 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:84:7] ([#"p3_1.adb" 84 0 0] (if (( ([#"p3_1.adb" 84 0 0] [#"p3_1.adb" 84 0 0] (([@branch_id=2367] Main.spark__branch).bool__content <- ( (( [#"p3_1.adb" 84 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) < ( [#"p3_1.adb" 84 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) )) )));
   ( [@branch_id=2367] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:p3_1.adb:85:10] ([#"p3_1.adb" 85 0 0] ( [#"p3_1.adb" 85 0 0] (p3_1__get_max_count__result.int__content <- ( ([#"p3_1.adb" 85 0 0] ( [@comment:         return vec1'Length;                     ^ p3_1.adb:85:21:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:if__return__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:p3_1.adb:85:21] [@GP_Id:0] (Standard__integer.range_check_(( [#"p3_1.adb" 85 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
     ()))
     in () end ;
    (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ))) )) ));
     raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:p3_1.adb:87:7] ([#"p3_1.adb" 87 0 0] ( [#"p3_1.adb" 87 0 0] (p3_1__get_max_count__result.int__content <- ( ([#"p3_1.adb" 87 0 0] ( [@comment:      return vec2'Length;                  ^ p3_1.adb:87:18:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:return__typeconv__length_ref] [@GP_Sloc:p3_1.adb:87:18] [@GP_Id:1] (Standard__integer.range_check_(( [#"p3_1.adb" 87 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ))) )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (((  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ) < (  begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec2.vec2 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__get_max_count__vec2.vec2)) ))) then (
   (p3_1__get_max_count__result.int__content = ([#"p3_1.ads" 33 0 0] ( [@GP_Sloc:p3_1.ads:33:76] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Post => (if vec1'Length < vec2'Length then Get_Max_Count'Result = vec1'Length);                                                                            ^ p3_1.ads:33:76:VC_RANGE_CHECK] [@GP_Shape:pragargs__if__cmp__typeconv__length_ref] [@GP_Id:2] (Standard__integer.range_check_(( [#"p3_1.ads" 33 0 0] begin ensures {true} let _ = (let _ = P3_1__get_max_count__vec1.vec1 in (
    ()))
    in () end ;
   (P3_1__vector.length(P3_1__get_max_count__vec1.vec1)) ))) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  p3_1__get_max_count__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_bood_pressure_degree" defined at p3_1.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__get_bood_pressure_degree__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        P3_1__get_bood_pressure_degree__systolic as P3_1__get_bood_pressure_degree__systolic
 use        P3_1__get_bood_pressure_degree__diastolic as P3_1__get_bood_pressure_degree__diastolic
 use        Temp___String_Literal_173 as Temp___String_Literal_173
 use        Temp___String_Literal_177 as Temp___String_Literal_177
 use        Temp___String_Literal_181 as Temp___String_Literal_181
 use        Temp___String_Literal_185 as Temp___String_Literal_185
 use        Temp___String_Literal_189 as Temp___String_Literal_189
 use        Temp___String_Literal_193 as Temp___String_Literal_193
 use        Temp___String_Literal_197 as Temp___String_Literal_197
 use        Temp___String_Literal_335 as Temp___String_Literal_335
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_336 as Temp___String_Literal_336
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_337 as Temp___String_Literal_337
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_338 as Temp___String_Literal_338
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_339 as Temp___String_Literal_339
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_340 as Temp___String_Literal_340
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_341 as Temp___String_Literal_341
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__get_bood_pressure_degree__systolic___axiom as P3_1__get_bood_pressure_degree__systolic___axiom
 use        P3_1__get_bood_pressure_degree__diastolic___axiom as P3_1__get_bood_pressure_degree__diastolic___axiom

 val p3_1__get_bood_pressure_degree__result [@name:Get_Bood_Pressure_Degree] [@model_trace:3019@result] [@model_projected]  : Standard__string.string__ref 
 
 let def [#"p3_1.ads" 35 0 0][@GP_Subp:p3_1.ads:35] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 35 0 0] true }
  ensures { [#"p3_1.ads" 35 0 0] ([#"p3_1.ads" 39 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:p3_1.ads:39:14] [@model_vc_post] [@GP_Id:4] [@GP_Shape:pragargs__if] [@comment:     Post => (if systolic < 80 or diastolic < 60 then              ^ p3_1.ads:39:14:VC_POSTCONDITION] (if (( (P3_1__get_bood_pressure_degree__systolic.systolic < (80 : int)) \/ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (60 : int)) )) then (
   ( [@GP_Pretty_Ada:3099] [@GP_Sloc:p3_1.ads:40:17] ( ((let temp___366 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_173.temp___String_Literal_173 ()) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___366 (1 : int) (11 : int))))
    = True) \/ (if (( ( ( (P3_1__get_bood_pressure_degree__systolic.systolic > (80 : int)) /\ (P3_1__get_bood_pressure_degree__systolic.systolic < (120 : int)) ) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic > (60 : int)) ) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (80 : int)) )) then (
    ( ((let temp___369 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_177.temp___String_Literal_177 ()) in (
     (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___369 (1 : int) (6 : int))))
     = True) \/ (if (( ( (P3_1__get_bood_pressure_degree__systolic.systolic > (120 : int)) /\ (P3_1__get_bood_pressure_degree__systolic.systolic < (139 : int)) ) \/ ( (P3_1__get_bood_pressure_degree__diastolic.diastolic > (80 : int)) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (89 : int)) ) )) then (
     ( ((let temp___372 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_181.temp___String_Literal_181 ()) in (
      (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___372 (1 : int) (15 : int))))
      = True) \/ (if (( ( (P3_1__get_bood_pressure_degree__systolic.systolic > (140 : int)) /\ (P3_1__get_bood_pressure_degree__systolic.systolic < (159 : int)) ) \/ ( (P3_1__get_bood_pressure_degree__diastolic.diastolic > (90 : int)) /\ (P3_1__get_bood_pressure_degree__diastolic.diastolic < (99 : int)) ) )) then (
      ( ((let temp___375 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_185.temp___String_Literal_185 ()) in (
       (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___375 (1 : int) (20 : int))))
       = True) \/ (if (( (P3_1__get_bood_pressure_degree__systolic.systolic > (160 : int)) \/ (P3_1__get_bood_pressure_degree__diastolic.diastolic > (100 : int)) )) then (
       ( ((let temp___378 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_189.temp___String_Literal_189 ()) in (
        (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___378 (1 : int) (20 : int))))
        = True) \/ (if (( (P3_1__get_bood_pressure_degree__systolic.systolic > (180 : int)) \/ (P3_1__get_bood_pressure_degree__diastolic.diastolic > (110 : int)) )) then (
        ((let temp___381 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_193.temp___String_Literal_193 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___381 (1 : int) (39 : int))))
         = True)) else (
        ((let temp___384 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_197.temp___String_Literal_197 ()) in (
         (Array__Int__Standard__character.bool_eq (Standard__string.to_array p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.first p3_1__get_bood_pressure_degree__result.Standard__string.string__content) (Standard__string.last p3_1__get_bood_pressure_degree__result.Standard__string.string__content) temp___384 (1 : int) (5 : int))))
         = True))) )) else (
       true)) )) else (
      true)) )) else (
     true)) )) else (
    true)) ) )) else (
   ( [@GP_Sloc:p3_1.ads:39:15] [@GP_Pretty_Ada:15925] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:35 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__get_bood_pressure_degree__systolic.systolic True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__get_bood_pressure_degree__diastolic.diastolic True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:35 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:35 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (0 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (2147483647 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (0 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (2147483647 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:35 *)
  ;
   assume {  ( ( ( ( [@GP_Pretty_Ada:3067] (P3_1__get_bood_pressure_degree__systolic.systolic > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3071] (P3_1__get_bood_pressure_degree__systolic.systolic < (2147483647 : int)) ) ) /\ ( [@GP_Pretty_Ada:3077] (P3_1__get_bood_pressure_degree__diastolic.diastolic > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3081] (P3_1__get_bood_pressure_degree__diastolic.diastolic < (2147483647 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:p3_1.adb:92:7] ([#"p3_1.adb" 92 0 0] (if (( ([#"p3_1.adb" 92 0 0] [#"p3_1.adb" 92 0 0] (([@branch_id=2412] Main.spark__branch).bool__content <- ( (Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic < (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (60 : int)))) )));
   ( [@branch_id=2412] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:p3_1.adb:93:10] ([#"p3_1.adb" 93 0 0] ( [#"p3_1.adb" 93 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_335.temp___String_Literal_335(()))) ((1 : int)) ((11 : int))) ));
    [#"p3_1.adb" 93 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:p3_1.adb:94:7] (if (( ([#"p3_1.adb" 94 0 0] [#"p3_1.adb" 94 0 0] (([@branch_id=2423] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.andb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (80 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (120 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (60 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (80 : int)))) )));
    ( [@branch_id=2423] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:p3_1.adb:95:10] ([#"p3_1.adb" 95 0 0] ( [#"p3_1.adb" 95 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_340.temp___String_Literal_340(()))) ((1 : int)) ((6 : int))) ));
     [#"p3_1.adb" 95 0 0] raise Return__exc )) ) )) else (
     ( [@GP_Sloc:p3_1.adb:96:7] (if (( ([#"p3_1.adb" 96 0 0] [#"p3_1.adb" 96 0 0] (([@branch_id=2440] Main.spark__branch).bool__content <- ( (Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (120 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (139 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (89 : int)))))) )));
     ( [@branch_id=2440] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:p3_1.adb:97:10] ([#"p3_1.adb" 97 0 0] ( [#"p3_1.adb" 97 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_339.temp___String_Literal_339(()))) ((1 : int)) ((15 : int))) ));
      [#"p3_1.adb" 97 0 0] raise Return__exc )) ) )) else (
      ( [@GP_Sloc:p3_1.adb:98:7] (if (( ([#"p3_1.adb" 98 0 0] [#"p3_1.adb" 98 0 0] (([@branch_id=2458] Main.spark__branch).bool__content <- ( (Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (140 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (159 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (90 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (99 : int)))))) )));
      ( [@branch_id=2458] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:p3_1.adb:99:10] ([#"p3_1.adb" 99 0 0] ( [#"p3_1.adb" 99 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_338.temp___String_Literal_338(()))) ((1 : int)) ((20 : int))) ));
       [#"p3_1.adb" 99 0 0] raise Return__exc )) ) )) else (
       ( [@GP_Sloc:p3_1.adb:100:7] (if (( ([#"p3_1.adb" 100 0 0] [#"p3_1.adb" 100 0 0] (([@branch_id=2477] Main.spark__branch).bool__content <- ( (Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (160 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (100 : int)))) )));
       ( [@branch_id=2477] Main.spark__branch ).bool__content )) then (
        ( ();
        ( [@GP_Sloc:p3_1.adb:101:10] ([#"p3_1.adb" 101 0 0] ( [#"p3_1.adb" 101 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_337.temp___String_Literal_337(()))) ((1 : int)) ((20 : int))) ));
        [#"p3_1.adb" 101 0 0] raise Return__exc )) ) )) else (
        ( [@GP_Sloc:p3_1.adb:102:7] (if (( ([#"p3_1.adb" 102 0 0] [#"p3_1.adb" 102 0 0] (([@branch_id=2487] Main.spark__branch).bool__content <- ( (Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (180 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (110 : int)))) )));
        ( [@branch_id=2487] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:p3_1.adb:103:10] ([#"p3_1.adb" 103 0 0] ( [#"p3_1.adb" 103 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_336.temp___String_Literal_336(()))) ((1 : int)) ((39 : int))) ));
         [#"p3_1.adb" 103 0 0] raise Return__exc )) ) )) else (
         ())) ))) ))) ))) ))) )))) );
   ( [@GP_Sloc:p3_1.adb:105:7] ([#"p3_1.adb" 105 0 0] ( [#"p3_1.adb" 105 0 0] (p3_1__get_bood_pressure_degree__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_341.temp___String_Literal_341(()))) ((1 : int)) ((5 : int))) ));
   [#"p3_1.adb" 105 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if ((Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic < (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (60 : int))))) then (
   (Boolean.orb((let temp___345 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_173.temp___String_Literal_173(())) in (
    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___345) ((1 : int)) ((11 : int)))))
   ) ((if ((Boolean.andb((Boolean.andb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (80 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (120 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (60 : int))))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (80 : int))))) then (
    (Boolean.orb((let temp___348 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_177.temp___String_Literal_177(())) in (
     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___348) ((1 : int)) ((6 : int)))))
    ) ((if ((Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (120 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (139 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (80 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (89 : int))))))) then (
     (Boolean.orb((let temp___351 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_181.temp___String_Literal_181(())) in (
      (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___351) ((1 : int)) ((15 : int)))))
     ) ((if ((Boolean.orb((Boolean.andb((P3_1__get_bood_pressure_degree__systolic.systolic > (140 : int))) ((P3_1__get_bood_pressure_degree__systolic.systolic < (159 : int))))) ((Boolean.andb((P3_1__get_bood_pressure_degree__diastolic.diastolic > (90 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic < (99 : int))))))) then (
      (Boolean.orb((let temp___354 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_185.temp___String_Literal_185(())) in (
       (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___354) ((1 : int)) ((20 : int)))))
      ) ((if ((Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (160 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (100 : int))))) then (
       (Boolean.orb((let temp___357 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_189.temp___String_Literal_189(())) in (
        (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___357) ((1 : int)) ((20 : int)))))
       ) ((if ((Boolean.orb((P3_1__get_bood_pressure_degree__systolic.systolic > (180 : int))) ((P3_1__get_bood_pressure_degree__diastolic.diastolic > (110 : int))))) then (
        (let temp___360 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_193.temp___String_Literal_193(())) in (
         (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___360) ((1 : int)) ((39 : int)))))
       ) else (
        (let temp___363 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_197.temp___String_Literal_197(())) in (
         (Array__Int__Standard__character.bool_eq((Standard__string.to_array(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.first(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) ((Standard__string.last(p3_1__get_bood_pressure_degree__result.Standard__string.string__content))) (temp___363) ((1 : int)) ((5 : int)))))
       ))))) else (
       (Boolean.of_int((1 : int)))))))) else (
      (Boolean.of_int((1 : int)))))))) else (
     (Boolean.of_int((1 : int)))))))) else (
    (Boolean.of_int((1 : int)))))))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  p3_1__get_bood_pressure_degree__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "compare_to" defined at p3_1.ads:53, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__compare_to__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        P3_1__compare_to__string1 as P3_1__compare_to__string1
 use        P3_1__compare_to__string2 as P3_1__compare_to__string2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__compare_to__string1___axiom as P3_1__compare_to__string1___axiom
 use        P3_1__compare_to__string2___axiom as P3_1__compare_to__string2___axiom

 val p3_1__compare_to__result [@name:Compare_To] [@model_projected] [@model_trace:3199@result]  : bool__ref 
 
 let def [#"p3_1.ads" 53 0 0][@GP_Subp:p3_1.ads:53] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 53 0 0] true }
  ensures { [#"p3_1.ads" 53 0 0] ([#"p3_1.ads" 56 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:p3_1.ads:56:14] [@GP_Shape:pragargs__cmp] [@comment:     Post => Compare_To'Result = (String1 = String2);              ^ p3_1.ads:56:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:5] ( [@GP_Sloc:p3_1.ads:56:14] [@GP_Pretty_Ada:15639] ( (p3_1__compare_to__result.bool__content = True) <-> ((Array__Int__Standard__character.bool_eq (Standard__string.to_array P3_1__compare_to__string1.string1) (Standard__string.first P3_1__compare_to__string1.string1) (Standard__string.last P3_1__compare_to__string1.string1) (Standard__string.to_array P3_1__compare_to__string2.string2) (Standard__string.first P3_1__compare_to__string2.string2) (Standard__string.last P3_1__compare_to__string2.string2)) = True) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:53 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant P3_1__compare_to__string1.string1 True False True True) };
   assume {  (Standard__string___axiom.dynamic_invariant P3_1__compare_to__string2.string2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:53 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:53 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:53 *)
  ;
   try
   ( ();
   ([#"p3_1.adb" 108 0 0] ());
   ([#"p3_1.adb" 108 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:110:7] ([#"p3_1.adb" 110 0 0] ( [#"p3_1.adb" 110 0 0] (p3_1__compare_to__result.bool__content <- ( (Array__Int__Standard__character.bool_eq((Standard__string.to_array(P3_1__compare_to__string1.string1))) ((Standard__string.first(P3_1__compare_to__string1.string1))) ((Standard__string.last(P3_1__compare_to__string1.string1))) ((Standard__string.to_array(P3_1__compare_to__string2.string2))) ((Standard__string.first(P3_1__compare_to__string2.string2))) ((Standard__string.last(P3_1__compare_to__string2.string2)))) ));
   [#"p3_1.adb" 110 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Boolean.to_int(p3_1__compare_to__result.bool__content)) = (Boolean.to_int((Array__Int__Standard__character.bool_eq((Standard__string.to_array(P3_1__compare_to__string1.string1))) ((Standard__string.first(P3_1__compare_to__string1.string1))) ((Standard__string.last(P3_1__compare_to__string1.string1))) ((Standard__string.to_array(P3_1__compare_to__string2.string2))) ((Standard__string.first(P3_1__compare_to__string2.string2))) ((Standard__string.last(P3_1__compare_to__string2.string2))))))) in (
   ()))
   in () end ;
  p3_1__compare_to__result.bool__content )
end

(* Module for defining the value of the aggregate at p3_1.adb:114, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module P3_1__delete_elements__aux_vector__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        P3_1__vector as P3_1__vector
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__delete_elements__T25b as P3_1__delete_elements__T25b
 use        P3_1__delete_elements__aux_vector__aggregate_def as P3_1__delete_elements__aux_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___394   temp___395   temp___396   : int.
   (let temp___393 [@mlw:proxy_symbol] [@introduced] = (P3_1__delete_elements__aux_vector__aggregate_def.p3_1__delete_elements__aux_vector__aggregate_def temp___394 temp___395 temp___396) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___394 True True True True)) then (
     ( (if ((P3_1__vector.dynamic_property Standard__natural.first Standard__natural.last temp___395 temp___396)) then (
      ( ((P3_1__delete_elements__T25b.first temp___393) = temp___395) /\ ((P3_1__delete_elements__T25b.last temp___393) = temp___396) )) else true) /\ (forall temp___397   : int.
      ((Array__Int__Standard__integer.get (P3_1__delete_elements__T25b.to_array temp___393) temp___397) = ( 0 : Standard__integer.integer ))) )) else true)))
  )

end

(* Module for defining the value of the aggregate at p3_1.adb:118, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_401___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_401 as Temp_____aggregate_def_401
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___403   : int.
   (let temp___402 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_401.temp_____aggregate_def_401 temp___403) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___403 True True True True)) then (
     ((Array__Int__Standard__integer.get temp___402 (1 : int)) = ( 0 : Standard__integer.integer ))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "delete_elements" defined at p3_1.ads:58, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__delete_elements__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        P3_1__vector as P3_1__vector
 use        P3_1__delete_elements__vector1 as P3_1__delete_elements__vector1
 use        P3_1__delete_elements__number as P3_1__delete_elements__number
 use        P3_1__count_lower_elements___axiom as P3_1__count_lower_elements___axiom
 use        P3_1__delete_elements__R23b as P3_1__delete_elements__R23b
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__delete_elements__aux_vector as P3_1__delete_elements__aux_vector
 use        P3_1__delete_elements__j as P3_1__delete_elements__j
 use        P3_1__delete_elements__L_1__i as P3_1__delete_elements__L_1__i
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__delete_elements__Taux_vectorS as P3_1__delete_elements__Taux_vectorS
 use        P3_1__delete_elements__T25b as P3_1__delete_elements__T25b
 use        P3_1__delete_elements__T27b as P3_1__delete_elements__T27b
 use        P3_1__delete_elements__L_1 as P3_1__delete_elements__L_1
 use        P3_1__delete_elements__L_1__T29b as P3_1__delete_elements__L_1__T29b
 use        P3_1__delete_elements__aux_vector__aggregate_def as P3_1__delete_elements__aux_vector__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp_____aggregate_def_401 as Temp_____aggregate_def_401
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__delete_elements__aux_vector___axiom as P3_1__delete_elements__aux_vector___axiom
 use        P3_1__delete_elements__aux_vector__aggregate_def___axiom as P3_1__delete_elements__aux_vector__aggregate_def___axiom
 use        P3_1__delete_elements__j___axiom as P3_1__delete_elements__j___axiom
 use        Temp_____aggregate_def_401___axiom as Temp_____aggregate_def_401___axiom
 use        P3_1__delete_elements__L_1__i___axiom as P3_1__delete_elements__L_1__i___axiom
 use        P3_1__delete_elements__L_1___axiom as P3_1__delete_elements__L_1___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__delete_elements__vector1___axiom as P3_1__delete_elements__vector1___axiom
 use        P3_1__delete_elements__number___axiom as P3_1__delete_elements__number___axiom
 use        P3_1__count_lower_elements___axiom as P3_1__count_lower_elements___axiom
 use        P3_1__delete_elements__Taux_vectorS___axiom as P3_1__delete_elements__Taux_vectorS___axiom
 use        P3_1__delete_elements__R23b___axiom as P3_1__delete_elements__R23b___axiom
 use        P3_1__delete_elements__T25b___axiom as P3_1__delete_elements__T25b___axiom
 use        P3_1__delete_elements__T27b___axiom as P3_1__delete_elements__T27b___axiom
 use        P3_1__delete_elements__L_1__T29b___axiom as P3_1__delete_elements__L_1__T29b___axiom

 val p3_1__delete_elements__result [@name:Delete_Elements] [@model_projected] [@model_trace:3252@result]  : P3_1__vector.vector__ref 
 
 exception Temp___exception_407
 
 let def [#"p3_1.ads" 58 0 0][@GP_Subp:p3_1.ads:58] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 58 0 0] true }
  ensures { [#"p3_1.ads" 58 0 0] ([#"p3_1.ads" 62 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:17] [@comment:     Post => (if Delete_Elements'Result'Length = 0 then              ^ p3_1.ads:62:14:VC_POSTCONDITION] [@GP_Shape:pragargs__or] [@GP_Sloc:p3_1.ads:62:14] [@model_vc_post] ( [@GP_Sloc:p3_1.ads:62:14] [@GP_Pretty_Ada:15719] ( (if (((P3_1__vector.length p3_1__delete_elements__result.P3_1__vector.vector__content) = (0 : int))) then (
   (forall k [#"p3_1.ads" 62 0 0]  [@model_trace:3321] [@name:K]  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) ))) else (
   true)) \/ (if (((P3_1__vector.length p3_1__delete_elements__result.P3_1__vector.vector__content) > (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) ))) else (
   true)) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:58 *)
  ;
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__delete_elements__vector1.vector1 True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__delete_elements__number.number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:58 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:58 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__delete_elements__vector1.vector1)) ) < (1000 : int)) && ((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:58 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3303] ((P3_1__vector.length P3_1__delete_elements__vector1.vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3309] ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) = (0 : int)) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 113 0 0] ());
   ([#"p3_1.adb" 114 0 0] ());
   ([#"p3_1.adb" 114 0 0] ( (let p3_1__delete_elements__R23b__assume = (([#"p3_1.adb" 114 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:      Aux_Vector : Vector (0..(Count_Lower_Elements(Vector1, Number)-1)) := (others => 0);                                ^ p3_1.adb:114:32:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:R23b_decl__sub__call_count_lower_elements] [@GP_Sloc:p3_1.adb:114:32] [@GP_Id:6] (P3_1__count_lower_elements___axiom.count_lower_elements(P3_1__delete_elements__vector1.vector1) (P3_1__delete_elements__number.number)) )) - (1 : int)) in (
     assume {  (p3_1__delete_elements__R23b__assume = P3_1__delete_elements__R23b.r23b) }))
   ;
    assume {  (Standard__integer___axiom.dynamic_invariant P3_1__delete_elements__R23b.r23b True False True True) } ));
   ([#"p3_1.adb" 114 0 0] ( [#"p3_1.adb" 114 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__R23b.r23b in (
    ()))
    in () end ;
   ([#"p3_1.adb" 114 0 0] [#"p3_1.adb" 114 0 0] (val _f : unit
   requires {( [@vc:annotation] [@comment:      Aux_Vector : Vector (0..(Count_Lower_Elements(Vector1, Number)-1)) := (others => 0);       ^ p3_1.adb:114:7:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:7] [@GP_Sloc:p3_1.adb:114:7] [#"p3_1.adb" 114 0 0] ( ((0 : int) <= P3_1__delete_elements__R23b.r23b) -> ( ((0 : int) >= Standard__natural.first) /\ (P3_1__delete_elements__R23b.r23b <= Standard__natural.last) ) ) )} 
   ensures {[#"p3_1.adb" 114 0 0] true} 
   in _f)) ));
   ([#"p3_1.adb" 114 0 0] ( (let p3_1__delete_elements__aux_vector__assume = (let temp___399 [@mlw:proxy_symbol] [@introduced] = (let temp___398 [@mlw:proxy_symbol] [@introduced] = (P3_1__delete_elements__aux_vector__aggregate_def.p3_1__delete_elements__aux_vector__aggregate_def((0 : int)) ((0 : int)) (P3_1__delete_elements__R23b.r23b)) in (
    ( [#"p3_1.adb" 114 0 0] assume { [#"p3_1.adb" 114 0 0] ((P3_1__delete_elements__T25b.first temp___398) = (0 : int)) };
    [#"p3_1.adb" 114 0 0] assume { [#"p3_1.adb" 114 0 0] ((P3_1__delete_elements__T25b.last temp___398) = P3_1__delete_elements__R23b.r23b) };
    temp___398 )))
    in (
    ( [#"p3_1.adb" 114 0 0] assert { [#"p3_1.adb" 114 0 0] ([#"p3_1.adb" 114 0 0] ( [@comment:      Aux_Vector : Vector (0..(Count_Lower_Elements(Vector1, Number)-1)) := (others => 0);                                                                             ^ p3_1.adb:114:77:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Shape:aux_vector_decl__aggr] [@GP_Sloc:p3_1.adb:114:77] [@GP_Id:8] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((P3_1__delete_elements__T25b.first temp___399) <= (P3_1__delete_elements__T25b.last temp___399))) then (
     ( ((0 : int) <= P3_1__delete_elements__R23b.r23b) /\ (((P3_1__delete_elements__T25b.last temp___399) - (P3_1__delete_elements__T25b.first temp___399)) = (P3_1__delete_elements__R23b.r23b - (0 : int))) )) else (
     (P3_1__delete_elements__R23b.r23b < (0 : int)))) ) )) };
    (P3_1__delete_elements__Taux_vectorS.of_array((P3_1__delete_elements__T25b.to_array(temp___399))) ((P3_1__delete_elements__T25b.first(temp___399))) ((P3_1__delete_elements__T25b.last(temp___399)))) )))
    in (
    (  (P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content <- ( (P3_1__delete_elements__Taux_vectorS.to_array(p3_1__delete_elements__aux_vector__assume)) ));
     assume {  ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first)) = (P3_1__delete_elements__Taux_vectorS.first(p3_1__delete_elements__aux_vector__assume))) };
     assume {  ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)) = (P3_1__delete_elements__Taux_vectorS.last(p3_1__delete_elements__aux_vector__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (P3_1__delete_elements__Taux_vectorS.dynamic_property (0 : int) P3_1__delete_elements__R23b.r23b (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) /\ ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) = (0 : int)) /\ ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last) = P3_1__delete_elements__R23b.r23b) ) ))) } ));
   ([#"p3_1.adb" 115 0 0] ( [#"p3_1.adb" 115 0 0] (P3_1__delete_elements__j.j.int__content <- ( (0 : int) ));
   [#"p3_1.adb" 115 0 0] assume { [#"p3_1.adb" 115 0 0] (Standard__natural___axiom.dynamic_invariant P3_1__delete_elements__j.j.int__content True False True True) } ));
   ([#"p3_1.adb" 120 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:117:10] ([#"p3_1.adb" 117 0 0] ()) );
   ( [@GP_Sloc:p3_1.adb:117:7] ([#"p3_1.adb" 117 0 0] (if (( ([#"p3_1.adb" 117 0 0] [#"p3_1.adb" 117 0 0] (([@branch_id=2595] Main.spark__branch).bool__content <- ( (( [#"p3_1.adb" 117 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
    ()))
    in () end ;
   (Integer.length((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first))) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)))) ) = (0 : int)) )));
   ( [@branch_id=2595] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:p3_1.adb:118:10] ([#"p3_1.adb" 118 0 0] ( [#"p3_1.adb" 118 0 0] (p3_1__delete_elements__result.P3_1__vector.vector__content <- ( (P3_1__vector.of_array(( [#"p3_1.adb" 118 0 0] begin ensures {true} let _ = (let _ = ((0 : int) = (1 : int)) in (
     ()))
     in () end ;
    (Temp_____aggregate_def_401.temp_____aggregate_def_401((0 : int))) )) (P3_1__delete_elements__T27b.first) (P3_1__delete_elements__T27b.last)) ));
    [#"p3_1.adb" 118 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:p3_1.adb:120:30] ([#"p3_1.adb" 120 0 0] (let temp___405 [@mlw:proxy_symbol] [@introduced] = ( [#"p3_1.adb" 120 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) in (
   (let temp___406 [@mlw:proxy_symbol] [@introduced] = ( [#"p3_1.adb" 120 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) ) in (
    ( [#"p3_1.adb" 120 0 0] (P3_1__delete_elements__L_1__i.i.int__content <- ( temp___405 ));
    () (* Translation of an Ada loop from p3_1.adb:120 *)
    ;
    (if ((Boolean.andb((temp___405 <= P3_1__delete_elements__L_1__i.i.int__content)) ((P3_1__delete_elements__L_1__i.i.int__content <= temp___406)))) then (
     [#"p3_1.adb" 120 0 0] try
      [#"p3_1.adb" 120 0 0] try
       ( [#"p3_1.adb" 120 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__j.j.int__content in (
        ()))
        in () end ;
       (let temp___412 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 120 0 0] (val _f : int
       ensures {[#"p3_1.adb" 120 0 0] (result = P3_1__delete_elements__j.j.int__content)} 
       in _f) in (
        ( [#"p3_1.adb" 120 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
         ()))
         in () end ;
        (let temp___410 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 120 0 0] (val _f : Array__Int__Standard__integer.map
        ensures {[#"p3_1.adb" 120 0 0] (result = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content)} 
        in _f) in (
         ( [#"p3_1.adb" 120 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__L_1__i.i.int__content in (
          ()))
          in () end ;
         (let temp___408 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 120 0 0] (val _f : int
         ensures {[#"p3_1.adb" 120 0 0] (result = P3_1__delete_elements__L_1__i.i.int__content)} 
         in _f) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop p3_1.adb:120 *)
          ;
          ();
          ( [@GP_Sloc:p3_1.adb:121:10] ([#"p3_1.adb" 121 0 0] (if (( ([#"p3_1.adb" 121 0 0] [#"p3_1.adb" 121 0 0] (([@branch_id=2620] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_1__i.i.int__content)))) <= P3_1__delete_elements__number.number) )));
          ( [@branch_id=2620] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:p3_1.adb:122:13] ([#"p3_1.adb" 122 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:122:24] ([#"p3_1.adb" 122 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:122:27] ([#"p3_1.adb" 122 0 0] [#"p3_1.adb" 122 0 0] (P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 122 0 0] assert { [#"p3_1.adb" 122 0 0] ([#"p3_1.adb" 122 0 0] ( [@vc:annotation] [@comment:            Aux_Vector(j) := Vector1(i);                        ^ p3_1.adb:122:24:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:122:24] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__if__aux_vector_assign__ixdcomp] [@GP_Id:9] ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) <= P3_1__delete_elements__j.j.int__content) /\ (P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) ) )) };
           P3_1__delete_elements__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_1__i.i.int__content)))))))) ))) );
           ( [@GP_Sloc:p3_1.adb:123:13] ([#"p3_1.adb" 123 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:123:18] ([#"p3_1.adb" 123 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:123:15] ([#"p3_1.adb" 123 0 0] [#"p3_1.adb" 123 0 0] (P3_1__delete_elements__j.j.int__content <- ( ([#"p3_1.adb" 123 0 0] ( [@GP_Id:10] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__if__j_assign__add] [@GP_Sloc:p3_1.adb:123:20] [@comment:            j := j + 1;                    ^ p3_1.adb:123:20:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((P3_1__delete_elements__j.j.int__content + (1 : int)))) )) ))) );
           ( [@GP_Sloc:p3_1.adb:124:16] ([#"p3_1.adb" 124 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:124:20] ([#"p3_1.adb" 124 0 0] ()) );
           ( [@GP_Sloc:p3_1.adb:124:13] ([#"p3_1.adb" 124 0 0] (if (( ([#"p3_1.adb" 124 0 0] [#"p3_1.adb" 124 0 0] (([@branch_id=2638] Main.spark__branch).bool__content <- ( (P3_1__delete_elements__j.j.int__content > (Standard__integer__rep.to_rep(( [#"p3_1.adb" 124 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
            ()))
            in () end ;
           P3_1__delete_elements__aux_vector.aux_vector__last )))) )));
           ( [@branch_id=2638] Main.spark__branch ).bool__content )) then (
             raise Temp___exception_407) else (
            ()))) ) )) else (
           ()))) );
          () (* While loop translating the Ada loop from p3_1.adb:120 *)
          ;
          (let temp___inv_414 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Boolean.andb(((0 : int) <= P3_1__delete_elements__j.j.int__content)) ((P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
           ()))
           in () end ;
          P3_1__delete_elements__aux_vector.aux_vector__last ))))))) ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
           ()))
           in () end ;
          (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= P3_1__delete_elements__L_1__i.i.int__content)) ((P3_1__delete_elements__L_1__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
           ()))
           in () end ;
          (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) )))))) in (
            begin ensures {true} let _ = (let _ = (let temp___inv_413 [@mlw:proxy_symbol] [@introduced] = (if ((P3_1__delete_elements__j.j.int__content <> (0 : int))) then (
            ( (let k =  (val _f : int
            in _f) in (
             (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
              ()))
              in () end ;
             (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_1__i.i.int__content)))) then (
               begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 131 0 0] ( [@GP_Id:11] [@GP_Sloc:p3_1.adb:131:58] [@vc:annotation] [@comment:              (for some K in Vector1'First..i => Vector1(K) <= Number)                                                          ^ p3_1.adb:131:58:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__if__forsome__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
              k ))))) <= P3_1__delete_elements__number.number) in (
               ()))
               in () end ))))
            ;
             (val _f : bool
            ensures { ( (result = True) <-> (exists k  : int.
             ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_1__i.i.int__content) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) )) )} 
            in _f) )) else (
            ( (let k =  (val _f : int
            in _f) in (
             (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
              ()))
              in () end ;
             (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_1__i.i.int__content)))) then (
               begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 133 0 0] ( [@GP_Shape:L_1_while__pragargs__if__forall__cmp__ixdcomp] [@GP_Sloc:p3_1.adb:133:57] [@GP_Id:12] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:              (for all K in Vector1'First..i => Vector1(K) > Number));                                                         ^ p3_1.adb:133:57:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
              k ))))) > P3_1__delete_elements__number.number) in (
               ()))
               in () end ))))
            ;
             (val _f : bool
            ensures { ( (result = True) <-> (forall k   [@name:K] [@model_trace:2684]  : int.
             ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_1__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) )) )} 
            in _f) ))) in (
             begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
            in (
            ()))
            in () end ))
          ;
           while True do
           invariant { 
            ([#"p3_1.adb" 128 0 0] ( [@GP_Id:14] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Shape:L_1_while__pragargs__and] [@comment:         pragma Loop_Invariant (j in Aux_Vector'Range and i in Vector1'Range);                                 ^ p3_1.adb:128:33:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:p3_1.adb:128:33] ( ( [@GP_Sloc:p3_1.adb:128:33] [@GP_Pretty_Ada:2651] ( ((0 : int) <= P3_1__delete_elements__j.j.int__content) /\ (P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) ) ) /\ ( [@GP_Sloc:p3_1.adb:128:59] [@GP_Pretty_Ada:2656] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= P3_1__delete_elements__L_1__i.i.int__content) /\ (P3_1__delete_elements__L_1__i.i.int__content <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) ) ) ))
            }
           invariant { 
            ([#"p3_1.adb" 130 0 0] ( [@GP_Id:13] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__if] [@comment:           (if j /= 0 then             ^ p3_1.adb:130:13:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:130:13] (if ((P3_1__delete_elements__j.j.int__content <> (0 : int))) then (
             (exists k  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_1__i.i.int__content) ) /\ ( [@GP_Sloc:p3_1.adb:131:50] [@GP_Pretty_Ada:2682] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) ) ))) else (
             (forall k [#"p3_1.adb" 130 0 0]  [@name:K] [@model_trace:2684]  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_1__i.i.int__content) ) -> ( [@GP_Sloc:p3_1.adb:133:49] [@GP_Pretty_Ada:2701] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) ) )))) ))
            }
           ( () (* Assume implicit invariants from the loop p3_1.adb:120 *)
           ;
            assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) )) then (
            (P3_1__delete_elements__L_1__T29b.dynamic_property (P3_1__vector.first P3_1__delete_elements__vector1.vector1) (P3_1__vector.last P3_1__delete_elements__vector1.vector1) P3_1__delete_elements__L_1__i.i.int__content)) else true) )/\true ) /\ (if (True) then (
            true) else (
            ( (P3_1__delete_elements__Taux_vectorS.dynamic_property (0 : int) P3_1__delete_elements__R23b.r23b (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) /\ ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) = (0 : int)) /\ ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last) = P3_1__delete_elements__R23b.r23b) ) ))) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant P3_1__delete_elements__j.j.int__content True True True True) )/\true )) (( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= P3_1__delete_elements__L_1__i.i.int__content) /\ (P3_1__delete_elements__L_1__i.i.int__content <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ))) };
           () (* Check for absence of RTE in the invariant of loop p3_1.adb:120 *)
           ;
           () (* Loop statements appearing after the loop invariant of loop p3_1.adb:120 *)
           ;
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop p3_1.adb:120 *)
           ;
           (if ((P3_1__delete_elements__L_1__i.i.int__content = temp___406)) then (
             raise P3_1__delete_elements__L_1.L_1));
           ([#"p3_1.adb" 120 0 0] [#"p3_1.adb" 120 0 0] (P3_1__delete_elements__L_1__i.i.int__content <- ( (P3_1__delete_elements__L_1__i.i.int__content + (1 : int)) )));
           ();
           ( [@GP_Sloc:p3_1.adb:121:10] ([#"p3_1.adb" 121 0 0] (if (( ([#"p3_1.adb" 121 0 0] [#"p3_1.adb" 121 0 0] (([@branch_id=2620] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_1__i.i.int__content)))) <= P3_1__delete_elements__number.number) )));
           ( [@branch_id=2620] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:p3_1.adb:122:13] ([#"p3_1.adb" 122 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:122:24] ([#"p3_1.adb" 122 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:122:27] ([#"p3_1.adb" 122 0 0] [#"p3_1.adb" 122 0 0] (P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) (( [#"p3_1.adb" 122 0 0] assert { [#"p3_1.adb" 122 0 0] ([#"p3_1.adb" 122 0 0] ( [@vc:annotation] [@comment:            Aux_Vector(j) := Vector1(i);                        ^ p3_1.adb:122:24:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:122:24] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__if__aux_vector_assign__ixdcomp] [@GP_Id:9] ( ((Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__first) <= P3_1__delete_elements__j.j.int__content) /\ (P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep P3_1__delete_elements__aux_vector.aux_vector__last)) ) )) };
            P3_1__delete_elements__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) (P3_1__delete_elements__L_1__i.i.int__content)))))))) ))) );
            ( [@GP_Sloc:p3_1.adb:123:13] ([#"p3_1.adb" 123 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:123:18] ([#"p3_1.adb" 123 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:123:15] ([#"p3_1.adb" 123 0 0] [#"p3_1.adb" 123 0 0] (P3_1__delete_elements__j.j.int__content <- ( ([#"p3_1.adb" 123 0 0] ( [@GP_Id:10] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__if__j_assign__add] [@GP_Sloc:p3_1.adb:123:20] [@comment:            j := j + 1;                    ^ p3_1.adb:123:20:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((P3_1__delete_elements__j.j.int__content + (1 : int)))) )) ))) );
            ( [@GP_Sloc:p3_1.adb:124:16] ([#"p3_1.adb" 124 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:124:20] ([#"p3_1.adb" 124 0 0] ()) );
            ( [@GP_Sloc:p3_1.adb:124:13] ([#"p3_1.adb" 124 0 0] (if (( ([#"p3_1.adb" 124 0 0] [#"p3_1.adb" 124 0 0] (([@branch_id=2638] Main.spark__branch).bool__content <- ( (P3_1__delete_elements__j.j.int__content > (Standard__integer__rep.to_rep(( [#"p3_1.adb" 124 0 0] begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
             ()))
             in () end ;
            P3_1__delete_elements__aux_vector.aux_vector__last )))) )));
            ( [@branch_id=2638] Main.spark__branch ).bool__content )) then (
              raise Temp___exception_407) else (
             ()))) ) )) else (
            ()))) );
           (let temp___inv_414 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Boolean.andb(((0 : int) <= P3_1__delete_elements__j.j.int__content)) ((P3_1__delete_elements__j.j.int__content <= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content in (
            ()))
            in () end ;
           P3_1__delete_elements__aux_vector.aux_vector__last ))))))) ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
            ()))
            in () end ;
           (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= P3_1__delete_elements__L_1__i.i.int__content)) ((P3_1__delete_elements__L_1__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
            ()))
            in () end ;
           (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) )))))) in (
             begin ensures {true} let _ = (let _ = (let temp___inv_413 [@mlw:proxy_symbol] [@introduced] = (if ((P3_1__delete_elements__j.j.int__content <> (0 : int))) then (
             ( (let k =  (val _f : int
             in _f) in (
              (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
               ()))
               in () end ;
              (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_1__i.i.int__content)))) then (
                begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 131 0 0] ( [@GP_Id:11] [@GP_Sloc:p3_1.adb:131:58] [@vc:annotation] [@comment:              (for some K in Vector1'First..i => Vector1(K) <= Number)                                                          ^ p3_1.adb:131:58:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__if__forsome__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
               k ))))) <= P3_1__delete_elements__number.number) in (
                ()))
                in () end ))))
             ;
              (val _f : bool
             ensures { ( (result = True) <-> (exists k  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_1__i.i.int__content) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) )) )} 
             in _f) )) else (
             ( (let k =  (val _f : int
             in _f) in (
              (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
               ()))
               in () end ;
              (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= P3_1__delete_elements__L_1__i.i.int__content)))) then (
                begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.adb" 133 0 0] ( [@GP_Shape:L_1_while__pragargs__if__forall__cmp__ixdcomp] [@GP_Sloc:p3_1.adb:133:57] [@GP_Id:12] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:              (for all K in Vector1'First..i => Vector1(K) > Number));                                                         ^ p3_1.adb:133:57:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
               k ))))) > P3_1__delete_elements__number.number) in (
                ()))
                in () end ))))
             ;
              (val _f : bool
             ensures { ( (result = True) <-> (forall k   [@name:K] [@model_trace:2684]  : int.
              ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= P3_1__delete_elements__L_1__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) )) )} 
             in _f) ))) in (
              begin ensures {true} let _ = (let _ = () in (
              ()))
              in () end ))
             in (
             ()))
             in () end ))
            )
          done )))
          )))
         )))
        )
      with
       Temp___exception_407 -> ( ();
       ( [@GP_Sloc:p3_1.adb:125:23] ([#"p3_1.adb" 125 0 0] ()) );
       ( [@GP_Sloc:p3_1.adb:125:16] ([#"p3_1.adb" 125 0 0] ( [#"p3_1.adb" 125 0 0] (p3_1__delete_elements__result.P3_1__vector.vector__content <- ( (P3_1__vector.of_array(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first))) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)))) ));
       [#"p3_1.adb" 125 0 0] raise Return__exc )) ) )
      end
     with
      P3_1__delete_elements__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:p3_1.adb:135:14] ([#"p3_1.adb" 135 0 0] ()) );
   ( [@GP_Sloc:p3_1.adb:135:7] ([#"p3_1.adb" 135 0 0] ( [#"p3_1.adb" 135 0 0] (p3_1__delete_elements__result.P3_1__vector.vector__content <- ( (P3_1__vector.of_array(P3_1__delete_elements__aux_vector.aux_vector.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__first))) ((Standard__integer__rep.to_rep(P3_1__delete_elements__aux_vector.aux_vector__last)))) ));
   [#"p3_1.adb" 135 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.orb((if (((  begin ensures {true} let _ = (let _ = p3_1__delete_elements__result.P3_1__vector.vector__content in (
   ()))
   in () end ;
  (P3_1__vector.length(p3_1__delete_elements__result.P3_1__vector.vector__content)) ) = (0 : int))) then (
   ( (let k =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 63 0 0] ( [@GP_Id:15] [@vc:annotation] [@comment:                (for all K in Vector1'Range => Vector1(K) > Number)) or                                                        ^ p3_1.ads:63:56:VC_INDEX_CHECK] [@GP_Shape:pragargs__or__if__forall__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.ads:63:56] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
     k ))))) > P3_1__delete_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall k   [@model_trace:3321] [@name:K]  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) -> ( [@GP_Pretty_Ada:3335] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) > P3_1__delete_elements__number.number) ) )) )} 
   in _f) )) else (
   (Boolean.of_int((1 : int)))))) ((if (((  begin ensures {true} let _ = (let _ = p3_1__delete_elements__result.P3_1__vector.vector__content in (
   ()))
   in () end ;
  (P3_1__vector.length(p3_1__delete_elements__result.P3_1__vector.vector__content)) ) > (0 : int))) then (
   ( (let k =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__delete_elements__vector1.vector1)) ) <= k)) ((k <= (  begin ensures {true} let _ = (let _ = P3_1__delete_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__delete_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__delete_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 65 0 0] ( [@GP_Sloc:p3_1.ads:65:49] [@GP_Id:16] [@GP_Shape:pragargs__or__if__forsome__cmp__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:        (for some K in Vector1'Range => Vector1(K) <= Number));                                                 ^ p3_1.ads:65:49:VC_INDEX_CHECK] ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) )) };
     k ))))) <= P3_1__delete_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__delete_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__delete_elements__vector1.vector1)) ) /\ ( [@GP_Pretty_Ada:3360] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__delete_elements__vector1.vector1) k)) <= P3_1__delete_elements__number.number) ) )) )} 
   in _f) )) else (
   (Boolean.of_int((1 : int))))))) in (
   ()))
   in () end ;
  p3_1__delete_elements__result.P3_1__vector.vector__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "count_lower_elements" defined at p3_1.ads:67, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module P3_1__count_lower_elements__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        P3_1__vector as P3_1__vector
 use        P3_1__count_lower_elements__vector1 as P3_1__count_lower_elements__vector1
 use        P3_1__count_lower_elements__number as P3_1__count_lower_elements__number
 use        P3_1__count_lower_elements__i as P3_1__count_lower_elements__i
 use        P3_1__count_lower_elements__count as P3_1__count_lower_elements__count
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__count_lower_elements__L_2 as P3_1__count_lower_elements__L_2
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        P3_1__count_lower_elements__i___axiom as P3_1__count_lower_elements__i___axiom
 use        P3_1__count_lower_elements__count___axiom as P3_1__count_lower_elements__count___axiom
 use        P3_1__count_lower_elements__L_2___axiom as P3_1__count_lower_elements__L_2___axiom
 use        P3_1__vector___axiom as P3_1__vector___axiom
 use        P3_1__count_lower_elements__vector1___axiom as P3_1__count_lower_elements__vector1___axiom
 use        P3_1__count_lower_elements__number___axiom as P3_1__count_lower_elements__number___axiom

 val p3_1__count_lower_elements__result [@name:Count_Lower_Elements] [@model_projected] [@model_trace:3362@result]  : int__ref 
 
 let def [#"p3_1.ads" 67 0 0][@GP_Subp:p3_1.ads:67] 
   (__void_param : unit)
  requires { [#"p3_1.ads" 67 0 0] true }
  ensures { [#"p3_1.ads" 67 0 0] ([#"p3_1.ads" 71 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:p3_1.ads:71:14] [@GP_Shape:pragargs__or] [@GP_Id:31] [@comment:     Post => (if Vector1'Length = 0 then Count_Lower_Elements'Result = 0) or              ^ p3_1.ads:71:14:VC_POSTCONDITION] [@model_vc_post] ( [@GP_Sloc:p3_1.ads:71:14] [@GP_Pretty_Ada:15808] ( (if (((P3_1__vector.length P3_1__count_lower_elements__vector1.vector1) = (0 : int))) then (
   (p3_1__count_lower_elements__result.int__content = (0 : int))) else (
   true)) \/ (if ((p3_1__count_lower_elements__result.int__content <> (0 : int))) then (
   (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) k)) < P3_1__count_lower_elements__number.number) ))) else (
   (forall x [#"p3_1.ads" 71 0 0]  [@model_trace:3457] [@name:X]  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= x) /\ (x <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) x)) >= P3_1__count_lower_elements__number.number) )))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram p3_1.ads:67 *)
  ;
   assume {  (P3_1__vector___axiom.dynamic_invariant P3_1__count_lower_elements__vector1.vector1 True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant P3_1__count_lower_elements__number.number True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram p3_1.ads:67 *)
  ;
  () (* Check for RTE in the Pre of the subprogram p3_1.ads:67 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__count_lower_elements__vector1.vector1)) ) < (1000 : int)) && ((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram p3_1.ads:67 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3413] ((P3_1__vector.length P3_1__count_lower_elements__vector1.vector1) < (1000 : int)) ) /\ ( [@GP_Pretty_Ada:3419] ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) = (0 : int)) ) ) };
   try
   ( ();
   ([#"p3_1.adb" 138 0 0] ());
   ([#"p3_1.adb" 139 0 0] ( [#"p3_1.adb" 139 0 0] (P3_1__count_lower_elements__i.i.int__content <- ( ([#"p3_1.adb" 139 0 0] ( [@GP_Id:18] [@GP_Sloc:p3_1.adb:139:29] [@comment:      i : Natural := Vector1'First;                             ^ p3_1.adb:139:29:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:i_decl__first_ref] [@GP_Reason:VC_RANGE_CHECK] (Standard__natural.range_check_(( [#"p3_1.adb" 139 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ))) )) ));
    assume {  (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__i.i.int__content True False True True) } ));
   ([#"p3_1.adb" 140 0 0] ( [#"p3_1.adb" 140 0 0] (P3_1__count_lower_elements__count.count.int__content <- ( (0 : int) ));
   [#"p3_1.adb" 140 0 0] assume { [#"p3_1.adb" 140 0 0] (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__count.count.int__content True False True True) } ));
   ([#"p3_1.adb" 142 0 0] ());
   ();
   ( [@GP_Sloc:p3_1.adb:142:29] ([#"p3_1.adb" 142 0 0] ( () (* Translation of an Ada loop from p3_1.adb:142 *)
   ;
   (if ((P3_1__count_lower_elements__i.i.int__content <= ( [#"p3_1.adb" 142 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
    ()))
    in () end ;
   (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) ))) then (
    [#"p3_1.adb" 142 0 0] try
     ( [#"p3_1.adb" 142 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__count.count.int__content in (
      ()))
      in () end ;
     (let temp___418 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 142 0 0] (val _f : int
     ensures {[#"p3_1.adb" 142 0 0] (result = P3_1__count_lower_elements__count.count.int__content)} 
     in _f) in (
      ( [#"p3_1.adb" 142 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__i.i.int__content in (
       ()))
       in () end ;
      (let temp___417 [@mlw:proxy_symbol] [@introduced] = [#"p3_1.adb" 142 0 0] (val _f : int
      ensures {[#"p3_1.adb" 142 0 0] (result = P3_1__count_lower_elements__i.i.int__content)} 
      in _f) in (
       [#"p3_1.adb" 142 0 0] let temp___422 [@mlw:proxy_symbol] [@introduced] = { int__content = (0 : int) } in 
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop p3_1.adb:142 *)
        ;
        ();
        ( [@GP_Sloc:p3_1.adb:143:21] ([#"p3_1.adb" 143 0 0] ()) );
        ( [@GP_Sloc:p3_1.adb:143:10] ([#"p3_1.adb" 143 0 0] (if (( ([#"p3_1.adb" 143 0 0] [#"p3_1.adb" 143 0 0] (([@branch_id=2767] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) (( [#"p3_1.adb" 143 0 0] assert { [#"p3_1.adb" 143 0 0] ([#"p3_1.adb" 143 0 0] ( [@comment:         if Vector1(i)<Number then                     ^ p3_1.adb:143:21:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:L_2_while__if__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:143:21] [@GP_Id:20] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= P3_1__count_lower_elements__i.i.int__content) /\ (P3_1__count_lower_elements__i.i.int__content <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
        P3_1__count_lower_elements__i.i.int__content ))))) < P3_1__count_lower_elements__number.number) )));
        ( [@branch_id=2767] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:p3_1.adb:144:13] ([#"p3_1.adb" 144 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:144:22] ([#"p3_1.adb" 144 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:144:19] ([#"p3_1.adb" 144 0 0] [#"p3_1.adb" 144 0 0] (P3_1__count_lower_elements__count.count.int__content <- ( ([#"p3_1.adb" 144 0 0] ( [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:144:28] [@GP_Shape:L_2_while__if__count_assign__add] [@comment:            Count := Count + 1;                            ^ p3_1.adb:144:28:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((P3_1__count_lower_elements__count.count.int__content + (1 : int)))) )) ))) ) )) else (
         ()))) );
        () (* While loop translating the Ada loop from p3_1.adb:142 *)
        ;
        (let temp___inv_421 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
         ()))
         in () end ;
        (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= P3_1__count_lower_elements__i.i.int__content)) ((P3_1__count_lower_elements__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
         ()))
         in () end ;
        (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) )))) in (
          begin ensures {true} let _ = (let _ = (let temp___inv_420 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= P3_1__count_lower_elements__count.count.int__content)) ((P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 148 0 0] ( [@GP_Shape:L_2_while__pragargs__in__range__add] [@GP_Sloc:p3_1.adb:148:45] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant(Count in 0..i+1);                                             ^ p3_1.adb:148:45:VC_OVERFLOW_CHECK] [@GP_Id:25] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content + (1 : int)))) ))))) in (
           begin ensures {true} let _ = (let _ = (let temp___inv_419 [@mlw:proxy_symbol] [@introduced] = (P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 149 0 0] ( [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                                          ^ p3_1.adb:149:58:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:149:58] [@GP_Id:23] [@GP_Shape:L_2_while__pragargs__cmp__add] (Standard__integer.range_check_((([#"p3_1.adb" 149 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__pragargs__cmp__add__sub] [@GP_Sloc:p3_1.adb:149:43] [@GP_Id:22] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                           ^ p3_1.adb:149:43:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content - ( [#"p3_1.adb" 149 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
           ()))
           in () end ;
          (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           in (
           ()))
           in () end ))
          in (
          ()))
          in () end ))
        ;
         while True do
         invariant { 
          ([#"p3_1.adb" 147 0 0] ( [@GP_Shape:L_2_while__pragargs__in] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:p3_1.adb:147:32] [@comment:         pragma Loop_Invariant(i in Vector1'First..Vector1'Last);                                ^ p3_1.adb:147:32:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Id:27] ( [@GP_Sloc:p3_1.adb:147:32] [@GP_Pretty_Ada:2788] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= P3_1__count_lower_elements__i.i.int__content) /\ (P3_1__count_lower_elements__i.i.int__content <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) ) ))
          }
         invariant { 
          ([#"p3_1.adb" 148 0 0] ( [@comment:         pragma Loop_Invariant(Count in 0..i+1);                                ^ p3_1.adb:148:32:VC_LOOP_INVARIANT] [@GP_Shape:L_2_while__pragargs__in] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:p3_1.adb:148:32] [@GP_Id:26] ( [@GP_Pretty_Ada:2800] [@GP_Sloc:p3_1.adb:148:32] ( ((0 : int) <= P3_1__count_lower_elements__count.count.int__content) /\ (P3_1__count_lower_elements__count.count.int__content <= (P3_1__count_lower_elements__i.i.int__content + (1 : int))) ) ) ))
          }
         invariant { 
          ([#"p3_1.adb" 149 0 0] ( [@GP_Sloc:p3_1.adb:149:32] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                ^ p3_1.adb:149:32:VC_LOOP_INVARIANT] [@GP_Id:24] [@GP_Shape:L_2_while__pragargs__cmp] ( [@GP_Sloc:p3_1.adb:149:32] [@GP_Pretty_Ada:2809] (P3_1__count_lower_elements__count.count.int__content <= ((P3_1__count_lower_elements__i.i.int__content - (P3_1__vector.first P3_1__count_lower_elements__vector1.vector1)) + (1 : int))) ) ))
          }
         ( () (* Assume implicit invariants from the loop p3_1.adb:142 *)
         ;
          assume {  ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__i.i.int__content True True True True) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant P3_1__count_lower_elements__count.count.int__content True True True True) )/\true ) };
         () (* Check for absence of RTE in the invariant of loop p3_1.adb:142 *)
         ;
          (temp___422.int__content <- ( P3_1__count_lower_elements__i.i.int__content ));
         () (* Loop statements appearing after the loop invariant of loop p3_1.adb:142 *)
         ;
         ();
         ( [@GP_Sloc:p3_1.adb:150:10] ([#"p3_1.adb" 150 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:150:15] ([#"p3_1.adb" 150 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:150:12] ([#"p3_1.adb" 150 0 0] [#"p3_1.adb" 150 0 0] (P3_1__count_lower_elements__i.i.int__content <- ( ([#"p3_1.adb" 150 0 0] ( [@GP_Sloc:p3_1.adb:150:17] [@GP_Shape:L_2_while__i_assign__add] [@comment:         i := i + 1;                 ^ p3_1.adb:150:17:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:21] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content + (1 : int)))) )) ))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop p3_1.adb:142 *)
         ;
         (if (not ( (P3_1__count_lower_elements__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
          ()))
          in () end ;
         (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) )) )) then (
           raise P3_1__count_lower_elements__L_2.L_2));
         ();
         ( [@GP_Sloc:p3_1.adb:143:21] ([#"p3_1.adb" 143 0 0] ()) );
         ( [@GP_Sloc:p3_1.adb:143:10] ([#"p3_1.adb" 143 0 0] (if (( ([#"p3_1.adb" 143 0 0] [#"p3_1.adb" 143 0 0] (([@branch_id=2767] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) (( [#"p3_1.adb" 143 0 0] assert { [#"p3_1.adb" 143 0 0] ([#"p3_1.adb" 143 0 0] ( [@comment:         if Vector1(i)<Number then                     ^ p3_1.adb:143:21:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:L_2_while__if__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.adb:143:21] [@GP_Id:20] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= P3_1__count_lower_elements__i.i.int__content) /\ (P3_1__count_lower_elements__i.i.int__content <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
         P3_1__count_lower_elements__i.i.int__content ))))) < P3_1__count_lower_elements__number.number) )));
         ( [@branch_id=2767] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:p3_1.adb:144:13] ([#"p3_1.adb" 144 0 0] ()) );
          ( [@GP_Sloc:p3_1.adb:144:22] ([#"p3_1.adb" 144 0 0] ()) );
          ( [@GP_Sloc:p3_1.adb:144:19] ([#"p3_1.adb" 144 0 0] [#"p3_1.adb" 144 0 0] (P3_1__count_lower_elements__count.count.int__content <- ( ([#"p3_1.adb" 144 0 0] ( [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:144:28] [@GP_Shape:L_2_while__if__count_assign__add] [@comment:            Count := Count + 1;                            ^ p3_1.adb:144:28:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((P3_1__count_lower_elements__count.count.int__content + (1 : int)))) )) ))) ) )) else (
          ()))) );
          begin ensures {true} let _ = (let _ =  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__i.i.int__content in (
          ()))
          in () end  in (
          ()))
          in () end ;
          check {  ([#"p3_1.adb" 146 0 0] ( [@GP_Reason:VC_LOOP_VARIANT] [@GP_Sloc:p3_1.adb:146:10] [@vc:annotation] [@comment:         pragma Loop_Variant(Increases => i);          ^ p3_1.adb:146:10:VC_LOOP_VARIANT] [@GP_Id:28] [@GP_Shape:L_2_while] (P3_1__count_lower_elements__i.i.int__content > temp___422.int__content) )) };
         (let temp___inv_421 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
          ()))
          in () end ;
         (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= P3_1__count_lower_elements__i.i.int__content)) ((P3_1__count_lower_elements__i.i.int__content <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
          ()))
          in () end ;
         (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) )))) in (
           begin ensures {true} let _ = (let _ = (let temp___inv_420 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= P3_1__count_lower_elements__count.count.int__content)) ((P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 148 0 0] ( [@GP_Shape:L_2_while__pragargs__in__range__add] [@GP_Sloc:p3_1.adb:148:45] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant(Count in 0..i+1);                                             ^ p3_1.adb:148:45:VC_OVERFLOW_CHECK] [@GP_Id:25] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content + (1 : int)))) ))))) in (
            begin ensures {true} let _ = (let _ = (let temp___inv_419 [@mlw:proxy_symbol] [@introduced] = (P3_1__count_lower_elements__count.count.int__content <= ([#"p3_1.adb" 149 0 0] ( [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                                          ^ p3_1.adb:149:58:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:p3_1.adb:149:58] [@GP_Id:23] [@GP_Shape:L_2_while__pragargs__cmp__add] (Standard__integer.range_check_((([#"p3_1.adb" 149 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_while__pragargs__cmp__add__sub] [@GP_Sloc:p3_1.adb:149:43] [@GP_Id:22] [@comment:         pragma Loop_Invariant(Count <= (i-Vector1'First)+1);                                           ^ p3_1.adb:149:43:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((P3_1__count_lower_elements__i.i.int__content - ( [#"p3_1.adb" 149 0 0] begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
            ()))
            in () end ;
           (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) )))) )) + (1 : int)))) ))) in (
             begin ensures {true} let _ = (let _ = () in (
             ()))
             in () end ))
            in (
            ()))
            in () end ))
           in (
           ()))
           in () end ))
          )
        done )))
       )))
      )
    with
     P3_1__count_lower_elements__L_2.L_2 -> ()
    end)) )) );
   ( [@GP_Sloc:p3_1.adb:152:14] ([#"p3_1.adb" 152 0 0] ()) );
   ( [@GP_Sloc:p3_1.adb:152:7] ([#"p3_1.adb" 152 0 0] ( [#"p3_1.adb" 152 0 0] (p3_1__count_lower_elements__result.int__content <- ( P3_1__count_lower_elements__count.count.int__content ));
   [#"p3_1.adb" 152 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.orb((if (((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
   ()))
   in () end ;
  (P3_1__vector.length(P3_1__count_lower_elements__vector1.vector1)) ) = (0 : int))) then (
   (p3_1__count_lower_elements__result.int__content = (0 : int))) else (
   (Boolean.of_int((1 : int)))))) ((if ((p3_1__count_lower_elements__result.int__content <> (0 : int))) then (
   ( (let k =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= k)) ((k <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 73 0 0] ( [@comment:        (for some K in Vector1'Range => Vector1(K)<Number)                                                 ^ p3_1.ads:73:49:VC_INDEX_CHECK] [@GP_Shape:pragargs__or__if__forsome__cmp__ixdcomp] [@GP_Sloc:p3_1.ads:73:49] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:29] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
     k ))))) < P3_1__count_lower_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (exists k  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= k) /\ (k <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) /\ ( [@GP_Pretty_Ada:3455] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) k)) < P3_1__count_lower_elements__number.number) ) )) )} 
   in _f) )) else (
   ( (let x =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.first(P3_1__count_lower_elements__vector1.vector1)) ) <= x)) ((x <= (  begin ensures {true} let _ = (let _ = P3_1__count_lower_elements__vector1.vector1 in (
     ()))
     in () end ;
    (P3_1__vector.last(P3_1__count_lower_elements__vector1.vector1)) ))))) then (
      begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((P3_1__vector.to_array(P3_1__count_lower_elements__vector1.vector1))) ((  assert {  ([#"p3_1.ads" 75 0 0] ( [@comment:        (for all X in Vector1'Range => Vector1(X)>=Number));                                                ^ p3_1.ads:75:48:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:30] [@GP_Shape:pragargs__or__if__forall__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:p3_1.ads:75:48] ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= x) /\ (x <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) )) };
     x ))))) >= P3_1__count_lower_elements__number.number) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall x   [@model_trace:3457] [@name:X]  : int.
    ( ( ((P3_1__vector.first P3_1__count_lower_elements__vector1.vector1) <= x) /\ (x <= (P3_1__vector.last P3_1__count_lower_elements__vector1.vector1)) ) -> ( [@GP_Pretty_Ada:3471] ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (P3_1__vector.to_array P3_1__count_lower_elements__vector1.vector1) x)) >= P3_1__count_lower_elements__number.number) ) )) )} 
   in _f) ))))) in (
   ()))
   in () end ;
  p3_1__count_lower_elements__result.int__content )
end
